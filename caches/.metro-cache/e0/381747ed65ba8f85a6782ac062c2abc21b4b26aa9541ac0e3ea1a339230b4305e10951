{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"query-string","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":94},"end":{"line":6,"column":44,"index":138}}],"key":"Tk6zkk+/XfK89igjx1MNWAcG1Q8=","exportNames":["*"],"imports":1}},{"name":"./fromEntries","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":140},"end":{"line":8,"column":40,"index":180}}],"key":"51iWj2uvgNU0WwlOOmXknGnq1iI=","exportNames":["*"],"imports":1}},{"name":"./validatePathConfig","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":239},"end":{"line":10,"column":54,"index":293}}],"key":"lNCZoFG+bPfLLls7jfDHI8FLnUk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return getPathFromState;\n    }\n  });\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _queryString = require(_dependencyMap[1], \"query-string\");\n  var queryString = _interopNamespace(_queryString);\n  var _fromEntries = require(_dependencyMap[2], \"./fromEntries\");\n  var fromEntries = _interopDefault(_fromEntries);\n  var _validatePathConfig = require(_dependencyMap[3], \"./validatePathConfig\");\n  var validatePathConfig = _interopDefault(_validatePathConfig);\n  var getActiveRoute = state => {\n    var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n    return route;\n  };\n\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, options) {\n    if (state == null) {\n      throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n    }\n    if (options) {\n      (0, validatePathConfig.default)(options);\n    }\n\n    // Create a normalized configs object which will be easier to use\n    var configs = options?.screens ? createNormalizedConfigs(options?.screens) : {};\n    var path = '/';\n    var current = state;\n    var allParams = {};\n    var _loop = function () {\n      var index = typeof current.index === 'number' ? current.index : 0;\n      var route = current.routes[index];\n      var pattern;\n      var focusedParams;\n      var focusedRoute = getActiveRoute(state);\n      var currentOptions = configs;\n\n      // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n      var nestedRouteNames = [];\n      var hasNext = true;\n      var _loop2 = function () {\n        pattern = currentOptions[route.name].pattern;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          var stringify = currentOptions[route.name]?.stringify;\n          var currentParams = (0, fromEntries.default)(Object.entries(route.params).map(_ref => {\n            var _ref2 = (0, _slicedToArray.default)(_ref, 2),\n              key = _ref2[0],\n              value = _ref2[1];\n            return [key, stringify?.[key] ? stringify[key](value) : String(value)];\n          }));\n          if (pattern) {\n            Object.assign(allParams, currentParams);\n          }\n          if (focusedRoute === route) {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = {\n              ...currentParams\n            };\n            pattern?.split('/').filter(p => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach(p => {\n              var name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n          }\n        }\n\n        // If there is no `screens` property or no nested state, we return pattern\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          hasNext = false;\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          var nextRoute = route.state.routes[index];\n          var nestedConfig = currentOptions[route.name].screens;\n\n          // if there is config for next route name, we go deeper\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            // If not, there is no sense in going deeper in config\n            hasNext = false;\n          }\n        }\n      };\n      while (route.name in currentOptions && hasNext) {\n        _loop2();\n      }\n      if (pattern === undefined) {\n        pattern = nestedRouteNames.join('/');\n      }\n      if (currentOptions[route.name] !== undefined) {\n        path += pattern.split('/').map(p => {\n          var name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            var _value = allParams[name];\n            if (_value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n            return encodeURIComponent(_value);\n          }\n          return encodeURIComponent(p);\n        }).join('/');\n      } else {\n        path += encodeURIComponent(route.name);\n      }\n      if (!focusedParams) {\n        focusedParams = focusedRoute.params;\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (var param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n        var query = queryString.stringify(focusedParams, {\n          sort: false\n        });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      current = route.state;\n    };\n    while (current) {\n      _loop();\n    }\n\n    // Remove multiple as well as trailing slashes\n    path = path.replace(/\\/+/g, '/');\n    path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n    return path;\n  }\n  var getParamName = pattern => pattern.replace(/^:/, '').replace(/\\?$/, '');\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  var createConfigItem = (config, parentPattern) => {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var _pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      return {\n        pattern: _pattern\n      };\n    }\n\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    var pattern;\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n    var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n    return {\n      // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n      pattern: pattern?.split('/').filter(Boolean).join('/'),\n      stringify: config.stringify,\n      screens\n    };\n  };\n  var createNormalizedConfigs = (options, pattern) => (0, fromEntries.default)(Object.entries(options).map(_ref3 => {\n    var _ref4 = (0, _slicedToArray.default)(_ref3, 2),\n      name = _ref4[0],\n      c = _ref4[1];\n    var result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n});","lineCount":253,"map":[[27,2,69,15,"Object"],[27,8,69,15],[27,9,69,15,"defineProperty"],[27,23,69,15],[27,24,69,15,"exports"],[27,31,69,15],[28,4,69,15,"enumerable"],[28,14,69,15],[29,4,69,15,"get"],[29,7,69,15],[29,18,69,15,"get"],[29,19,69,15],[30,6,69,15],[30,13,69,15,"getPathFromState"],[30,29,69,15],[31,4,69,15],[32,2,69,15],[33,2,238,1],[33,6,238,1,"_babelRuntimeHelpersSlicedToArray"],[33,39,238,1],[33,42,238,1,"require"],[33,49,238,1],[33,50,238,1,"_dependencyMap"],[33,64,238,1],[34,2,238,1],[34,6,238,1,"_slicedToArray"],[34,20,238,1],[34,23,238,1,"_interopDefault"],[34,38,238,1],[34,39,238,1,"_babelRuntimeHelpersSlicedToArray"],[34,72,238,1],[35,2,6,0],[35,6,6,0,"_queryString"],[35,18,6,0],[35,21,6,0,"require"],[35,28,6,0],[35,29,6,0,"_dependencyMap"],[35,43,6,0],[36,2,6,0],[36,6,6,0,"queryString"],[36,17,6,0],[36,20,6,0,"_interopNamespace"],[36,37,6,0],[36,38,6,0,"_queryString"],[36,50,6,0],[37,2,8,0],[37,6,8,0,"_fromEntries"],[37,18,8,0],[37,21,8,0,"require"],[37,28,8,0],[37,29,8,0,"_dependencyMap"],[37,43,8,0],[38,2,8,0],[38,6,8,0,"fromEntries"],[38,17,8,0],[38,20,8,0,"_interopDefault"],[38,35,8,0],[38,36,8,0,"_fromEntries"],[38,48,8,0],[39,2,10,0],[39,6,10,0,"_validatePathConfig"],[39,25,10,0],[39,28,10,0,"require"],[39,35,10,0],[39,36,10,0,"_dependencyMap"],[39,50,10,0],[40,2,10,0],[40,6,10,0,"validatePathConfig"],[40,24,10,0],[40,27,10,0,"_interopDefault"],[40,42,10,0],[40,43,10,0,"_validatePathConfig"],[40,62,10,0],[41,2,27,0],[41,6,27,6,"getActiveRoute"],[41,20,27,20],[41,23,27,24,"state"],[41,28,27,36],[41,32,27,76],[42,4,28,2],[42,8,28,8,"route"],[42,13,28,13],[42,16,29,4],[42,23,29,11,"state"],[42,28,29,16],[42,29,29,17,"index"],[42,34,29,22],[42,39,29,27],[42,47,29,35],[42,50,30,8,"state"],[42,55,30,13],[42,56,30,14,"routes"],[42,62,30,20],[42,63,30,21,"state"],[42,68,30,26],[42,69,30,27,"index"],[42,74,30,32],[42,75,30,33],[42,78,31,8,"state"],[42,83,31,13],[42,84,31,14,"routes"],[42,90,31,20],[42,91,31,21,"state"],[42,96,31,26],[42,97,31,27,"routes"],[42,103,31,33],[42,104,31,34,"length"],[42,110,31,40],[42,113,31,43],[42,114,31,44],[42,115,31,45],[43,4,33,2],[43,8,33,6,"route"],[43,13,33,11],[43,14,33,12,"state"],[43,19,33,17],[43,21,33,19],[44,6,34,4],[44,13,34,11,"getActiveRoute"],[44,27,34,25],[44,28,34,26,"route"],[44,33,34,31],[44,34,34,32,"state"],[44,39,34,37],[44,40,34,38],[45,4,35,2],[46,4,37,2],[46,11,37,9,"route"],[46,16,37,14],[47,2,38,0],[47,3,38,1],[49,2,40,0],[50,0,41,0],[51,0,42,0],[52,0,43,0],[53,0,44,0],[54,0,45,0],[55,0,46,0],[56,0,47,0],[57,0,48,0],[58,0,49,0],[59,0,50,0],[60,0,51,0],[61,0,52,0],[62,0,53,0],[63,0,54,0],[64,0,55,0],[65,0,56,0],[66,0,57,0],[67,0,58,0],[68,0,59,0],[69,0,60,0],[70,0,61,0],[71,0,62,0],[72,0,63,0],[73,0,64,0],[74,0,65,0],[75,0,66,0],[76,0,67,0],[77,0,68,0],[78,2,69,15],[78,11,69,24,"getPathFromState"],[78,27,69,40,"getPathFromState"],[78,28,70,2,"state"],[78,33,70,14],[78,35,71,2,"options"],[78,42,71,30],[78,44,72,10],[79,4,73,2],[79,8,73,6,"state"],[79,13,73,11],[79,17,73,15],[79,21,73,19],[79,23,73,21],[80,6,74,4],[80,12,74,10,"Error"],[80,17,74,15],[80,18,75,6],[80,97,76,4],[80,98,76,5],[81,4,77,2],[82,4,79,2],[82,8,79,6,"options"],[82,15,79,13],[82,17,79,15],[83,6,80,4],[83,10,80,4,"validatePathConfig"],[83,28,80,22],[83,29,80,22,"default"],[83,36,80,22],[83,38,80,23,"options"],[83,45,80,30],[83,46,80,31],[84,4,81,2],[86,4,83,2],[87,4,84,2],[87,8,84,8,"configs"],[87,15,84,43],[87,18,84,46,"options"],[87,25,84,53],[87,27,84,55,"screens"],[87,34,84,62],[87,37,85,6,"createNormalizedConfigs"],[87,60,85,29],[87,61,85,30,"options"],[87,68,85,37],[87,70,85,39,"screens"],[87,77,85,46],[87,78,85,47],[87,81,86,6],[87,82,86,7],[87,83,86,8],[88,4,88,2],[88,8,88,6,"path"],[88,12,88,10],[88,15,88,13],[88,18,88,16],[89,4,89,2],[89,8,89,6,"current"],[89,15,89,32],[89,18,89,35,"state"],[89,23,89,40],[90,4,91,2],[90,8,91,8,"allParams"],[90,17,91,38],[90,20,91,41],[90,21,91,42],[90,22,91,43],[91,4,91,44],[91,8,91,44,"_loop"],[91,13,91,44],[91,25,91,44,"_loop"],[91,26,91,44],[91,28,93,18],[92,6,94,4],[92,10,94,8,"index"],[92,15,94,13],[92,18,94,16],[92,25,94,23,"current"],[92,32,94,30],[92,33,94,31,"index"],[92,38,94,36],[92,43,94,41],[92,51,94,49],[92,54,94,52,"current"],[92,61,94,59],[92,62,94,60,"index"],[92,67,94,65],[92,70,94,68],[92,71,94,69],[93,6,95,4],[93,10,95,8,"route"],[93,15,95,13],[93,18,95,16,"current"],[93,25,95,23],[93,26,95,24,"routes"],[93,32,95,30],[93,33,95,31,"index"],[93,38,95,36],[93,39,97,5],[94,6,99,4],[94,10,99,8,"pattern"],[94,17,99,35],[95,6,101,4],[95,10,101,8,"focusedParams"],[95,23,101,54],[96,6,102,4],[96,10,102,8,"focusedRoute"],[96,22,102,20],[96,25,102,23,"getActiveRoute"],[96,39,102,37],[96,40,102,38,"state"],[96,45,102,43],[96,46,102,44],[97,6,103,4],[97,10,103,8,"currentOptions"],[97,24,103,22],[97,27,103,25,"configs"],[97,34,103,32],[99,6,105,4],[100,6,106,4],[100,10,106,8,"nestedRouteNames"],[100,26,106,24],[100,29,106,27],[100,31,106,29],[101,6,108,4],[101,10,108,8,"hasNext"],[101,17,108,15],[101,20,108,18],[101,24,108,22],[102,6,108,23],[102,10,108,23,"_loop2"],[102,16,108,23],[102,28,108,23,"_loop2"],[102,29,108,23],[102,31,110,52],[103,8,111,6,"pattern"],[103,15,111,13],[103,18,111,16,"currentOptions"],[103,32,111,30],[103,33,111,31,"route"],[103,38,111,36],[103,39,111,37,"name"],[103,43,111,41],[103,44,111,42],[103,45,111,43,"pattern"],[103,52,111,50],[104,8,113,6,"nestedRouteNames"],[104,24,113,22],[104,25,113,23,"push"],[104,29,113,27],[104,30,113,28,"route"],[104,35,113,33],[104,36,113,34,"name"],[104,40,113,38],[104,41,113,39],[105,8,115,6],[105,12,115,10,"route"],[105,17,115,15],[105,18,115,16,"params"],[105,24,115,22],[105,26,115,24],[106,10,116,8],[106,14,116,14,"stringify"],[106,23,116,23],[106,26,116,26,"currentOptions"],[106,40,116,40],[106,41,116,41,"route"],[106,46,116,46],[106,47,116,47,"name"],[106,51,116,51],[106,52,116,52],[106,54,116,54,"stringify"],[106,63,116,63],[107,10,118,8],[107,14,118,14,"currentParams"],[107,27,118,27],[107,30,118,30],[107,34,118,30,"fromEntries"],[107,45,118,41],[107,46,118,41,"default"],[107,53,118,41],[107,55,119,10,"Object"],[107,61,119,16],[107,62,119,17,"entries"],[107,69,119,24],[107,70,119,25,"route"],[107,75,119,30],[107,76,119,31,"params"],[107,82,119,37],[107,83,119,38],[107,84,119,39,"map"],[107,87,119,42],[107,88,119,43,"_ref"],[107,92,119,43],[108,12,119,43],[108,16,119,43,"_ref2"],[108,21,119,43],[108,28,119,43,"_slicedToArray"],[108,42,119,43],[108,43,119,43,"default"],[108,50,119,43],[108,52,119,43,"_ref"],[108,56,119,43],[109,14,119,45,"key"],[109,17,119,48],[109,20,119,48,"_ref2"],[109,25,119,48],[110,14,119,50,"value"],[110,19,119,55],[110,22,119,55,"_ref2"],[110,27,119,55],[111,12,119,55],[111,19,119,61],[111,20,120,12,"key"],[111,23,120,15],[111,25,121,12,"stringify"],[111,34,121,21],[111,37,121,24,"key"],[111,40,121,27],[111,41,121,28],[111,44,121,31,"stringify"],[111,53,121,40],[111,54,121,41,"key"],[111,57,121,44],[111,58,121,45],[111,59,121,46,"value"],[111,64,121,51],[111,65,121,52],[111,68,121,55,"String"],[111,74,121,61],[111,75,121,62,"value"],[111,80,121,67],[111,81,121,68],[111,82,122,11],[112,10,122,11],[112,12,123,8],[112,13,123,9],[113,10,125,8],[113,14,125,12,"pattern"],[113,21,125,19],[113,23,125,21],[114,12,126,10,"Object"],[114,18,126,16],[114,19,126,17,"assign"],[114,25,126,23],[114,26,126,24,"allParams"],[114,35,126,33],[114,37,126,35,"currentParams"],[114,50,126,48],[114,51,126,49],[115,10,127,8],[116,10,129,8],[116,14,129,12,"focusedRoute"],[116,26,129,24],[116,31,129,29,"route"],[116,36,129,34],[116,38,129,36],[117,12,130,10],[118,12,131,10],[119,12,132,10,"focusedParams"],[119,25,132,23],[119,28,132,26],[120,14,132,28],[120,17,132,31,"currentParams"],[121,12,132,45],[121,13,132,46],[122,12,134,10,"pattern"],[122,19,134,17],[122,21,135,14,"split"],[122,26,135,19],[122,27,135,20],[122,30,135,23],[122,31,135,24],[122,32,136,13,"filter"],[122,38,136,19],[122,39,136,21,"p"],[122,40,136,22],[122,44,136,27,"p"],[122,45,136,28],[122,46,136,29,"startsWith"],[122,56,136,39],[122,57,136,40],[122,60,136,43],[122,61,136,44],[123,12,137,12],[124,12,137,12],[124,13,138,13,"forEach"],[124,20,138,20],[124,21,138,22,"p"],[124,22,138,23],[124,26,138,28],[125,14,139,14],[125,18,139,20,"name"],[125,22,139,24],[125,25,139,27,"getParamName"],[125,37,139,39],[125,38,139,40,"p"],[125,39,139,41],[125,40,139,42],[127,14,141,14],[128,14,142,14],[128,18,142,18,"focusedParams"],[128,31,142,31],[128,33,142,33],[129,16,143,16],[130,16,144,16],[130,23,144,23,"focusedParams"],[130,36,144,36],[130,37,144,37,"name"],[130,41,144,41],[130,42,144,42],[131,14,145,14],[132,12,146,12],[132,13,146,13],[132,14,146,14],[133,10,147,8],[134,8,148,6],[136,8,150,6],[137,8,151,6],[137,12,151,10],[137,13,151,11,"currentOptions"],[137,27,151,25],[137,28,151,26,"route"],[137,33,151,31],[137,34,151,32,"name"],[137,38,151,36],[137,39,151,37],[137,40,151,38,"screens"],[137,47,151,45],[137,51,151,49,"route"],[137,56,151,54],[137,57,151,55,"state"],[137,62,151,60],[137,67,151,65,"undefined"],[137,76,151,74],[137,78,151,76],[138,10,152,8,"hasNext"],[138,17,152,15],[138,20,152,18],[138,25,152,23],[139,8,153,6],[139,9,153,7],[139,15,153,13],[140,10,154,8,"index"],[140,15,154,13],[140,18,155,10],[140,25,155,17,"route"],[140,30,155,22],[140,31,155,23,"state"],[140,36,155,28],[140,37,155,29,"index"],[140,42,155,34],[140,47,155,39],[140,55,155,47],[140,58,156,14,"route"],[140,63,156,19],[140,64,156,20,"state"],[140,69,156,25],[140,70,156,26,"index"],[140,75,156,31],[140,78,157,14,"route"],[140,83,157,19],[140,84,157,20,"state"],[140,89,157,25],[140,90,157,26,"routes"],[140,96,157,32],[140,97,157,33,"length"],[140,103,157,39],[140,106,157,42],[140,107,157,43],[141,10,159,8],[141,14,159,14,"nextRoute"],[141,23,159,23],[141,26,159,26,"route"],[141,31,159,31],[141,32,159,32,"state"],[141,37,159,37],[141,38,159,38,"routes"],[141,44,159,44],[141,45,159,45,"index"],[141,50,159,50],[141,51,159,51],[142,10,160,8],[142,14,160,14,"nestedConfig"],[142,26,160,26],[142,29,160,29,"currentOptions"],[142,43,160,43],[142,44,160,44,"route"],[142,49,160,49],[142,50,160,50,"name"],[142,54,160,54],[142,55,160,55],[142,56,160,56,"screens"],[142,63,160,63],[144,10,162,8],[145,10,163,8],[145,14,163,12,"nestedConfig"],[145,26,163,24],[145,30,163,28,"nextRoute"],[145,39,163,37],[145,40,163,38,"name"],[145,44,163,42],[145,48,163,46,"nestedConfig"],[145,60,163,58],[145,62,163,60],[146,12,164,10,"route"],[146,17,164,15],[146,20,164,18,"nextRoute"],[146,29,164,64],[147,12,165,10,"currentOptions"],[147,26,165,24],[147,29,165,27,"nestedConfig"],[147,41,165,39],[148,10,166,8],[148,11,166,9],[148,17,166,15],[149,12,167,10],[150,12,168,10,"hasNext"],[150,19,168,17],[150,22,168,20],[150,27,168,25],[151,10,169,8],[152,8,170,6],[153,6,171,4],[153,7,171,5],[154,6,110,4],[154,13,110,11,"route"],[154,18,110,16],[154,19,110,17,"name"],[154,23,110,21],[154,27,110,25,"currentOptions"],[154,41,110,39],[154,45,110,43,"hasNext"],[154,52,110,50],[155,8,110,50,"_loop2"],[155,14,110,50],[156,6,110,50],[157,6,173,4],[157,10,173,8,"pattern"],[157,17,173,15],[157,22,173,20,"undefined"],[157,31,173,29],[157,33,173,31],[158,8,174,6,"pattern"],[158,15,174,13],[158,18,174,16,"nestedRouteNames"],[158,34,174,32],[158,35,174,33,"join"],[158,39,174,37],[158,40,174,38],[158,43,174,41],[158,44,174,42],[159,6,175,4],[160,6,177,4],[160,10,177,8,"currentOptions"],[160,24,177,22],[160,25,177,23,"route"],[160,30,177,28],[160,31,177,29,"name"],[160,35,177,33],[160,36,177,34],[160,41,177,39,"undefined"],[160,50,177,48],[160,52,177,50],[161,8,178,6,"path"],[161,12,178,10],[161,16,178,14,"pattern"],[161,23,178,21],[161,24,179,9,"split"],[161,29,179,14],[161,30,179,15],[161,33,179,18],[161,34,179,19],[161,35,180,9,"map"],[161,38,180,12],[161,39,180,14,"p"],[161,40,180,15],[161,44,180,20],[162,10,181,10],[162,14,181,16,"name"],[162,18,181,20],[162,21,181,23,"getParamName"],[162,33,181,35],[162,34,181,36,"p"],[162,35,181,37],[162,36,181,38],[164,10,183,10],[165,10,184,10],[166,10,185,10],[167,10,186,10],[167,14,186,14,"p"],[167,15,186,15],[167,20,186,20],[167,23,186,23],[167,25,186,25],[168,12,187,12],[168,19,187,19,"route"],[168,24,187,24],[168,25,187,25,"name"],[168,29,187,29],[169,10,188,10],[171,10,190,10],[172,10,191,10],[172,14,191,14,"p"],[172,15,191,15],[172,16,191,16,"startsWith"],[172,26,191,26],[172,27,191,27],[172,30,191,30],[172,31,191,31],[172,33,191,33],[173,12,192,12],[173,16,192,18,"value"],[173,22,192,23],[173,25,192,26,"allParams"],[173,34,192,35],[173,35,192,36,"name"],[173,39,192,40],[173,40,192,41],[174,12,194,12],[174,16,194,16,"value"],[174,22,194,21],[174,27,194,26,"undefined"],[174,36,194,35],[174,40,194,39,"p"],[174,41,194,40],[174,42,194,41,"endsWith"],[174,50,194,49],[174,51,194,50],[174,54,194,53],[174,55,194,54],[174,57,194,56],[175,14,195,14],[176,14,196,14],[176,21,196,21],[176,23,196,23],[177,12,197,12],[178,12,199,12],[178,19,199,19,"encodeURIComponent"],[178,37,199,37],[178,38,199,38,"value"],[178,44,199,43],[178,45,199,44],[179,10,200,10],[180,10,202,10],[180,17,202,17,"encodeURIComponent"],[180,35,202,35],[180,36,202,36,"p"],[180,37,202,37],[180,38,202,38],[181,8,203,8],[181,9,203,9],[181,10,203,10],[181,11,204,9,"join"],[181,15,204,13],[181,16,204,14],[181,19,204,17],[181,20,204,18],[182,6,205,4],[182,7,205,5],[182,13,205,11],[183,8,206,6,"path"],[183,12,206,10],[183,16,206,14,"encodeURIComponent"],[183,34,206,32],[183,35,206,33,"route"],[183,40,206,38],[183,41,206,39,"name"],[183,45,206,43],[183,46,206,44],[184,6,207,4],[185,6,209,4],[185,10,209,8],[185,11,209,9,"focusedParams"],[185,24,209,22],[185,26,209,24],[186,8,210,6,"focusedParams"],[186,21,210,19],[186,24,210,22,"focusedRoute"],[186,36,210,34],[186,37,210,35,"params"],[186,43,210,41],[187,6,211,4],[188,6,213,4],[188,10,213,8,"route"],[188,15,213,13],[188,16,213,14,"state"],[188,21,213,19],[188,23,213,21],[189,8,214,6,"path"],[189,12,214,10],[189,16,214,14],[189,19,214,17],[190,6,215,4],[190,7,215,5],[190,13,215,11],[190,17,215,15,"focusedParams"],[190,30,215,28],[190,32,215,30],[191,8,216,6],[191,13,216,11],[191,17,216,15,"param"],[191,22,216,20],[191,26,216,24,"focusedParams"],[191,39,216,37],[191,41,216,39],[192,10,217,8],[192,14,217,12,"focusedParams"],[192,27,217,25],[192,28,217,26,"param"],[192,33,217,31],[192,34,217,32],[192,39,217,37],[192,50,217,48],[192,52,217,50],[193,12,218,10],[194,12,219,10],[194,19,219,17,"focusedParams"],[194,32,219,30],[194,33,219,31,"param"],[194,38,219,36],[194,39,219,37],[195,10,220,8],[196,8,221,6],[197,8,223,6],[197,12,223,12,"query"],[197,17,223,17],[197,20,223,20,"queryString"],[197,31,223,31],[197,32,223,32,"stringify"],[197,41,223,41],[197,42,223,42,"focusedParams"],[197,55,223,55],[197,57,223,57],[198,10,223,59,"sort"],[198,14,223,63],[198,16,223,65],[199,8,223,71],[199,9,223,72],[199,10,223,73],[200,8,225,6],[200,12,225,10,"query"],[200,17,225,15],[200,19,225,17],[201,10,226,8,"path"],[201,14,226,12],[201,18,226,16],[201,22,226,20,"query"],[201,27,226,25],[201,29,226,27],[202,8,227,6],[203,6,228,4],[204,6,230,4,"current"],[204,13,230,11],[204,16,230,14,"route"],[204,21,230,19],[204,22,230,20,"state"],[204,27,230,25],[205,4,231,2],[205,5,231,3],[206,4,93,2],[206,11,93,9,"current"],[206,18,93,16],[207,6,93,16,"_loop"],[207,11,93,16],[208,4,93,16],[210,4,233,2],[211,4,234,2,"path"],[211,8,234,6],[211,11,234,9,"path"],[211,15,234,13],[211,16,234,14,"replace"],[211,23,234,21],[211,24,234,22],[211,30,234,28],[211,32,234,30],[211,35,234,33],[211,36,234,34],[212,4,235,2,"path"],[212,8,235,6],[212,11,235,9,"path"],[212,15,235,13],[212,16,235,14,"length"],[212,22,235,20],[212,25,235,23],[212,26,235,24],[212,29,235,27,"path"],[212,33,235,31],[212,34,235,32,"replace"],[212,41,235,39],[212,42,235,40],[212,47,235,45],[212,49,235,47],[212,51,235,49],[212,52,235,50],[212,55,235,53,"path"],[212,59,235,57],[213,4,237,2],[213,11,237,9,"path"],[213,15,237,13],[214,2,238,0],[215,2,240,0],[215,6,240,6,"getParamName"],[215,18,240,18],[215,21,240,22,"pattern"],[215,28,240,37],[215,32,241,2,"pattern"],[215,39,241,9],[215,40,241,10,"replace"],[215,47,241,17],[215,48,241,18],[215,52,241,22],[215,54,241,24],[215,56,241,26],[215,57,241,27],[215,58,241,28,"replace"],[215,65,241,35],[215,66,241,36],[215,71,241,41],[215,73,241,43],[215,75,241,45],[215,76,241,46],[216,2,243,0],[216,6,243,6,"joinPaths"],[216,15,243,15],[216,18,243,18],[216,27,243,18,"joinPaths"],[216,28,243,18],[217,4,243,18],[217,13,243,18,"_len"],[217,17,243,18],[217,20,243,18,"arguments"],[217,29,243,18],[217,30,243,18,"length"],[217,36,243,18],[217,38,243,22,"paths"],[217,43,243,27],[217,50,243,27,"Array"],[217,55,243,27],[217,56,243,27,"_len"],[217,60,243,27],[217,63,243,27,"_key"],[217,67,243,27],[217,73,243,27,"_key"],[217,77,243,27],[217,80,243,27,"_len"],[217,84,243,27],[217,86,243,27,"_key"],[217,90,243,27],[218,6,243,22,"paths"],[218,11,243,27],[218,12,243,27,"_key"],[218,16,243,27],[218,20,243,27,"arguments"],[218,29,243,27],[218,30,243,27,"_key"],[218,34,243,27],[219,4,243,27],[220,4,243,27],[220,11,244,3],[220,13,244,5],[220,14,245,5,"concat"],[220,20,245,11],[220,21,245,12],[220,24,245,15,"paths"],[220,29,245,20],[220,30,245,21,"map"],[220,33,245,24],[220,34,245,26,"p"],[220,35,245,27],[220,39,245,32,"p"],[220,40,245,33],[220,41,245,34,"split"],[220,46,245,39],[220,47,245,40],[220,50,245,43],[220,51,245,44],[220,52,245,45],[220,53,245,46],[220,54,246,5,"filter"],[220,60,246,11],[220,61,246,12,"Boolean"],[220,68,246,19],[220,69,246,20],[220,70,247,5,"join"],[220,74,247,9],[220,75,247,10],[220,78,247,13],[220,79,247,14],[221,2,247,14],[222,2,249,0],[222,6,249,6,"createConfigItem"],[222,22,249,22],[222,25,249,25,"createConfigItem"],[222,26,250,2,"config"],[222,32,250,37],[222,34,251,2,"parentPattern"],[222,47,251,24],[222,52,252,17],[223,4,253,2],[223,8,253,6],[223,15,253,13,"config"],[223,21,253,19],[223,26,253,24],[223,34,253,32],[223,36,253,34],[224,6,254,4],[225,6,255,4],[225,10,255,10,"pattern"],[225,18,255,17],[225,21,255,20,"parentPattern"],[225,34,255,33],[225,37,255,36,"joinPaths"],[225,46,255,45],[225,47,255,46,"parentPattern"],[225,60,255,59],[225,62,255,61,"config"],[225,68,255,67],[225,69,255,68],[225,72,255,71,"config"],[225,78,255,77],[226,6,257,4],[226,13,257,11],[227,8,257,13,"pattern"],[227,15,257,20],[227,17,257,13,"pattern"],[228,6,257,21],[228,7,257,22],[229,4,258,2],[231,4,260,2],[232,4,261,2],[233,4,262,2],[233,8,262,6,"pattern"],[233,15,262,33],[234,4,264,2],[234,8,264,6,"config"],[234,14,264,12],[234,15,264,13,"exact"],[234,20,264,18],[234,24,264,22,"config"],[234,30,264,28],[234,31,264,29,"path"],[234,35,264,33],[234,40,264,38,"undefined"],[234,49,264,47],[234,51,264,49],[235,6,265,4],[235,12,265,10],[235,16,265,14,"Error"],[235,21,265,19],[235,22,266,6],[235,172,267,4],[235,173,267,5],[236,4,268,2],[237,4,270,2,"pattern"],[237,11,270,9],[237,14,271,4,"config"],[237,20,271,10],[237,21,271,11,"exact"],[237,26,271,16],[237,31,271,21],[237,35,271,25],[237,38,272,8,"joinPaths"],[237,47,272,17],[237,48,272,18,"parentPattern"],[237,61,272,31],[237,65,272,35],[237,67,272,37],[237,69,272,39,"config"],[237,75,272,45],[237,76,272,46,"path"],[237,80,272,50],[237,84,272,54],[237,86,272,56],[237,87,272,57],[237,90,273,8,"config"],[237,96,273,14],[237,97,273,15,"path"],[237,101,273,19],[237,105,273,23],[237,107,273,25],[238,4,275,2],[238,8,275,8,"screens"],[238,15,275,15],[238,18,275,18,"config"],[238,24,275,24],[238,25,275,25,"screens"],[238,32,275,32],[238,35,276,6,"createNormalizedConfigs"],[238,58,276,29],[238,59,276,30,"config"],[238,65,276,36],[238,66,276,37,"screens"],[238,73,276,44],[238,75,276,46,"pattern"],[238,82,276,53],[238,83,276,54],[238,86,277,6,"undefined"],[238,95,277,15],[239,4,279,2],[239,11,279,9],[240,6,280,4],[241,6,281,4,"pattern"],[241,13,281,11],[241,15,281,13,"pattern"],[241,22,281,20],[241,24,281,22,"split"],[241,29,281,27],[241,30,281,28],[241,33,281,31],[241,34,281,32],[241,35,281,33,"filter"],[241,41,281,39],[241,42,281,40,"Boolean"],[241,49,281,47],[241,50,281,48],[241,51,281,49,"join"],[241,55,281,53],[241,56,281,54],[241,59,281,57],[241,60,281,58],[242,6,282,4,"stringify"],[242,15,282,13],[242,17,282,15,"config"],[242,23,282,21],[242,24,282,22,"stringify"],[242,33,282,31],[243,6,283,4,"screens"],[244,4,284,2],[244,5,284,3],[245,2,285,0],[245,3,285,1],[246,2,287,0],[246,6,287,6,"createNormalizedConfigs"],[246,29,287,29],[246,32,287,32,"createNormalizedConfigs"],[246,33,288,2,"options"],[246,40,288,32],[246,42,289,2,"pattern"],[246,49,289,18],[246,54,291,2],[246,58,291,2,"fromEntries"],[246,69,291,13],[246,70,291,13,"default"],[246,77,291,13],[246,79,292,4,"Object"],[246,85,292,10],[246,86,292,11,"entries"],[246,93,292,18],[246,94,292,19,"options"],[246,101,292,26],[246,102,292,27],[246,103,292,28,"map"],[246,106,292,31],[246,107,292,32,"_ref3"],[246,112,292,32],[246,116,292,47],[247,4,292,47],[247,8,292,47,"_ref4"],[247,13,292,47],[247,20,292,47,"_slicedToArray"],[247,34,292,47],[247,35,292,47,"default"],[247,42,292,47],[247,44,292,47,"_ref3"],[247,49,292,47],[248,6,292,34,"name"],[248,10,292,38],[248,13,292,38,"_ref4"],[248,18,292,38],[249,6,292,40,"c"],[249,7,292,41],[249,10,292,41,"_ref4"],[249,15,292,41],[250,4,293,6],[250,8,293,12,"result"],[250,14,293,18],[250,17,293,21,"createConfigItem"],[250,33,293,37],[250,34,293,38,"c"],[250,35,293,39],[250,37,293,41,"pattern"],[250,44,293,48],[250,45,293,49],[251,4,295,6],[251,11,295,13],[251,12,295,14,"name"],[251,16,295,18],[251,18,295,20,"result"],[251,24,295,26],[251,25,295,27],[252,2,296,4],[252,3,296,5],[252,4,297,2],[252,5,297,3],[253,0,297,4],[253,3]],"functionMap":{"names":["<global>","getActiveRoute","getPathFromState","Object.entries.map$argument_0","pattern.split.filter$argument_0","pattern.split.filter.forEach$argument_0","pattern.split.map$argument_0","getParamName","joinPaths","paths.map$argument_0","createConfigItem","createNormalizedConfigs"],"mappings":"AAA;uBC0B;CDW;eE+B;2CCkD;WDG;oBEc,wBF;qBGE;aHQ;aIkC;SJuB;CFmC;qBOE;8CPC;kBQE;yBCE,mBD;cRE;yBUE;CVoC;gCWE;gCRK;KQI;GXC"},"hasCjsExports":false},"type":"js/module"}]}