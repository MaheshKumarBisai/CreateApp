{"dependencies":[{"name":"@react-navigation/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":7,"column":32,"index":121}}],"key":"Wm75LgE4xYscVWo0KoLFlflJQCo=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":122},"end":{"line":8,"column":31,"index":153}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return useScrollToTop;\n    }\n  });\n  var _reactNavigationCore = require(_dependencyMap[0], \"@react-navigation/core\");\n  var _react = require(_dependencyMap[1], \"react\");\n  var React = _interopNamespace(_react);\n  function getScrollableNode(ref) {\n    if (ref.current == null) {\n      return null;\n    }\n    if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {\n      // This is already a scrollable node.\n      return ref.current;\n    } else if ('getScrollResponder' in ref.current) {\n      // If the view is a wrapper like FlatList, SectionList etc.\n      // We need to use `getScrollResponder` to get access to the scroll responder\n      return ref.current.getScrollResponder();\n    } else if ('getNode' in ref.current) {\n      // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n      // we need to use `getNode` to get the ref to the actual scrollview.\n      // Note that `getNode` is deprecated in newer versions of react-native\n      // this is why we check if we already have a scrollable node above.\n      return ref.current.getNode();\n    } else {\n      return ref.current;\n    }\n  }\n  function useScrollToTop(ref) {\n    var navigation = React.useContext(_reactNavigationCore.NavigationContext);\n    var route = (0, _reactNavigationCore.useRoute)();\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n    }\n    React.useEffect(() => {\n      var tabNavigations = [];\n      var currentNavigation = navigation;\n      // If the screen is nested inside multiple tab navigators, we should scroll to top for any of them\n      // So we need to find all the parent tab navigators and add the listeners there\n      while (currentNavigation) {\n        if (currentNavigation.getState().type === 'tab') {\n          tabNavigations.push(currentNavigation);\n        }\n        currentNavigation = currentNavigation.getParent();\n      }\n      if (tabNavigations.length === 0) {\n        return;\n      }\n      var unsubscribers = tabNavigations.map(tab => {\n        return tab.addListener(\n        // We don't wanna import tab types here to avoid extra deps\n        // in addition, there are multiple tab implementations\n        // @ts-expect-error\n        'tabPress', e => {\n          // We should scroll to top only when the screen is focused\n          var isFocused = navigation.isFocused();\n\n          // In a nested stack navigator, tab press resets the stack to first screen\n          // So we should scroll to top only when we are on first screen\n          var isFirst = tabNavigations.includes(navigation) || navigation.getState().routes[0].key === route.key;\n\n          // Run the operation in the next frame so we're sure all listeners have been run\n          // This is necessary to know if preventDefault() has been called\n          requestAnimationFrame(() => {\n            var scrollable = getScrollableNode(ref);\n            if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n              if ('scrollToTop' in scrollable) {\n                scrollable.scrollToTop();\n              } else if ('scrollTo' in scrollable) {\n                scrollable.scrollTo({\n                  y: 0,\n                  animated: true\n                });\n              } else if ('scrollToOffset' in scrollable) {\n                scrollable.scrollToOffset({\n                  offset: 0,\n                  animated: true\n                });\n              } else if ('scrollResponderScrollTo' in scrollable) {\n                scrollable.scrollResponderScrollTo({\n                  y: 0,\n                  animated: true\n                });\n              }\n            }\n          });\n        });\n      });\n      return () => {\n        unsubscribers.forEach(unsubscribe => unsubscribe());\n      };\n    }, [navigation, ref, route.key]);\n  }\n});","lineCount":117,"map":[[22,2,52,15,"Object"],[22,8,52,15],[22,9,52,15,"defineProperty"],[22,23,52,15],[22,24,52,15,"exports"],[22,31,52,15],[23,4,52,15,"enumerable"],[23,14,52,15],[24,4,52,15,"get"],[24,7,52,15],[24,18,52,15,"get"],[24,19,52,15],[25,6,52,15],[25,13,52,15,"useScrollToTop"],[25,27,52,15],[26,4,52,15],[27,2,52,15],[28,2,1,0],[28,6,1,0,"_reactNavigationCore"],[28,26,1,0],[28,29,1,0,"require"],[28,36,1,0],[28,37,1,0,"_dependencyMap"],[28,51,1,0],[29,2,8,0],[29,6,8,0,"_react"],[29,12,8,0],[29,15,8,0,"require"],[29,22,8,0],[29,23,8,0,"_dependencyMap"],[29,37,8,0],[30,2,8,0],[30,6,8,0,"React"],[30,11,8,0],[30,14,8,0,"_interopNamespace"],[30,31,8,0],[30,32,8,0,"_react"],[30,38,8,0],[31,2,24,0],[31,11,24,9,"getScrollableNode"],[31,28,24,26,"getScrollableNode"],[31,29,24,27,"ref"],[31,32,24,66],[31,34,24,68],[32,4,25,2],[32,8,25,6,"ref"],[32,11,25,9],[32,12,25,10,"current"],[32,19,25,17],[32,23,25,21],[32,27,25,25],[32,29,25,27],[33,6,26,4],[33,13,26,11],[33,17,26,15],[34,4,27,2],[35,4,29,2],[35,8,30,4],[35,21,30,17],[35,25,30,21,"ref"],[35,28,30,24],[35,29,30,25,"current"],[35,36,30,32],[35,40,31,4],[35,50,31,14],[35,54,31,18,"ref"],[35,57,31,21],[35,58,31,22,"current"],[35,65,31,29],[35,69,32,4],[35,85,32,20],[35,89,32,24,"ref"],[35,92,32,27],[35,93,32,28,"current"],[35,100,32,35],[35,104,33,4],[35,129,33,29],[35,133,33,33,"ref"],[35,136,33,36],[35,137,33,37,"current"],[35,144,33,44],[35,146,34,4],[36,6,35,4],[37,6,36,4],[37,13,36,11,"ref"],[37,16,36,14],[37,17,36,15,"current"],[37,24,36,22],[38,4,37,2],[38,5,37,3],[38,11,37,9],[38,15,37,13],[38,35,37,33],[38,39,37,37,"ref"],[38,42,37,40],[38,43,37,41,"current"],[38,50,37,48],[38,52,37,50],[39,6,38,4],[40,6,39,4],[41,6,40,4],[41,13,40,11,"ref"],[41,16,40,14],[41,17,40,15,"current"],[41,24,40,22],[41,25,40,23,"getScrollResponder"],[41,43,40,41],[41,44,40,42],[41,45,40,43],[42,4,41,2],[42,5,41,3],[42,11,41,9],[42,15,41,13],[42,24,41,22],[42,28,41,26,"ref"],[42,31,41,29],[42,32,41,30,"current"],[42,39,41,37],[42,41,41,39],[43,6,42,4],[44,6,43,4],[45,6,44,4],[46,6,45,4],[47,6,46,4],[47,13,46,11,"ref"],[47,16,46,14],[47,17,46,15,"current"],[47,24,46,22],[47,25,46,23,"getNode"],[47,32,46,30],[47,33,46,31],[47,34,46,32],[48,4,47,2],[48,5,47,3],[48,11,47,9],[49,6,48,4],[49,13,48,11,"ref"],[49,16,48,14],[49,17,48,15,"current"],[49,24,48,22],[50,4,49,2],[51,2,50,0],[52,2,52,15],[52,11,52,24,"useScrollToTop"],[52,25,52,38,"useScrollToTop"],[52,26,53,2,"ref"],[52,29,53,41],[52,31,54,2],[53,4,55,2],[53,8,55,8,"navigation"],[53,18,55,18],[53,21,55,21,"React"],[53,26,55,26],[53,27,55,27,"useContext"],[53,37,55,37],[53,38,55,38,"NavigationContext"],[53,58,55,55],[53,59,55,55,"NavigationContext"],[53,76,55,55],[53,77,55,56],[54,4,56,2],[54,8,56,8,"route"],[54,13,56,13],[54,16,56,16],[54,20,56,16,"useRoute"],[54,40,56,24],[54,41,56,24,"useRoute"],[54,49,56,24],[54,51,56,25],[54,52,56,26],[55,4,58,2],[55,8,58,6,"navigation"],[55,18,58,16],[55,23,58,21,"undefined"],[55,32,58,30],[55,34,58,32],[56,6,59,4],[56,12,59,10],[56,16,59,14,"Error"],[56,21,59,19],[56,22,60,6],[56,104,61,4],[56,105,61,5],[57,4,62,2],[58,4,64,2,"React"],[58,9,64,7],[58,10,64,8,"useEffect"],[58,19,64,17],[58,20,64,18],[58,26,64,24],[59,6,65,4],[59,10,65,10,"tabNavigations"],[59,24,65,57],[59,27,65,60],[59,29,65,62],[60,6,66,4],[60,10,66,8,"currentNavigation"],[60,27,66,25],[60,30,66,28,"navigation"],[60,40,66,38],[61,6,67,4],[62,6,68,4],[63,6,69,4],[63,13,69,11,"currentNavigation"],[63,30,69,28],[63,32,69,30],[64,8,70,6],[64,12,70,10,"currentNavigation"],[64,29,70,27],[64,30,70,28,"getState"],[64,38,70,36],[64,39,70,37],[64,40,70,38],[64,41,70,39,"type"],[64,45,70,43],[64,50,70,48],[64,55,70,53],[64,57,70,55],[65,10,71,8,"tabNavigations"],[65,24,71,22],[65,25,71,23,"push"],[65,29,71,27],[65,30,71,28,"currentNavigation"],[65,47,71,45],[65,48,71,46],[66,8,72,6],[67,8,74,6,"currentNavigation"],[67,25,74,23],[67,28,74,26,"currentNavigation"],[67,45,74,43],[67,46,74,44,"getParent"],[67,55,74,53],[67,56,74,54],[67,57,74,55],[68,6,75,4],[69,6,77,4],[69,10,77,8,"tabNavigations"],[69,24,77,22],[69,25,77,23,"length"],[69,31,77,29],[69,36,77,34],[69,37,77,35],[69,39,77,37],[70,8,78,6],[71,6,79,4],[72,6,81,4],[72,10,81,10,"unsubscribers"],[72,23,81,23],[72,26,81,26,"tabNavigations"],[72,40,81,40],[72,41,81,41,"map"],[72,44,81,44],[72,45,81,46,"tab"],[72,48,81,49],[72,52,81,54],[73,8,82,6],[73,15,82,13,"tab"],[73,18,82,16],[73,19,82,17,"addListener"],[73,30,82,28],[74,8,83,8],[75,8,84,8],[76,8,85,8],[77,8,86,8],[77,18,86,18],[77,20,87,9,"e"],[77,21,87,38],[77,25,87,43],[78,10,88,10],[79,10,89,10],[79,14,89,16,"isFocused"],[79,23,89,25],[79,26,89,28,"navigation"],[79,36,89,38],[79,37,89,39,"isFocused"],[79,46,89,48],[79,47,89,49],[79,48,89,50],[81,10,91,10],[82,10,92,10],[83,10,93,10],[83,14,93,16,"isFirst"],[83,21,93,23],[83,24,94,12,"tabNavigations"],[83,38,94,26],[83,39,94,27,"includes"],[83,47,94,35],[83,48,94,36,"navigation"],[83,58,94,46],[83,59,94,47],[83,63,95,12,"navigation"],[83,73,95,22],[83,74,95,23,"getState"],[83,82,95,31],[83,83,95,32],[83,84,95,33],[83,85,95,34,"routes"],[83,91,95,40],[83,92,95,41],[83,93,95,42],[83,94,95,43],[83,95,95,44,"key"],[83,98,95,47],[83,103,95,52,"route"],[83,108,95,57],[83,109,95,58,"key"],[83,112,95,61],[85,10,97,10],[86,10,98,10],[87,10,99,10,"requestAnimationFrame"],[87,31,99,31],[87,32,99,32],[87,38,99,38],[88,12,100,12],[88,16,100,18,"scrollable"],[88,26,100,28],[88,29,100,31,"getScrollableNode"],[88,46,100,48],[88,47,100,49,"ref"],[88,50,100,52],[88,51,100,74],[89,12,102,12],[89,16,102,16,"isFocused"],[89,25,102,25],[89,29,102,29,"isFirst"],[89,36,102,36],[89,40,102,40,"scrollable"],[89,50,102,50],[89,54,102,54],[89,55,102,55,"e"],[89,56,102,56],[89,57,102,57,"defaultPrevented"],[89,73,102,73],[89,75,102,75],[90,14,103,14],[90,18,103,18],[90,31,103,31],[90,35,103,35,"scrollable"],[90,45,103,45],[90,47,103,47],[91,16,104,16,"scrollable"],[91,26,104,26],[91,27,104,27,"scrollToTop"],[91,38,104,38],[91,39,104,39],[91,40,104,40],[92,14,105,14],[92,15,105,15],[92,21,105,21],[92,25,105,25],[92,35,105,35],[92,39,105,39,"scrollable"],[92,49,105,49],[92,51,105,51],[93,16,106,16,"scrollable"],[93,26,106,26],[93,27,106,27,"scrollTo"],[93,35,106,35],[93,36,106,36],[94,18,106,38,"y"],[94,19,106,39],[94,21,106,41],[94,22,106,42],[95,18,106,44,"animated"],[95,26,106,52],[95,28,106,54],[96,16,106,59],[96,17,106,60],[96,18,106,61],[97,14,107,14],[97,15,107,15],[97,21,107,21],[97,25,107,25],[97,41,107,41],[97,45,107,45,"scrollable"],[97,55,107,55],[97,57,107,57],[98,16,108,16,"scrollable"],[98,26,108,26],[98,27,108,27,"scrollToOffset"],[98,41,108,41],[98,42,108,42],[99,18,108,44,"offset"],[99,24,108,50],[99,26,108,52],[99,27,108,53],[100,18,108,55,"animated"],[100,26,108,63],[100,28,108,65],[101,16,108,70],[101,17,108,71],[101,18,108,72],[102,14,109,14],[102,15,109,15],[102,21,109,21],[102,25,109,25],[102,50,109,50],[102,54,109,54,"scrollable"],[102,64,109,64],[102,66,109,66],[103,16,110,16,"scrollable"],[103,26,110,26],[103,27,110,27,"scrollResponderScrollTo"],[103,50,110,50],[103,51,110,51],[104,18,110,53,"y"],[104,19,110,54],[104,21,110,56],[104,22,110,57],[105,18,110,59,"animated"],[105,26,110,67],[105,28,110,69],[106,16,110,74],[106,17,110,75],[106,18,110,76],[107,14,111,14],[108,12,112,12],[109,10,113,10],[109,11,113,11],[109,12,113,12],[110,8,114,8],[110,9,115,6],[110,10,115,7],[111,6,116,4],[111,7,116,5],[111,8,116,6],[112,6,118,4],[112,13,118,11],[112,19,118,17],[113,8,119,6,"unsubscribers"],[113,21,119,19],[113,22,119,20,"forEach"],[113,29,119,27],[113,30,119,29,"unsubscribe"],[113,41,119,40],[113,45,119,45,"unsubscribe"],[113,56,119,56],[113,57,119,57],[113,58,119,58],[113,59,119,59],[114,6,120,4],[114,7,120,5],[115,4,121,2],[115,5,121,3],[115,7,121,5],[115,8,121,6,"navigation"],[115,18,121,16],[115,20,121,18,"ref"],[115,23,121,21],[115,25,121,23,"route"],[115,30,121,28],[115,31,121,29,"key"],[115,34,121,32],[115,35,121,33],[115,36,121,34],[116,2,122,0],[117,0,122,1],[117,3]],"functionMap":{"names":["<global>","getScrollableNode","useScrollToTop","React.useEffect$argument_0","tabNavigations.map$argument_0","tab.addListener$argument_1","requestAnimationFrame$argument_0","<anonymous>","unsubscribers.forEach$argument_0"],"mappings":"AAA;ACuB;CD0B;eEE;kBCY;6CCiB;QCM;gCCY;WDc;SDC;KDE;WIE;4BCC,8BD;KJC;GDC;CFC"},"hasCjsExports":false},"type":"js/module"}]}