{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  // Copyright Joyent, Inc. and other Node contributors.\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a\n  // copy of this software and associated documentation files (the\n  // \"Software\"), to deal in the Software without restriction, including\n  // without limitation the rights to use, copy, modify, merge, publish,\n  // distribute, sublicense, and/or sell copies of the Software, and to permit\n  // persons to whom the Software is furnished to do so, subject to the\n  // following conditions:\n  //\n  // The above copyright notice and this permission notice shall be included\n  // in all copies or substantial portions of the Software.\n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.resolve = void 0;\n  // https://github.com/browserify/path-browserify/blob/master/index.js\n  function assertPath(path) {\n    if (typeof path !== 'string') {\n      throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n    }\n  }\n  // Resolves . and .. elements in a path with directory names\n  function normalizeStringPosix(path, allowAboveRoot) {\n    var res = '';\n    var lastSegmentLength = 0;\n    var lastSlash = -1;\n    var dots = 0;\n    var code;\n    for (var i = 0; i <= path.length; ++i) {\n      if (i < path.length) {\n        code = path.charCodeAt(i);\n      } else if (code === 47 /*/*/) {\n        break;\n      } else {\n        code = 47 /*/*/;\n      }\n      if (code === 47 /*/*/) {\n        if (lastSlash === i - 1 || dots === 1) {\n          // NOOP\n        } else if (lastSlash !== i - 1 && dots === 2) {\n          if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n            if (res.length > 2) {\n              var lastSlashIndex = res.lastIndexOf('/');\n              if (lastSlashIndex !== res.length - 1) {\n                if (lastSlashIndex === -1) {\n                  res = '';\n                  lastSegmentLength = 0;\n                } else {\n                  res = res.slice(0, lastSlashIndex);\n                  lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n                }\n                lastSlash = i;\n                dots = 0;\n                continue;\n              }\n            } else if (res.length === 2 || res.length === 1) {\n              res = '';\n              lastSegmentLength = 0;\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          }\n          if (allowAboveRoot) {\n            if (res.length > 0) res += '/..';else res = '..';\n            lastSegmentLength = 2;\n          }\n        } else {\n          if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);else res = path.slice(lastSlash + 1, i);\n          lastSegmentLength = i - lastSlash - 1;\n        }\n        lastSlash = i;\n        dots = 0;\n      } else if (code === 46 /*.*/ && dots !== -1) {\n        ++dots;\n      } else {\n        dots = -1;\n      }\n    }\n    return res;\n  }\n  // path.resolve([from ...], to)\n  function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path = void 0;\n      if (i >= 0) {\n        path = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      } else {\n        path = '/';\n      }\n      assertPath(path);\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0) {\n        return '/' + resolvedPath;\n      } else {\n        return '/';\n      }\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  }\n  exports.resolve = resolve;\n});","lineCount":130,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,2,3,0],[6,2,4,0],[7,2,5,0],[8,2,6,0],[9,2,7,0],[10,2,8,0],[11,2,9,0],[12,2,10,0],[13,2,11,0],[14,2,12,0],[15,2,13,0],[16,2,14,0],[17,2,15,0],[18,2,16,0],[19,2,17,0],[20,2,18,0],[21,2,19,0],[22,2,20,0],[23,2,21,0],[24,2,22,0,"Object"],[24,8,22,6],[24,9,22,7,"defineProperty"],[24,23,22,21],[24,24,22,22,"exports"],[24,31,22,29],[24,33,22,31],[24,45,22,43],[24,47,22,45],[25,4,22,47,"value"],[25,9,22,52],[25,11,22,54],[26,2,22,59],[26,3,22,60],[26,4,22,61],[27,2,23,0,"exports"],[27,9,23,7],[27,10,23,8,"resolve"],[27,17,23,15],[27,20,23,18],[27,25,23,23],[27,26,23,24],[28,2,24,0],[29,2,25,0],[29,11,25,9,"assertPath"],[29,21,25,19,"assertPath"],[29,22,25,20,"path"],[29,26,25,24],[29,28,25,26],[30,4,26,4],[30,8,26,8],[30,15,26,15,"path"],[30,19,26,19],[30,24,26,24],[30,32,26,32],[30,34,26,34],[31,6,27,8],[31,12,27,14],[31,16,27,18,"TypeError"],[31,25,27,27],[31,26,27,28],[31,60,27,62],[31,63,27,65,"JSON"],[31,67,27,69],[31,68,27,70,"stringify"],[31,77,27,79],[31,78,27,80,"path"],[31,82,27,84],[31,83,27,85],[31,84,27,86],[32,4,28,4],[33,2,29,0],[34,2,30,0],[35,2,31,0],[35,11,31,9,"normalizeStringPosix"],[35,31,31,29,"normalizeStringPosix"],[35,32,31,30,"path"],[35,36,31,34],[35,38,31,36,"allowAboveRoot"],[35,52,31,50],[35,54,31,52],[36,4,32,4],[36,8,32,8,"res"],[36,11,32,11],[36,14,32,14],[36,16,32,16],[37,4,33,4],[37,8,33,8,"lastSegmentLength"],[37,25,33,25],[37,28,33,28],[37,29,33,29],[38,4,34,4],[38,8,34,8,"lastSlash"],[38,17,34,17],[38,20,34,20],[38,21,34,21],[38,22,34,22],[39,4,35,4],[39,8,35,8,"dots"],[39,12,35,12],[39,15,35,15],[39,16,35,16],[40,4,36,4],[40,8,36,8,"code"],[40,12,36,12],[41,4,37,4],[41,9,37,9],[41,13,37,13,"i"],[41,14,37,14],[41,17,37,17],[41,18,37,18],[41,20,37,20,"i"],[41,21,37,21],[41,25,37,25,"path"],[41,29,37,29],[41,30,37,30,"length"],[41,36,37,36],[41,38,37,38],[41,40,37,40,"i"],[41,41,37,41],[41,43,37,43],[42,6,38,8],[42,10,38,12,"i"],[42,11,38,13],[42,14,38,16,"path"],[42,18,38,20],[42,19,38,21,"length"],[42,25,38,27],[42,27,38,29],[43,8,39,12,"code"],[43,12,39,16],[43,15,39,19,"path"],[43,19,39,23],[43,20,39,24,"charCodeAt"],[43,30,39,34],[43,31,39,35,"i"],[43,32,39,36],[43,33,39,37],[44,6,40,8],[44,7,40,9],[44,13,41,13],[44,17,41,17,"code"],[44,21,41,21],[44,26,41,26],[44,28,41,28],[44,29,41,29],[44,36,41,36],[45,8,42,12],[46,6,43,8],[46,7,43,9],[46,13,44,13],[47,8,45,12,"code"],[47,12,45,16],[47,15,45,19],[47,17,45,21],[47,18,45,22],[48,6,46,8],[49,6,47,8],[49,10,47,12,"code"],[49,14,47,16],[49,19,47,21],[49,21,47,23],[49,22,47,24],[49,29,47,31],[50,8,48,12],[50,12,48,16,"lastSlash"],[50,21,48,25],[50,26,48,30,"i"],[50,27,48,31],[50,30,48,34],[50,31,48,35],[50,35,48,39,"dots"],[50,39,48,43],[50,44,48,48],[50,45,48,49],[50,47,48,51],[51,10,49,16],[52,8,49,16],[52,9,50,13],[52,15,51,17],[52,19,51,21,"lastSlash"],[52,28,51,30],[52,33,51,35,"i"],[52,34,51,36],[52,37,51,39],[52,38,51,40],[52,42,51,44,"dots"],[52,46,51,48],[52,51,51,53],[52,52,51,54],[52,54,51,56],[53,10,52,16],[53,14,52,20,"res"],[53,17,52,23],[53,18,52,24,"length"],[53,24,52,30],[53,27,52,33],[53,28,52,34],[53,32,53,20,"lastSegmentLength"],[53,49,53,37],[53,54,53,42],[53,55,53,43],[53,59,54,20,"res"],[53,62,54,23],[53,63,54,24,"charCodeAt"],[53,73,54,34],[53,74,54,35,"res"],[53,77,54,38],[53,78,54,39,"length"],[53,84,54,45],[53,87,54,48],[53,88,54,49],[53,89,54,50],[53,94,54,55],[53,96,54,57],[53,97,54,58],[53,106,55,20,"res"],[53,109,55,23],[53,110,55,24,"charCodeAt"],[53,120,55,34],[53,121,55,35,"res"],[53,124,55,38],[53,125,55,39,"length"],[53,131,55,45],[53,134,55,48],[53,135,55,49],[53,136,55,50],[53,141,55,55],[53,143,55,57],[53,144,55,58],[53,151,55,65],[54,12,56,20],[54,16,56,24,"res"],[54,19,56,27],[54,20,56,28,"length"],[54,26,56,34],[54,29,56,37],[54,30,56,38],[54,32,56,40],[55,14,57,24],[55,18,57,30,"lastSlashIndex"],[55,32,57,44],[55,35,57,47,"res"],[55,38,57,50],[55,39,57,51,"lastIndexOf"],[55,50,57,62],[55,51,57,63],[55,54,57,66],[55,55,57,67],[56,14,58,24],[56,18,58,28,"lastSlashIndex"],[56,32,58,42],[56,37,58,47,"res"],[56,40,58,50],[56,41,58,51,"length"],[56,47,58,57],[56,50,58,60],[56,51,58,61],[56,53,58,63],[57,16,59,28],[57,20,59,32,"lastSlashIndex"],[57,34,59,46],[57,39,59,51],[57,40,59,52],[57,41,59,53],[57,43,59,55],[58,18,60,32,"res"],[58,21,60,35],[58,24,60,38],[58,26,60,40],[59,18,61,32,"lastSegmentLength"],[59,35,61,49],[59,38,61,52],[59,39,61,53],[60,16,62,28],[60,17,62,29],[60,23,63,33],[61,18,64,32,"res"],[61,21,64,35],[61,24,64,38,"res"],[61,27,64,41],[61,28,64,42,"slice"],[61,33,64,47],[61,34,64,48],[61,35,64,49],[61,37,64,51,"lastSlashIndex"],[61,51,64,65],[61,52,64,66],[62,18,65,32,"lastSegmentLength"],[62,35,65,49],[62,38,65,52,"res"],[62,41,65,55],[62,42,65,56,"length"],[62,48,65,62],[62,51,65,65],[62,52,65,66],[62,55,65,69,"res"],[62,58,65,72],[62,59,65,73,"lastIndexOf"],[62,70,65,84],[62,71,65,85],[62,74,65,88],[62,75,65,89],[63,16,66,28],[64,16,67,28,"lastSlash"],[64,25,67,37],[64,28,67,40,"i"],[64,29,67,41],[65,16,68,28,"dots"],[65,20,68,32],[65,23,68,35],[65,24,68,36],[66,16,69,28],[67,14,70,24],[68,12,71,20],[68,13,71,21],[68,19,72,25],[68,23,72,29,"res"],[68,26,72,32],[68,27,72,33,"length"],[68,33,72,39],[68,38,72,44],[68,39,72,45],[68,43,72,49,"res"],[68,46,72,52],[68,47,72,53,"length"],[68,53,72,59],[68,58,72,64],[68,59,72,65],[68,61,72,67],[69,14,73,24,"res"],[69,17,73,27],[69,20,73,30],[69,22,73,32],[70,14,74,24,"lastSegmentLength"],[70,31,74,41],[70,34,74,44],[70,35,74,45],[71,14,75,24,"lastSlash"],[71,23,75,33],[71,26,75,36,"i"],[71,27,75,37],[72,14,76,24,"dots"],[72,18,76,28],[72,21,76,31],[72,22,76,32],[73,14,77,24],[74,12,78,20],[75,10,79,16],[76,10,80,16],[76,14,80,20,"allowAboveRoot"],[76,28,80,34],[76,30,80,36],[77,12,81,20],[77,16,81,24,"res"],[77,19,81,27],[77,20,81,28,"length"],[77,26,81,34],[77,29,81,37],[77,30,81,38],[77,32,82,24,"res"],[77,35,82,27],[77,39,82,31],[77,44,82,36],[77,45,82,37],[77,50,84,24,"res"],[77,53,84,27],[77,56,84,30],[77,60,84,34],[78,12,85,20,"lastSegmentLength"],[78,29,85,37],[78,32,85,40],[78,33,85,41],[79,10,86,16],[80,8,87,12],[80,9,87,13],[80,15,88,17],[81,10,89,16],[81,14,89,20,"res"],[81,17,89,23],[81,18,89,24,"length"],[81,24,89,30],[81,27,89,33],[81,28,89,34],[81,30,90,20,"res"],[81,33,90,23],[81,37,90,27],[81,40,90,30],[81,43,90,33,"path"],[81,47,90,37],[81,48,90,38,"slice"],[81,53,90,43],[81,54,90,44,"lastSlash"],[81,63,90,53],[81,66,90,56],[81,67,90,57],[81,69,90,59,"i"],[81,70,90,60],[81,71,90,61],[81,72,90,62],[81,77,92,20,"res"],[81,80,92,23],[81,83,92,26,"path"],[81,87,92,30],[81,88,92,31,"slice"],[81,93,92,36],[81,94,92,37,"lastSlash"],[81,103,92,46],[81,106,92,49],[81,107,92,50],[81,109,92,52,"i"],[81,110,92,53],[81,111,92,54],[82,10,93,16,"lastSegmentLength"],[82,27,93,33],[82,30,93,36,"i"],[82,31,93,37],[82,34,93,40,"lastSlash"],[82,43,93,49],[82,46,93,52],[82,47,93,53],[83,8,94,12],[84,8,95,12,"lastSlash"],[84,17,95,21],[84,20,95,24,"i"],[84,21,95,25],[85,8,96,12,"dots"],[85,12,96,16],[85,15,96,19],[85,16,96,20],[86,6,97,8],[86,7,97,9],[86,13,98,13],[86,17,98,17,"code"],[86,21,98,21],[86,26,98,26],[86,28,98,28],[86,29,98,29],[86,38,98,38,"dots"],[86,42,98,42],[86,47,98,47],[86,48,98,48],[86,49,98,49],[86,51,98,51],[87,8,99,12],[87,10,99,14,"dots"],[87,14,99,18],[88,6,100,8],[88,7,100,9],[88,13,101,13],[89,8,102,12,"dots"],[89,12,102,16],[89,15,102,19],[89,16,102,20],[89,17,102,21],[90,6,103,8],[91,4,104,4],[92,4,105,4],[92,11,105,11,"res"],[92,14,105,14],[93,2,106,0],[94,2,107,0],[95,2,108,0],[95,11,108,9,"resolve"],[95,18,108,16,"resolve"],[95,19,108,16],[95,21,108,30],[96,4,109,4],[96,8,109,8,"resolvedPath"],[96,20,109,20],[96,23,109,23],[96,25,109,25],[97,4,110,4],[97,8,110,8,"resolvedAbsolute"],[97,24,110,24],[97,27,110,27],[97,32,110,32],[98,4,111,4],[98,9,111,9],[98,13,111,13,"i"],[98,14,111,14],[98,17,111,17,"arguments"],[98,26,111,17],[98,27,111,26,"length"],[98,33,111,32],[98,36,111,35],[98,37,111,36],[98,39,111,38,"i"],[98,40,111,39],[98,44,111,43],[98,45,111,44],[98,46,111,45],[98,50,111,49],[98,51,111,50,"resolvedAbsolute"],[98,67,111,66],[98,69,111,68,"i"],[98,70,111,69],[98,72,111,71],[98,74,111,73],[99,6,112,8],[99,10,112,12,"path"],[99,14,112,16],[100,6,113,8],[100,10,113,12,"i"],[100,11,113,13],[100,15,113,17],[100,16,113,18],[100,18,113,20],[101,8,114,12,"path"],[101,12,114,16],[101,15,114,28,"i"],[101,16,114,29],[101,24,114,29,"arguments"],[101,33,114,29],[101,34,114,29,"length"],[101,40,114,29],[101,44,114,28,"i"],[101,45,114,29],[101,48,114,29,"undefined"],[101,57,114,29],[101,60,114,29,"arguments"],[101,69,114,29],[101,70,114,28,"i"],[101,71,114,29],[101,72,114,30],[102,6,115,8],[102,7,115,9],[102,13,116,13],[103,8,117,12,"path"],[103,12,117,16],[103,15,117,19],[103,18,117,22],[104,6,118,8],[105,6,119,8,"assertPath"],[105,16,119,18],[105,17,119,19,"path"],[105,21,119,23],[105,22,119,24],[106,6,120,8],[107,6,121,8],[107,10,121,12,"path"],[107,14,121,16],[107,15,121,17,"length"],[107,21,121,23],[107,26,121,28],[107,27,121,29],[107,29,121,31],[108,8,122,12],[109,6,123,8],[110,6,124,8,"resolvedPath"],[110,18,124,20],[110,21,124,23,"path"],[110,25,124,27],[110,28,124,30],[110,31,124,33],[110,34,124,36,"resolvedPath"],[110,46,124,48],[111,6,125,8,"resolvedAbsolute"],[111,22,125,24],[111,25,125,27,"path"],[111,29,125,31],[111,30,125,32,"charCodeAt"],[111,40,125,42],[111,41,125,43],[111,42,125,44],[111,43,125,45],[111,48,125,50],[111,50,125,52],[111,51,125,53],[112,4,126,4],[113,4,127,4],[114,4,128,4],[115,4,129,4],[116,4,130,4,"resolvedPath"],[116,16,130,16],[116,19,130,19,"normalizeStringPosix"],[116,39,130,39],[116,40,130,40,"resolvedPath"],[116,52,130,52],[116,54,130,54],[116,55,130,55,"resolvedAbsolute"],[116,71,130,71],[116,72,130,72],[117,4,131,4],[117,8,131,8,"resolvedAbsolute"],[117,24,131,24],[117,26,131,26],[118,6,132,8],[118,10,132,12,"resolvedPath"],[118,22,132,24],[118,23,132,25,"length"],[118,29,132,31],[118,32,132,34],[118,33,132,35],[118,35,132,37],[119,8,133,12],[119,15,133,19],[119,18,133,22],[119,21,133,25,"resolvedPath"],[119,33,133,37],[120,6,134,8],[120,7,134,9],[120,13,135,13],[121,8,136,12],[121,15,136,19],[121,18,136,22],[122,6,137,8],[123,4,138,4],[123,5,138,5],[123,11,139,9],[123,15,139,13,"resolvedPath"],[123,27,139,25],[123,28,139,26,"length"],[123,34,139,32],[123,37,139,35],[123,38,139,36],[123,40,139,38],[124,6,140,8],[124,13,140,15,"resolvedPath"],[124,25,140,27],[125,4,141,4],[125,5,141,5],[125,11,142,9],[126,6,143,8],[126,13,143,15],[126,16,143,18],[127,4,144,4],[128,2,145,0],[129,2,146,0,"exports"],[129,9,146,7],[129,10,146,8,"resolve"],[129,17,146,15],[129,20,146,18,"resolve"],[129,27,146,25],[130,0,146,26],[130,3]],"functionMap":{"names":["<global>","assertPath","normalizeStringPosix","resolve"],"mappings":"AAA;ACwB;CDI;AEE;CF2E;AGE;CHqC"},"hasCjsExports":true},"type":"js/module"}]}