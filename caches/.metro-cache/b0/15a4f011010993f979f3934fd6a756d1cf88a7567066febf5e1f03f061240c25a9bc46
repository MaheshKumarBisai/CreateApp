{"dependencies":[{"name":"./useRouteCache","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":57},"end":{"line":3,"column":46,"index":103}}],"key":"SlpEjSNdmRwBwFYb0hsPcwm9wEc=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return getFocusedRouteNameFromRoute;\n    }\n  });\n  var _useRouteCache = require(_dependencyMap[0], \"./useRouteCache\");\n  function getFocusedRouteNameFromRoute(route) {\n    // @ts-expect-error: this isn't in type definitions coz we want this private\n    var state = route[_useRouteCache.CHILD_STATE] ?? route.state;\n    var params = route.params;\n    var routeName = state ?\n    // Get the currently active route name in the nested navigator\n    state.routes[\n    // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n    // The type property will only exist for rehydrated state and not for state from deep link\n    state.index ?? (typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1)].name :\n    // If state doesn't exist, we need to default to `screen` param if available\n    typeof params?.screen === 'string' ? params.screen : undefined;\n    return routeName;\n  }\n});","lineCount":28,"map":[[7,2,5,15,"Object"],[7,8,5,15],[7,9,5,15,"defineProperty"],[7,23,5,15],[7,24,5,15,"exports"],[7,31,5,15],[8,4,5,15,"enumerable"],[8,14,5,15],[9,4,5,15,"get"],[9,7,5,15],[9,18,5,15,"get"],[9,19,5,15],[10,6,5,15],[10,13,5,15,"getFocusedRouteNameFromRoute"],[10,41,5,15],[11,4,5,15],[12,2,5,15],[13,2,3,0],[13,6,3,0,"_useRouteCache"],[13,20,3,0],[13,23,3,0,"require"],[13,30,3,0],[13,31,3,0,"_dependencyMap"],[13,45,3,0],[14,2,5,15],[14,11,5,24,"getFocusedRouteNameFromRoute"],[14,39,5,52,"getFocusedRouteNameFromRoute"],[14,40,6,2,"route"],[14,45,6,31],[14,47,7,22],[15,4,8,2],[16,4,9,2],[16,8,9,8,"state"],[16,13,9,13],[16,16,9,16,"route"],[16,21,9,21],[16,22,9,22,"CHILD_STATE"],[16,36,9,33],[16,37,9,33,"CHILD_STATE"],[16,48,9,33],[16,49,9,34],[16,53,9,38,"route"],[16,58,9,43],[16,59,9,44,"state"],[16,64,9,49],[17,4,10,2],[17,8,10,8,"params"],[17,14,10,14],[17,17,10,17,"route"],[17,22,10,22],[17,23,10,23,"params"],[17,29,10,65],[18,4,12,2],[18,8,12,8,"routeName"],[18,17,12,17],[18,20,12,20,"state"],[18,25,12,25],[19,4,13,6],[20,4,14,6,"state"],[20,9,14,11],[20,10,14,12,"routes"],[20,16,14,18],[21,4,15,8],[22,4,16,8],[23,4,17,8,"state"],[23,9,17,13],[23,10,17,14,"index"],[23,15,17,19],[23,20,18,11],[23,27,18,18,"state"],[23,32,18,23],[23,33,18,24,"type"],[23,37,18,28],[23,42,18,33],[23,50,18,41],[23,54,18,45,"state"],[23,59,18,50],[23,60,18,51,"type"],[23,64,18,55],[23,69,18,60],[23,76,18,67],[23,79,19,14],[23,80,19,15],[23,83,20,14,"state"],[23,88,20,19],[23,89,20,20,"routes"],[23,95,20,26],[23,96,20,27,"length"],[23,102,20,33],[23,105,20,36],[23,106,20,37],[23,107,20,38],[23,108,21,7],[23,109,21,8,"name"],[23,113,21,12],[24,4,22,6],[25,4,23,4],[25,11,23,11,"params"],[25,17,23,17],[25,19,23,19,"screen"],[25,25,23,25],[25,30,23,30],[25,38,23,38],[25,41,24,6,"params"],[25,47,24,12],[25,48,24,13,"screen"],[25,54,24,19],[25,57,25,6,"undefined"],[25,66,25,15],[26,4,27,2],[26,11,27,9,"routeName"],[26,20,27,18],[27,2,28,0],[28,0,28,1],[28,3]],"functionMap":{"names":["<global>","getFocusedRouteNameFromRoute"],"mappings":"AAA;eCI;CDuB"},"hasCjsExports":false},"type":"js/module"}]}