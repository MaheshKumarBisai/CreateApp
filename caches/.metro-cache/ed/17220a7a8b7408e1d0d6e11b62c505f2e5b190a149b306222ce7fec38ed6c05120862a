{"dependencies":[{"name":"./fetchAsync","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":21,"index":308},"end":{"line":10,"column":44,"index":331}}],"key":"Mz6Uo5TsK0TkJs4CsUJWjxAjC24=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.fetchThenEvalAsync = void 0;\n  /**\n   * Copyright Â© 2022 650 Industries.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  var fetchAsync_1 = require(_dependencyMap[0], \"./fetchAsync\");\n  /**\n   * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n   *\n   * @param bundlePath Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon`.\n   */\n  function fetchThenEvalAsync(url) {\n    return (0, fetchAsync_1.fetchAsync)(url).then(_ref => {\n      var body = _ref.body,\n        status = _ref.status,\n        headers = _ref.headers;\n      if (headers?.has?.('Content-Type') != null && headers.get('Content-Type').includes('application/json')) {\n        // Errors are returned as JSON.\n        throw new Error(JSON.parse(body).message || `Unknown error fetching '${url}'`);\n      }\n      if (status === 200) {\n        // Some engines do not support `sourceURL` as a comment. We expose a\n        // `globalEvalWithSourceUrl` function to handle updates in that case.\n        if (global.globalEvalWithSourceUrl) {\n          return global.globalEvalWithSourceUrl(body, url);\n        } else {\n          // eslint-disable-next-line no-eval\n          return eval(body);\n        }\n      } else {\n        // Format Metro errors if possible.\n        if (process.env.NODE_ENV === 'development') {\n          // body can be an error from Metro if a module is missing.\n          // {\"originModulePath\":\"/Users/evanbacon/Documents/GitHub/expo/.\",\"targetModuleName\":\"./http://localhost:8081/node_modules/react-native/index.js\",\"message\":\"...\"}\n          var error = jsonParseOptional(body);\n          if (error) {\n            // TODO: This is essentially like the Metro native red box errors. We should do a better job formatting them so\n            // the user experience doesn't feel bad. This can be tested by loading a split bundle that results in a missing module error from Metro.\n            if ('message' in error) {\n              throw new Error('Failed to load split bundle from Metro ' + url + ' (check terminal for more info).\\n(load: ' + error.message + ')');\n            }\n          }\n        }\n        throw new Error(`Failed to load split bundle from Metro ${url} (check terminal for more info).\\n${body}`);\n      }\n    });\n  }\n  exports.fetchThenEvalAsync = fetchThenEvalAsync;\n  function jsonParseOptional(json) {\n    try {\n      return JSON.parse(json);\n    } catch {\n      return null;\n    }\n  }\n});","lineCount":64,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"fetchThenEvalAsync"],[7,28,3,26],[7,31,3,29],[7,36,3,34],[7,37,3,35],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,2,10,0],[14,6,10,6,"fetchAsync_1"],[14,18,10,18],[14,21,10,21,"require"],[14,28,10,28],[14,29,10,28,"_dependencyMap"],[14,43,10,28],[14,62,10,43],[14,63,10,44],[15,2,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,2,16,0],[20,11,16,9,"fetchThenEvalAsync"],[20,29,16,27,"fetchThenEvalAsync"],[20,30,16,28,"url"],[20,33,16,31],[20,35,16,33],[21,4,17,4],[21,11,17,11],[21,12,17,12],[21,13,17,13],[21,15,17,15,"fetchAsync_1"],[21,27,17,27],[21,28,17,28,"fetchAsync"],[21,38,17,38],[21,40,17,40,"url"],[21,43,17,43],[21,44,17,44],[21,45,17,45,"then"],[21,49,17,49],[21,50,17,50,"_ref"],[21,54,17,50],[21,58,17,81],[22,6,17,81],[22,10,17,53,"body"],[22,14,17,57],[22,17,17,57,"_ref"],[22,21,17,57],[22,22,17,53,"body"],[22,26,17,57],[23,8,17,59,"status"],[23,14,17,65],[23,17,17,65,"_ref"],[23,21,17,65],[23,22,17,59,"status"],[23,28,17,65],[24,8,17,67,"headers"],[24,15,17,74],[24,18,17,74,"_ref"],[24,22,17,74],[24,23,17,67,"headers"],[24,30,17,74],[25,6,18,8],[25,10,18,12,"headers"],[25,17,18,19],[25,19,18,21,"has"],[25,22,18,24],[25,25,18,27],[25,39,18,41],[25,40,18,42],[25,44,18,46],[25,48,18,50],[25,52,19,12,"headers"],[25,59,19,19],[25,60,19,20,"get"],[25,63,19,23],[25,64,19,24],[25,78,19,38],[25,79,19,39],[25,80,19,40,"includes"],[25,88,19,48],[25,89,19,49],[25,107,19,67],[25,108,19,68],[25,110,19,70],[26,8,20,12],[27,8,21,12],[27,14,21,18],[27,18,21,22,"Error"],[27,23,21,27],[27,24,21,28,"JSON"],[27,28,21,32],[27,29,21,33,"parse"],[27,34,21,38],[27,35,21,39,"body"],[27,39,21,43],[27,40,21,44],[27,41,21,45,"message"],[27,48,21,52],[27,52,21,56],[27,79,21,83,"url"],[27,82,21,86],[27,85,21,89],[27,86,21,90],[28,6,22,8],[29,6,23,8],[29,10,23,12,"status"],[29,16,23,18],[29,21,23,23],[29,24,23,26],[29,26,23,28],[30,8,24,12],[31,8,25,12],[32,8,26,12],[32,12,26,16,"global"],[32,18,26,22],[32,19,26,23,"globalEvalWithSourceUrl"],[32,42,26,46],[32,44,26,48],[33,10,27,16],[33,17,27,23,"global"],[33,23,27,29],[33,24,27,30,"globalEvalWithSourceUrl"],[33,47,27,53],[33,48,27,54,"body"],[33,52,27,58],[33,54,27,60,"url"],[33,57,27,63],[33,58,27,64],[34,8,28,12],[34,9,28,13],[34,15,29,17],[35,10,30,16],[36,10,31,16],[36,17,31,23,"eval"],[36,21,31,27],[36,22,31,28,"body"],[36,26,31,32],[36,27,31,33],[37,8,32,12],[38,6,33,8],[38,7,33,9],[38,13,34,13],[39,8,35,12],[40,8,36,12],[40,12,36,16,"process"],[40,19,36,23],[40,20,36,24,"env"],[40,23,36,27],[40,24,36,28,"NODE_ENV"],[40,32,36,36],[40,37,36,41],[40,50,36,54],[40,52,36,56],[41,10,37,16],[42,10,38,16],[43,10,39,16],[43,14,39,22,"error"],[43,19,39,27],[43,22,39,30,"jsonParseOptional"],[43,39,39,47],[43,40,39,48,"body"],[43,44,39,52],[43,45,39,53],[44,10,40,16],[44,14,40,20,"error"],[44,19,40,25],[44,21,40,27],[45,12,41,20],[46,12,42,20],[47,12,43,20],[47,16,43,24],[47,25,43,33],[47,29,43,37,"error"],[47,34,43,42],[47,36,43,44],[48,14,44,24],[48,20,44,30],[48,24,44,34,"Error"],[48,29,44,39],[48,30,44,40],[48,71,44,81],[48,74,45,28,"url"],[48,77,45,31],[48,80,46,28],[48,123,46,71],[48,126,47,28,"error"],[48,131,47,33],[48,132,47,34,"message"],[48,139,47,41],[48,142,48,28],[48,145,48,31],[48,146,48,32],[49,12,49,20],[50,10,50,16],[51,8,51,12],[52,8,52,12],[52,14,52,18],[52,18,52,22,"Error"],[52,23,52,27],[52,24,52,28],[52,66,52,70,"url"],[52,69,52,73],[52,106,52,110,"body"],[52,110,52,114],[52,112,52,116],[52,113,52,117],[53,6,53,8],[54,4,54,4],[54,5,54,5],[54,6,54,6],[55,2,55,0],[56,2,56,0,"exports"],[56,9,56,7],[56,10,56,8,"fetchThenEvalAsync"],[56,28,56,26],[56,31,56,29,"fetchThenEvalAsync"],[56,49,56,47],[57,2,57,0],[57,11,57,9,"jsonParseOptional"],[57,28,57,26,"jsonParseOptional"],[57,29,57,27,"json"],[57,33,57,31],[57,35,57,33],[58,4,58,4],[58,8,58,8],[59,6,59,8],[59,13,59,15,"JSON"],[59,17,59,19],[59,18,59,20,"parse"],[59,23,59,25],[59,24,59,26,"json"],[59,28,59,30],[59,29,59,31],[60,4,60,4],[60,5,60,5],[60,6,61,4],[60,12,61,10],[61,6,62,8],[61,13,62,15],[61,17,62,19],[62,4,63,4],[63,2,64,0],[64,0,64,1],[64,3]],"functionMap":{"names":["<global>","fetchThenEvalAsync","then$argument_0","jsonParseOptional"],"mappings":"AAA;ACe;kDCC;KDqC;CDC;AGE;CHO"},"hasCjsExports":true},"type":"js/module"}]}