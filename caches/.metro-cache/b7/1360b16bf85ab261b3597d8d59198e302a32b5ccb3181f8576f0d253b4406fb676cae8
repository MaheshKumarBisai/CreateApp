{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"../Utilities/warnOnce","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0},"end":{"line":13,"column":45}}],"key":"axetQ1A+n6uUQkO4dTvt9S00uks=","exportNames":["*"],"imports":1}},{"name":"./NativePerformanceObserver","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0},"end":{"line":14,"column":68}}],"key":"0/EyzOxo8qTZn/X6yeO3Eah5nLo=","exportNames":["*"],"imports":1}},{"name":"./PerformanceEntry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0},"end":{"line":15,"column":52}}],"key":"brFNAt3Zh5rA+ZZUGgMallCwpmE=","exportNames":["*"],"imports":1}},{"name":"./RawPerformanceEntry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0},"end":{"line":19,"column":31}}],"key":"IK+Gykxxt1SJMUQA0aRx+ibytHw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"PerformanceObserverEntryList\", {\n    enumerable: true,\n    get: function () {\n      return PerformanceObserverEntryList;\n    }\n  });\n  exports.warnNoNativePerformanceObserver = warnNoNativePerformanceObserver;\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return PerformanceObserver;\n    }\n  });\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _UtilitiesWarnOnce = require(_dependencyMap[3], \"../Utilities/warnOnce\");\n  var warnOnce = _interopDefault(_UtilitiesWarnOnce);\n  var _NativePerformanceObserver = require(_dependencyMap[4], \"./NativePerformanceObserver\");\n  var NativePerformanceObserver = _interopDefault(_NativePerformanceObserver);\n  require(_dependencyMap[5], \"./PerformanceEntry\");\n  var _RawPerformanceEntry = require(_dependencyMap[6], \"./RawPerformanceEntry\");\n  var PerformanceObserverEntryList = /*#__PURE__*/function () {\n    function PerformanceObserverEntryList(entries) {\n      (0, _classCallCheck.default)(this, PerformanceObserverEntryList);\n      this._entries = entries;\n    }\n    return (0, _createClass.default)(PerformanceObserverEntryList, [{\n      key: \"getEntries\",\n      value: function getEntries() {\n        return this._entries;\n      }\n    }, {\n      key: \"getEntriesByType\",\n      value: function getEntriesByType(type) {\n        return this._entries.filter(entry => entry.entryType === type);\n      }\n    }, {\n      key: \"getEntriesByName\",\n      value: function getEntriesByName(name, type) {\n        if (type === undefined) {\n          return this._entries.filter(entry => entry.name === name);\n        } else {\n          return this._entries.filter(entry => entry.name === name && entry.entryType === type);\n        }\n      }\n    }]);\n  }();\n  var observerCountPerEntryType = new Map();\n  var registeredObservers = new Map();\n  var isOnPerformanceEntryCallbackSet = false;\n  var onPerformanceEntry = () => {\n    if (!NativePerformanceObserver.default) {\n      return;\n    }\n    var entryResult = NativePerformanceObserver.default.popPendingEntries();\n    var rawEntries = entryResult?.entries ?? [];\n    var droppedEntriesCount = entryResult?.droppedEntriesCount;\n    if (rawEntries.length === 0) {\n      return;\n    }\n    var entries = rawEntries.map(_RawPerformanceEntry.rawToPerformanceEntry);\n    var _loop = function (observerConfig) {\n      var entriesForObserver = entries.filter(entry => {\n        if (!observerConfig.entryTypes.has(entry.entryType)) {\n          return false;\n        }\n        var durationThreshold = observerConfig.entryTypes.get(entry.entryType);\n        return entry.duration >= (durationThreshold ?? 0);\n      });\n      observerConfig.callback(new PerformanceObserverEntryList(entriesForObserver), _observer, droppedEntriesCount);\n    };\n    for (var _ref of registeredObservers.entries()) {\n      var _ref2 = (0, _slicedToArray.default)(_ref, 2);\n      var _observer = _ref2[0];\n      var observerConfig = _ref2[1];\n      _loop(observerConfig);\n    }\n  };\n  function warnNoNativePerformanceObserver() {\n    (0, warnOnce.default)('missing-native-performance-observer', 'Missing native implementation of PerformanceObserver');\n  }\n  function applyDurationThresholds() {\n    var durationThresholds = Array.from(registeredObservers.values()).map(config => config.entryTypes).reduce((accumulator, currentValue) => union(accumulator, currentValue), new Map());\n    for (var _ref3 of durationThresholds) {\n      var _ref4 = (0, _slicedToArray.default)(_ref3, 2);\n      var entryType = _ref4[0];\n      var durationThreshold = _ref4[1];\n      NativePerformanceObserver.default?.setDurationThreshold((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType), durationThreshold ?? 0);\n    }\n  }\n  var PerformanceObserver = /*#__PURE__*/function () {\n    function PerformanceObserver(callback) {\n      (0, _classCallCheck.default)(this, PerformanceObserver);\n      this._callback = callback;\n    }\n    return (0, _createClass.default)(PerformanceObserver, [{\n      key: \"observe\",\n      value: function observe(options) {\n        if (!NativePerformanceObserver.default) {\n          warnNoNativePerformanceObserver();\n          return;\n        }\n        this._validateObserveOptions(options);\n        var requestedEntryTypes;\n        if (options.entryTypes) {\n          this._type = 'multiple';\n          requestedEntryTypes = new Map(options.entryTypes.map(t => [t, undefined]));\n        } else {\n          this._type = 'single';\n          requestedEntryTypes = new Map([[options.type, options.durationThreshold]]);\n        }\n        var currentEntryTypes = registeredObservers.get(this)?.entryTypes;\n        var nextEntryTypes = currentEntryTypes ? union(requestedEntryTypes, currentEntryTypes) : requestedEntryTypes;\n        if (currentEntryTypes && currentEntryTypes.size === nextEntryTypes.size) {\n          return;\n        }\n        registeredObservers.set(this, {\n          callback: this._callback,\n          entryTypes: nextEntryTypes\n        });\n        if (!isOnPerformanceEntryCallbackSet) {\n          NativePerformanceObserver.default.setOnPerformanceEntryCallback(onPerformanceEntry);\n          isOnPerformanceEntryCallbackSet = true;\n        }\n        var newEntryTypes = currentEntryTypes ? difference(new Set(requestedEntryTypes.keys()), new Set(currentEntryTypes.keys())) : new Set(requestedEntryTypes.keys());\n        for (var type of newEntryTypes) {\n          if (!observerCountPerEntryType.has(type)) {\n            var rawType = (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(type);\n            NativePerformanceObserver.default.startReporting(rawType);\n          }\n          observerCountPerEntryType.set(type, (observerCountPerEntryType.get(type) ?? 0) + 1);\n        }\n        applyDurationThresholds();\n      }\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {\n        if (!NativePerformanceObserver.default) {\n          warnNoNativePerformanceObserver();\n          return;\n        }\n        var observerConfig = registeredObservers.get(this);\n        if (!observerConfig) {\n          return;\n        }\n        for (var type of observerConfig.entryTypes.keys()) {\n          var numberOfObserversForThisType = observerCountPerEntryType.get(type) ?? 0;\n          if (numberOfObserversForThisType === 1) {\n            observerCountPerEntryType.delete(type);\n            NativePerformanceObserver.default.stopReporting((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(type));\n          } else if (numberOfObserversForThisType !== 0) {\n            observerCountPerEntryType.set(type, numberOfObserversForThisType - 1);\n          }\n        }\n        registeredObservers.delete(this);\n        if (registeredObservers.size === 0) {\n          NativePerformanceObserver.default.setOnPerformanceEntryCallback(undefined);\n          isOnPerformanceEntryCallbackSet = false;\n        }\n        applyDurationThresholds();\n      }\n    }, {\n      key: \"_validateObserveOptions\",\n      value: function _validateObserveOptions(options) {\n        var type = options.type,\n          entryTypes = options.entryTypes,\n          durationThreshold = options.durationThreshold;\n        if (!type && !entryTypes) {\n          throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and type arguments.\");\n        }\n        if (entryTypes && type) {\n          throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must include either entryTypes or type arguments.\");\n        }\n        if (this._type === 'multiple' && type) {\n          throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This observer has performed observe({entryTypes:...}, therefore it cannot perform observe({type:...})\");\n        }\n        if (this._type === 'single' && entryTypes) {\n          throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This PerformanceObserver has performed observe({type:...}, therefore it cannot perform observe({entryTypes:...})\");\n        }\n        if (entryTypes && durationThreshold !== undefined) {\n          throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and durationThreshold arguments.\");\n        }\n      }\n    }]);\n  }();\n  PerformanceObserver.supportedEntryTypes = Object.freeze(['mark', 'measure', 'event']);\n  function union(a, b) {\n    var res = new Map();\n    for (var _ref5 of a) {\n      var _ref6 = (0, _slicedToArray.default)(_ref5, 2);\n      var k = _ref6[0];\n      var v = _ref6[1];\n      if (!b.has(k)) {\n        res.set(k, v);\n      } else {\n        res.set(k, Math.min(v ?? 0, b.get(k) ?? 0));\n      }\n    }\n    return res;\n  }\n  function difference(a, b) {\n    return new Set([...a].filter(x => !b.has(x)));\n  }\n});","lineCount":219,"map":[[12,2,23,0,"Object"],[12,8,23,0],[12,9,23,0,"defineProperty"],[12,23,23,0],[12,24,23,0,"exports"],[12,31,23,0],[13,4,23,0,"enumerable"],[13,14,23,0],[14,4,23,0,"get"],[14,7,23,0],[14,18,23,0,"get"],[14,19,23,0],[15,6,23,0],[15,13,23,0,"PerformanceObserverEntryList"],[15,41,23,0],[16,4,23,0],[17,2,23,0],[18,2,107,0,"exports"],[18,9,107,0],[18,10,107,0,"warnNoNativePerformanceObserver"],[18,41,107,0],[18,44,107,0,"warnNoNativePerformanceObserver"],[18,75,107,0],[19,2,112,1,"Object"],[19,8,112,1],[19,9,112,1,"defineProperty"],[19,23,112,1],[19,24,112,1,"exports"],[19,31,112,1],[20,4,112,1,"enumerable"],[20,14,112,1],[21,4,112,1,"get"],[21,7,112,1],[21,18,112,1,"get"],[21,19,112,1],[22,6,112,1],[22,13,152,21,"PerformanceObserver"],[22,32,152,40],[23,4,152,40],[24,2,152,40],[25,2,152,40],[25,6,152,40,"_babelRuntimeHelpersSlicedToArray"],[25,39,152,40],[25,42,152,40,"require"],[25,49,152,40],[25,50,152,40,"_dependencyMap"],[25,64,152,40],[26,2,152,40],[26,6,152,40,"_slicedToArray"],[26,20,152,40],[26,23,152,40,"_interopDefault"],[26,38,152,40],[26,39,152,40,"_babelRuntimeHelpersSlicedToArray"],[26,72,152,40],[27,2,152,40],[27,6,152,40,"_babelRuntimeHelpersClassCallCheck"],[27,40,152,40],[27,43,152,40,"require"],[27,50,152,40],[27,51,152,40,"_dependencyMap"],[27,65,152,40],[28,2,152,40],[28,6,152,40,"_classCallCheck"],[28,21,152,40],[28,24,152,40,"_interopDefault"],[28,39,152,40],[28,40,152,40,"_babelRuntimeHelpersClassCallCheck"],[28,74,152,40],[29,2,152,40],[29,6,152,40,"_babelRuntimeHelpersCreateClass"],[29,37,152,40],[29,40,152,40,"require"],[29,47,152,40],[29,48,152,40,"_dependencyMap"],[29,62,152,40],[30,2,152,40],[30,6,152,40,"_createClass"],[30,18,152,40],[30,21,152,40,"_interopDefault"],[30,36,152,40],[30,37,152,40,"_babelRuntimeHelpersCreateClass"],[30,68,152,40],[31,2,13,0],[31,6,13,0,"_UtilitiesWarnOnce"],[31,24,13,0],[31,27,13,0,"require"],[31,34,13,0],[31,35,13,0,"_dependencyMap"],[31,49,13,0],[32,2,13,0],[32,6,13,0,"warnOnce"],[32,14,13,0],[32,17,13,0,"_interopDefault"],[32,32,13,0],[32,33,13,0,"_UtilitiesWarnOnce"],[32,51,13,0],[33,2,14,0],[33,6,14,0,"_NativePerformanceObserver"],[33,32,14,0],[33,35,14,0,"require"],[33,42,14,0],[33,43,14,0,"_dependencyMap"],[33,57,14,0],[34,2,14,0],[34,6,14,0,"NativePerformanceObserver"],[34,31,14,0],[34,34,14,0,"_interopDefault"],[34,49,14,0],[34,50,14,0,"_NativePerformanceObserver"],[34,76,14,0],[35,2,15,0,"require"],[35,9,15,0],[35,10,15,0,"_dependencyMap"],[35,24,15,0],[36,2,16,0],[36,6,16,0,"_RawPerformanceEntry"],[36,26,16,0],[36,29,16,0,"require"],[36,36,16,0],[36,37,16,0,"_dependencyMap"],[36,51,16,0],[37,2,19,31],[37,6,23,13,"PerformanceObserverEntryList"],[37,34,23,41],[38,4,26,2],[38,13,26,2,"PerformanceObserverEntryList"],[38,42,26,14,"entries"],[38,49,26,43],[38,51,26,45],[39,6,26,45],[39,10,26,45,"_classCallCheck"],[39,25,26,45],[39,26,26,45,"default"],[39,33,26,45],[39,41,26,45,"PerformanceObserverEntryList"],[39,69,26,45],[40,6,27,4],[40,10,27,8],[40,11,27,9,"_entries"],[40,19,27,17],[40,22,27,20,"entries"],[40,29,27,27],[41,4,28,2],[42,4,28,3],[42,15,28,3,"_createClass"],[42,27,28,3],[42,28,28,3,"default"],[42,35,28,3],[42,37,28,3,"PerformanceObserverEntryList"],[42,65,28,3],[43,6,28,3,"key"],[43,9,28,3],[44,6,28,3,"value"],[44,11,28,3],[44,13,30,2],[44,22,30,2,"getEntries"],[44,32,30,12,"getEntries"],[44,33,30,12],[44,35,30,37],[45,8,31,4],[45,15,31,11],[45,19,31,15],[45,20,31,16,"_entries"],[45,28,31,24],[46,6,32,2],[47,4,32,3],[48,6,32,3,"key"],[48,9,32,3],[49,6,32,3,"value"],[49,11,32,3],[49,13,34,2],[49,22,34,2,"getEntriesByType"],[49,38,34,18,"getEntriesByType"],[49,39,34,19,"type"],[49,43,34,45],[49,45,34,69],[50,8,35,4],[50,15,35,11],[50,19,35,15],[50,20,35,16,"_entries"],[50,28,35,24],[50,29,35,25,"filter"],[50,35,35,31],[50,36,35,32,"entry"],[50,41,35,37],[50,45,35,41,"entry"],[50,50,35,46],[50,51,35,47,"entryType"],[50,60,35,56],[50,65,35,61,"type"],[50,69,35,65],[50,70,35,66],[51,6,36,2],[52,4,36,3],[53,6,36,3,"key"],[53,9,36,3],[54,6,36,3,"value"],[54,11,36,3],[54,13,38,2],[54,22,38,2,"getEntriesByName"],[54,38,38,18,"getEntriesByName"],[54,39,39,4,"name"],[54,43,39,16],[54,45,40,4,"type"],[54,49,40,31],[54,51,41,26],[55,8,42,4],[55,12,42,8,"type"],[55,16,42,12],[55,21,42,17,"undefined"],[55,30,42,26],[55,32,42,28],[56,10,43,6],[56,17,43,13],[56,21,43,17],[56,22,43,18,"_entries"],[56,30,43,26],[56,31,43,27,"filter"],[56,37,43,33],[56,38,43,34,"entry"],[56,43,43,39],[56,47,43,43,"entry"],[56,52,43,48],[56,53,43,49,"name"],[56,57,43,53],[56,62,43,58,"name"],[56,66,43,62],[56,67,43,63],[57,8,44,4],[57,9,44,5],[57,15,44,11],[58,10,45,6],[58,17,45,13],[58,21,45,17],[58,22,45,18,"_entries"],[58,30,45,26],[58,31,45,27,"filter"],[58,37,45,33],[58,38,46,8,"entry"],[58,43,46,13],[58,47,46,17,"entry"],[58,52,46,22],[58,53,46,23,"name"],[58,57,46,27],[58,62,46,32,"name"],[58,66,46,36],[58,70,46,40,"entry"],[58,75,46,45],[58,76,46,46,"entryType"],[58,85,46,55],[58,90,46,60,"type"],[58,94,47,6],[58,95,47,7],[59,8,48,4],[60,6,49,2],[61,4,49,3],[62,2,49,3],[63,2,74,0],[63,6,74,6,"observerCountPerEntryType"],[63,31,74,66],[63,34,74,69],[63,38,74,73,"Map"],[63,41,74,76],[63,42,74,77],[63,43,74,78],[64,2,75,0],[64,6,75,6,"registeredObservers"],[64,25,75,78],[64,28,76,2],[64,32,76,6,"Map"],[64,35,76,9],[64,36,76,10],[64,37,76,11],[65,2,77,0],[65,6,77,4,"isOnPerformanceEntryCallbackSet"],[65,37,77,44],[65,40,77,47],[65,45,77,52],[66,2,80,0],[66,6,80,6,"onPerformanceEntry"],[66,24,80,24],[66,27,80,27,"onPerformanceEntry"],[66,28,80,27],[66,33,80,33],[67,4,81,2],[67,8,81,6],[67,9,81,7,"NativePerformanceObserver"],[67,34,81,32],[67,35,81,32,"default"],[67,42,81,32],[67,44,81,34],[68,6,82,4],[69,4,83,2],[70,4,84,2],[70,8,84,8,"entryResult"],[70,19,84,19],[70,22,84,22,"NativePerformanceObserver"],[70,47,84,47],[70,48,84,47,"default"],[70,55,84,47],[70,56,84,48,"popPendingEntries"],[70,73,84,65],[70,74,84,66],[70,75,84,67],[71,4,85,2],[71,8,85,8,"rawEntries"],[71,18,85,18],[71,21,85,21,"entryResult"],[71,32,85,32],[71,34,85,34,"entries"],[71,41,85,41],[71,45,85,45],[71,47,85,47],[72,4,86,2],[72,8,86,8,"droppedEntriesCount"],[72,27,86,27],[72,30,86,30,"entryResult"],[72,41,86,41],[72,43,86,43,"droppedEntriesCount"],[72,62,86,62],[73,4,87,2],[73,8,87,6,"rawEntries"],[73,18,87,16],[73,19,87,17,"length"],[73,25,87,23],[73,30,87,28],[73,31,87,29],[73,33,87,31],[74,6,88,4],[75,4,89,2],[76,4,90,2],[76,8,90,8,"entries"],[76,15,90,15],[76,18,90,18,"rawEntries"],[76,28,90,28],[76,29,90,29,"map"],[76,32,90,32],[76,33,90,33,"rawToPerformanceEntry"],[76,53,90,54],[76,54,90,54,"rawToPerformanceEntry"],[76,75,90,54],[76,76,90,55],[77,4,90,56],[77,8,90,56,"_loop"],[77,13,90,56],[77,25,90,56,"_loop"],[77,26,90,56,"observerConfig"],[77,40,90,56],[77,42,91,74],[78,6,92,4],[78,10,92,10,"entriesForObserver"],[78,28,92,50],[78,31,92,53,"entries"],[78,38,92,60],[78,39,92,61,"filter"],[78,45,92,67],[78,46,92,68,"entry"],[78,51,92,73],[78,55,92,77],[79,8,93,6],[79,12,93,10],[79,13,93,11,"observerConfig"],[79,27,93,25],[79,28,93,26,"entryTypes"],[79,38,93,36],[79,39,93,37,"has"],[79,42,93,40],[79,43,93,41,"entry"],[79,48,93,46],[79,49,93,47,"entryType"],[79,58,93,56],[79,59,93,57],[79,61,93,59],[80,10,94,8],[80,17,94,15],[80,22,94,20],[81,8,95,6],[82,8,96,6],[82,12,96,12,"durationThreshold"],[82,29,96,29],[82,32,96,32,"observerConfig"],[82,46,96,46],[82,47,96,47,"entryTypes"],[82,57,96,57],[82,58,96,58,"get"],[82,61,96,61],[82,62,96,62,"entry"],[82,67,96,67],[82,68,96,68,"entryType"],[82,77,96,77],[82,78,96,78],[83,8,97,6],[83,15,97,13,"entry"],[83,20,97,18],[83,21,97,19,"duration"],[83,29,97,27],[83,34,97,32,"durationThreshold"],[83,51,97,49],[83,55,97,53],[83,56,97,54],[83,57,97,55],[84,6,98,4],[84,7,98,5],[84,8,98,6],[85,6,99,4,"observerConfig"],[85,20,99,18],[85,21,99,19,"callback"],[85,29,99,27],[85,30,100,6],[85,34,100,10,"PerformanceObserverEntryList"],[85,62,100,38],[85,63,100,39,"entriesForObserver"],[85,81,100,57],[85,82,100,58],[85,84,101,6,"observer"],[85,93,101,14],[85,95,102,6,"droppedEntriesCount"],[85,114,103,4],[85,115,103,5],[86,4,104,2],[86,5,104,3],[87,4,91,2],[87,13,91,2,"_ref"],[87,17,91,2],[87,21,91,43,"registeredObservers"],[87,40,91,62],[87,41,91,63,"entries"],[87,48,91,70],[87,49,91,71],[87,50,91,72],[88,6,91,72],[88,10,91,72,"_ref2"],[88,15,91,72],[88,22,91,72,"_slicedToArray"],[88,36,91,72],[88,37,91,72,"default"],[88,44,91,72],[88,46,91,72,"_ref"],[88,50,91,72],[89,6,91,72],[89,10,91,14,"observer"],[89,19,91,22],[89,22,91,22,"_ref2"],[89,27,91,22],[90,6,91,22],[90,10,91,24,"observerConfig"],[90,24,91,38],[90,27,91,38,"_ref2"],[90,32,91,38],[91,6,91,38,"_loop"],[91,11,91,38],[91,12,91,38,"observerConfig"],[91,26,91,38],[92,4,91,38],[93,2,105,0],[93,3,105,1],[94,2,107,7],[94,11,107,16,"warnNoNativePerformanceObserver"],[94,42,107,47,"warnNoNativePerformanceObserver"],[94,43,107,47],[94,45,107,50],[95,4,108,2],[95,8,108,2,"warnOnce"],[95,16,108,10],[95,17,108,10,"default"],[95,24,108,10],[95,26,109,4],[95,63,109,41],[95,65,110,4],[95,119,111,2],[95,120,111,3],[96,2,112,0],[97,2,114,0],[97,11,114,9,"applyDurationThresholds"],[97,34,114,32,"applyDurationThresholds"],[97,35,114,32],[97,37,114,35],[98,4,115,2],[98,8,115,8,"durationThresholds"],[98,26,115,62],[98,29,115,65,"Array"],[98,34,115,70],[98,35,115,71,"from"],[98,39,115,75],[98,40,116,4,"registeredObservers"],[98,59,116,23],[98,60,116,24,"values"],[98,66,116,30],[98,67,116,31],[98,68,117,2],[98,69,117,3],[98,70,118,5,"map"],[98,73,118,8],[98,74,118,9,"config"],[98,80,118,15],[98,84,118,19,"config"],[98,90,118,25],[98,91,118,26,"entryTypes"],[98,101,118,36],[98,102,118,37],[98,103,119,5,"reduce"],[98,109,119,11],[98,110,120,6],[98,111,120,7,"accumulator"],[98,122,120,18],[98,124,120,20,"currentValue"],[98,136,120,32],[98,141,120,37,"union"],[98,146,120,42],[98,147,120,43,"accumulator"],[98,158,120,54],[98,160,120,56,"currentValue"],[98,172,120,68],[98,173,120,69],[98,175,121,6],[98,179,121,10,"Map"],[98,182,121,13],[98,183,121,14],[98,184,122,4],[98,185,122,5],[99,4,124,2],[99,13,124,2,"_ref3"],[99,18,124,2],[99,22,124,47,"durationThresholds"],[99,40,124,65],[99,42,124,67],[100,6,124,67],[100,10,124,67,"_ref4"],[100,15,124,67],[100,22,124,67,"_slicedToArray"],[100,36,124,67],[100,37,124,67,"default"],[100,44,124,67],[100,46,124,67,"_ref3"],[100,51,124,67],[101,6,124,67],[101,10,124,14,"entryType"],[101,19,124,23],[101,22,124,23,"_ref4"],[101,27,124,23],[102,6,124,23],[102,10,124,25,"durationThreshold"],[102,27,124,42],[102,30,124,42,"_ref4"],[102,35,124,42],[103,6,125,4,"NativePerformanceObserver"],[103,31,125,29],[103,32,125,29,"default"],[103,39,125,29],[103,41,125,31,"setDurationThreshold"],[103,61,125,51],[103,62,126,6],[103,66,126,6,"performanceEntryTypeToRaw"],[103,86,126,31],[103,87,126,31,"performanceEntryTypeToRaw"],[103,112,126,31],[103,114,126,32,"entryType"],[103,123,126,41],[103,124,126,42],[103,126,127,6,"durationThreshold"],[103,143,127,23],[103,147,127,27],[103,148,128,4],[103,149,128,5],[104,4,129,2],[105,2,130,0],[106,2,130,1],[106,6,152,21,"PerformanceObserver"],[106,25,152,40],[107,4,156,2],[107,13,156,2,"PerformanceObserver"],[107,33,156,14,"callback"],[107,41,156,51],[107,43,156,53],[108,6,156,53],[108,10,156,53,"_classCallCheck"],[108,25,156,53],[108,26,156,53,"default"],[108,33,156,53],[108,41,156,53,"PerformanceObserver"],[108,60,156,53],[109,6,157,4],[109,10,157,8],[109,11,157,9,"_callback"],[109,20,157,18],[109,23,157,21,"callback"],[109,31,157,29],[110,4,158,2],[111,4,158,3],[111,15,158,3,"_createClass"],[111,27,158,3],[111,28,158,3,"default"],[111,35,158,3],[111,37,158,3,"PerformanceObserver"],[111,56,158,3],[112,6,158,3,"key"],[112,9,158,3],[113,6,158,3,"value"],[113,11,158,3],[113,13,160,2],[113,22,160,2,"observe"],[113,29,160,9,"observe"],[113,30,160,10,"options"],[113,37,160,42],[113,39,160,50],[114,8,161,4],[114,12,161,8],[114,13,161,9,"NativePerformanceObserver"],[114,38,161,34],[114,39,161,34,"default"],[114,46,161,34],[114,48,161,36],[115,10,162,6,"warnNoNativePerformanceObserver"],[115,41,162,37],[115,42,162,38],[115,43,162,39],[116,10,163,6],[117,8,164,4],[118,8,166,4],[118,12,166,8],[118,13,166,9,"_validateObserveOptions"],[118,36,166,32],[118,37,166,33,"options"],[118,44,166,40],[118,45,166,41],[119,8,168,4],[119,12,168,8,"requestedEntryTypes"],[119,31,168,27],[120,8,170,4],[120,12,170,8,"options"],[120,19,170,15],[120,20,170,16,"entryTypes"],[120,30,170,26],[120,32,170,28],[121,10,171,6],[121,14,171,10],[121,15,171,11,"_type"],[121,20,171,16],[121,23,171,19],[121,33,171,29],[122,10,172,6,"requestedEntryTypes"],[122,29,172,25],[122,32,172,28],[122,36,172,32,"Map"],[122,39,172,35],[122,40,173,8,"options"],[122,47,173,15],[122,48,173,16,"entryTypes"],[122,58,173,26],[122,59,173,27,"map"],[122,62,173,30],[122,63,173,31,"t"],[122,64,173,32],[122,68,173,36],[122,69,173,37,"t"],[122,70,173,38],[122,72,173,40,"undefined"],[122,81,173,49],[122,82,173,50],[122,83,174,6],[122,84,174,7],[123,8,175,4],[123,9,175,5],[123,15,175,11],[124,10,176,6],[124,14,176,10],[124,15,176,11,"_type"],[124,20,176,16],[124,23,176,19],[124,31,176,27],[125,10,177,6,"requestedEntryTypes"],[125,29,177,25],[125,32,177,28],[125,36,177,32,"Map"],[125,39,177,35],[125,40,177,36],[125,41,178,8],[125,42,178,9,"options"],[125,49,178,16],[125,50,178,17,"type"],[125,54,178,21],[125,56,178,23,"options"],[125,63,178,30],[125,64,178,31,"durationThreshold"],[125,81,178,48],[125,82,178,49],[125,83,179,7],[125,84,179,8],[126,8,180,4],[127,8,184,4],[127,12,184,10,"currentEntryTypes"],[127,29,184,27],[127,32,184,30,"registeredObservers"],[127,51,184,49],[127,52,184,50,"get"],[127,55,184,53],[127,56,184,54],[127,60,184,58],[127,61,184,59],[127,63,184,61,"entryTypes"],[127,73,184,71],[128,8,185,4],[128,12,185,10,"nextEntryTypes"],[128,26,185,24],[128,29,185,27,"currentEntryTypes"],[128,46,185,44],[128,49,186,8,"union"],[128,54,186,13],[128,55,186,14,"requestedEntryTypes"],[128,74,186,33],[128,76,186,35,"currentEntryTypes"],[128,93,186,52],[128,94,186,53],[128,97,187,8,"requestedEntryTypes"],[128,116,187,27],[129,8,190,4],[129,12,190,8,"currentEntryTypes"],[129,29,190,25],[129,33,190,29,"currentEntryTypes"],[129,50,190,46],[129,51,190,47,"size"],[129,55,190,51],[129,60,190,56,"nextEntryTypes"],[129,74,190,70],[129,75,190,71,"size"],[129,79,190,75],[129,81,190,77],[130,10,191,6],[131,8,192,4],[132,8,194,4,"registeredObservers"],[132,27,194,23],[132,28,194,24,"set"],[132,31,194,27],[132,32,194,28],[132,36,194,32],[132,38,194,34],[133,10,195,6,"callback"],[133,18,195,14],[133,20,195,16],[133,24,195,20],[133,25,195,21,"_callback"],[133,34,195,30],[134,10,196,6,"entryTypes"],[134,20,196,16],[134,22,196,18,"nextEntryTypes"],[135,8,197,4],[135,9,197,5],[135,10,197,6],[136,8,199,4],[136,12,199,8],[136,13,199,9,"isOnPerformanceEntryCallbackSet"],[136,44,199,40],[136,46,199,42],[137,10,200,6,"NativePerformanceObserver"],[137,35,200,31],[137,36,200,31,"default"],[137,43,200,31],[137,44,200,32,"setOnPerformanceEntryCallback"],[137,73,200,61],[137,74,201,8,"onPerformanceEntry"],[137,92,202,6],[137,93,202,7],[138,10,203,6,"isOnPerformanceEntryCallbackSet"],[138,41,203,37],[138,44,203,40],[138,48,203,44],[139,8,204,4],[140,8,208,4],[140,12,208,10,"newEntryTypes"],[140,25,208,23],[140,28,208,26,"currentEntryTypes"],[140,45,208,43],[140,48,209,8,"difference"],[140,58,209,18],[140,59,210,10],[140,63,210,14,"Set"],[140,66,210,17],[140,67,210,18,"requestedEntryTypes"],[140,86,210,37],[140,87,210,38,"keys"],[140,91,210,42],[140,92,210,43],[140,93,210,44],[140,94,210,45],[140,96,211,10],[140,100,211,14,"Set"],[140,103,211,17],[140,104,211,18,"currentEntryTypes"],[140,121,211,35],[140,122,211,36,"keys"],[140,126,211,40],[140,127,211,41],[140,128,211,42],[140,129,212,8],[140,130,212,9],[140,133,213,8],[140,137,213,12,"Set"],[140,140,213,15],[140,141,213,16,"requestedEntryTypes"],[140,160,213,35],[140,161,213,36,"keys"],[140,165,213,40],[140,166,213,41],[140,167,213,42],[140,168,213,43],[141,8,214,4],[141,13,214,9],[141,17,214,15,"type"],[141,21,214,19],[141,25,214,23,"newEntryTypes"],[141,38,214,36],[141,40,214,38],[142,10,215,6],[142,14,215,10],[142,15,215,11,"observerCountPerEntryType"],[142,40,215,36],[142,41,215,37,"has"],[142,44,215,40],[142,45,215,41,"type"],[142,49,215,45],[142,50,215,46],[142,52,215,48],[143,12,216,8],[143,16,216,14,"rawType"],[143,23,216,21],[143,26,216,24],[143,30,216,24,"performanceEntryTypeToRaw"],[143,50,216,49],[143,51,216,49,"performanceEntryTypeToRaw"],[143,76,216,49],[143,78,216,50,"type"],[143,82,216,54],[143,83,216,55],[144,12,217,8,"NativePerformanceObserver"],[144,37,217,33],[144,38,217,33,"default"],[144,45,217,33],[144,46,217,34,"startReporting"],[144,60,217,48],[144,61,217,49,"rawType"],[144,68,217,56],[144,69,217,57],[145,10,218,6],[146,10,219,6,"observerCountPerEntryType"],[146,35,219,31],[146,36,219,32,"set"],[146,39,219,35],[146,40,220,8,"type"],[146,44,220,12],[146,46,221,8],[146,47,221,9,"observerCountPerEntryType"],[146,72,221,34],[146,73,221,35,"get"],[146,76,221,38],[146,77,221,39,"type"],[146,81,221,43],[146,82,221,44],[146,86,221,48],[146,87,221,49],[146,91,221,53],[146,92,222,6],[146,93,222,7],[147,8,223,4],[148,8,224,4,"applyDurationThresholds"],[148,31,224,27],[148,32,224,28],[148,33,224,29],[149,6,225,2],[150,4,225,3],[151,6,225,3,"key"],[151,9,225,3],[152,6,225,3,"value"],[152,11,225,3],[152,13,227,2],[152,22,227,2,"disconnect"],[152,32,227,12,"disconnect"],[152,33,227,12],[152,35,227,21],[153,8,228,4],[153,12,228,8],[153,13,228,9,"NativePerformanceObserver"],[153,38,228,34],[153,39,228,34,"default"],[153,46,228,34],[153,48,228,36],[154,10,229,6,"warnNoNativePerformanceObserver"],[154,41,229,37],[154,42,229,38],[154,43,229,39],[155,10,230,6],[156,8,231,4],[157,8,233,4],[157,12,233,10,"observerConfig"],[157,26,233,24],[157,29,233,27,"registeredObservers"],[157,48,233,46],[157,49,233,47,"get"],[157,52,233,50],[157,53,233,51],[157,57,233,55],[157,58,233,56],[158,8,234,4],[158,12,234,8],[158,13,234,9,"observerConfig"],[158,27,234,23],[158,29,234,25],[159,10,235,6],[160,8,236,4],[161,8,239,4],[161,13,239,9],[161,17,239,15,"type"],[161,21,239,19],[161,25,239,23,"observerConfig"],[161,39,239,37],[161,40,239,38,"entryTypes"],[161,50,239,48],[161,51,239,49,"keys"],[161,55,239,53],[161,56,239,54],[161,57,239,55],[161,59,239,57],[162,10,240,6],[162,14,240,12,"numberOfObserversForThisType"],[162,42,240,40],[162,45,241,8,"observerCountPerEntryType"],[162,70,241,33],[162,71,241,34,"get"],[162,74,241,37],[162,75,241,38,"type"],[162,79,241,42],[162,80,241,43],[162,84,241,47],[162,85,241,48],[163,10,242,6],[163,14,242,10,"numberOfObserversForThisType"],[163,42,242,38],[163,47,242,43],[163,48,242,44],[163,50,242,46],[164,12,243,8,"observerCountPerEntryType"],[164,37,243,33],[164,38,243,34,"delete"],[164,44,243,40],[164,45,243,41,"type"],[164,49,243,45],[164,50,243,46],[165,12,244,8,"NativePerformanceObserver"],[165,37,244,33],[165,38,244,33,"default"],[165,45,244,33],[165,46,244,34,"stopReporting"],[165,59,244,47],[165,60,245,10],[165,64,245,10,"performanceEntryTypeToRaw"],[165,84,245,35],[165,85,245,35,"performanceEntryTypeToRaw"],[165,110,245,35],[165,112,245,36,"type"],[165,116,245,40],[165,117,246,8],[165,118,246,9],[166,10,247,6],[166,11,247,7],[166,17,247,13],[166,21,247,17,"numberOfObserversForThisType"],[166,49,247,45],[166,54,247,50],[166,55,247,51],[166,57,247,53],[167,12,248,8,"observerCountPerEntryType"],[167,37,248,33],[167,38,248,34,"set"],[167,41,248,37],[167,42,248,38,"type"],[167,46,248,42],[167,48,248,44,"numberOfObserversForThisType"],[167,76,248,72],[167,79,248,75],[167,80,248,76],[167,81,248,77],[168,10,249,6],[169,8,250,4],[170,8,253,4,"registeredObservers"],[170,27,253,23],[170,28,253,24,"delete"],[170,34,253,30],[170,35,253,31],[170,39,253,35],[170,40,253,36],[171,8,254,4],[171,12,254,8,"registeredObservers"],[171,31,254,27],[171,32,254,28,"size"],[171,36,254,32],[171,41,254,37],[171,42,254,38],[171,44,254,40],[172,10,255,6,"NativePerformanceObserver"],[172,35,255,31],[172,36,255,31,"default"],[172,43,255,31],[172,44,255,32,"setOnPerformanceEntryCallback"],[172,73,255,61],[172,74,255,62,"undefined"],[172,83,255,71],[172,84,255,72],[173,10,256,6,"isOnPerformanceEntryCallbackSet"],[173,41,256,37],[173,44,256,40],[173,49,256,45],[174,8,257,4],[175,8,259,4,"applyDurationThresholds"],[175,31,259,27],[175,32,259,28],[175,33,259,29],[176,6,260,2],[177,4,260,3],[178,6,260,3,"key"],[178,9,260,3],[179,6,260,3,"value"],[179,11,260,3],[179,13,262,2],[179,22,262,2,"_validateObserveOptions"],[179,45,262,25,"_validateObserveOptions"],[179,46,262,26,"options"],[179,53,262,58],[179,55,262,66],[180,8,263,4],[180,12,263,11,"type"],[180,16,263,15],[180,19,263,50,"options"],[180,26,263,57],[180,27,263,11,"type"],[180,31,263,15],[181,10,263,17,"entryTypes"],[181,20,263,27],[181,23,263,50,"options"],[181,30,263,57],[181,31,263,17,"entryTypes"],[181,41,263,27],[182,10,263,29,"durationThreshold"],[182,27,263,46],[182,30,263,50,"options"],[182,37,263,57],[182,38,263,29,"durationThreshold"],[182,55,263,46],[183,8,265,4],[183,12,265,8],[183,13,265,9,"type"],[183,17,265,13],[183,21,265,17],[183,22,265,18,"entryTypes"],[183,32,265,28],[183,34,265,30],[184,10,266,6],[184,16,266,12],[184,20,266,16,"TypeError"],[184,29,266,25],[184,30,267,8],[184,156,268,6],[184,157,268,7],[185,8,269,4],[186,8,271,4],[186,12,271,8,"entryTypes"],[186,22,271,18],[186,26,271,22,"type"],[186,30,271,26],[186,32,271,28],[187,10,272,6],[187,16,272,12],[187,20,272,16,"TypeError"],[187,29,272,25],[187,30,273,8],[187,153,274,6],[187,154,274,7],[188,8,275,4],[189,8,277,4],[189,12,277,8],[189,16,277,12],[189,17,277,13,"_type"],[189,22,277,18],[189,27,277,23],[189,37,277,33],[189,41,277,37,"type"],[189,45,277,41],[189,47,277,43],[190,10,278,6],[190,16,278,12],[190,20,278,16,"Error"],[190,25,278,21],[190,26,279,8],[190,183,280,6],[190,184,280,7],[191,8,281,4],[192,8,283,4],[192,12,283,8],[192,16,283,12],[192,17,283,13,"_type"],[192,22,283,18],[192,27,283,23],[192,35,283,31],[192,39,283,35,"entryTypes"],[192,49,283,45],[192,51,283,47],[193,10,284,6],[193,16,284,12],[193,20,284,16,"Error"],[193,25,284,21],[193,26,285,8],[193,194,286,6],[193,195,286,7],[194,8,287,4],[195,8,289,4],[195,12,289,8,"entryTypes"],[195,22,289,18],[195,26,289,22,"durationThreshold"],[195,43,289,39],[195,48,289,44,"undefined"],[195,57,289,53],[195,59,289,55],[196,10,290,6],[196,16,290,12],[196,20,290,16,"TypeError"],[196,29,290,25],[196,30,291,8],[196,169,292,6],[196,170,292,7],[197,8,293,4],[198,6,294,2],[199,4,294,3],[200,2,294,3],[201,2,152,21,"PerformanceObserver"],[201,21,152,40],[201,22,296,9,"supportedEntryTypes"],[201,41,296,28],[201,44,297,4,"Object"],[201,50,297,10],[201,51,297,11,"freeze"],[201,57,297,17],[201,58,297,18],[201,59,297,19],[201,65,297,25],[201,67,297,27],[201,76,297,36],[201,78,297,38],[201,85,297,45],[201,86,297,46],[201,87,297,47],[202,2,301,0],[202,11,301,9,"union"],[202,16,301,14,"union"],[202,17,302,2,"a"],[202,18,302,29],[202,20,303,2,"b"],[202,21,303,29],[202,23,304,19],[203,4,305,2],[203,8,305,8,"res"],[203,11,305,11],[203,14,305,14],[203,18,305,18,"Map"],[203,21,305,21],[203,22,305,34],[203,23,305,35],[204,4,306,2],[204,13,306,2,"_ref5"],[204,18,306,2],[204,22,306,23,"a"],[204,23,306,24],[204,25,306,26],[205,6,306,26],[205,10,306,26,"_ref6"],[205,15,306,26],[205,22,306,26,"_slicedToArray"],[205,36,306,26],[205,37,306,26,"default"],[205,44,306,26],[205,46,306,26,"_ref5"],[205,51,306,26],[206,6,306,26],[206,10,306,14,"k"],[206,11,306,15],[206,14,306,15,"_ref6"],[206,19,306,15],[207,6,306,15],[207,10,306,17,"v"],[207,11,306,18],[207,14,306,18,"_ref6"],[207,19,306,18],[208,6,307,4],[208,10,307,8],[208,11,307,9,"b"],[208,12,307,10],[208,13,307,11,"has"],[208,16,307,14],[208,17,307,15,"k"],[208,18,307,16],[208,19,307,17],[208,21,307,19],[209,8,308,6,"res"],[209,11,308,9],[209,12,308,10,"set"],[209,15,308,13],[209,16,308,14,"k"],[209,17,308,15],[209,19,308,17,"v"],[209,20,308,18],[209,21,308,19],[210,6,309,4],[210,7,309,5],[210,13,309,11],[211,8,310,6,"res"],[211,11,310,9],[211,12,310,10,"set"],[211,15,310,13],[211,16,310,14,"k"],[211,17,310,15],[211,19,310,17,"Math"],[211,23,310,21],[211,24,310,22,"min"],[211,27,310,25],[211,28,310,26,"v"],[211,29,310,27],[211,33,310,31],[211,34,310,32],[211,36,310,34,"b"],[211,37,310,35],[211,38,310,36,"get"],[211,41,310,39],[211,42,310,40,"k"],[211,43,310,41],[211,44,310,42],[211,48,310,46],[211,49,310,47],[211,50,310,48],[211,51,310,49],[212,6,311,4],[213,4,312,2],[214,4,313,2],[214,11,313,9,"res"],[214,14,313,12],[215,2,314,0],[216,2,316,0],[216,11,316,9,"difference"],[216,21,316,19,"difference"],[216,22,316,23,"a"],[216,23,316,41],[216,25,316,43,"b"],[216,26,316,61],[216,28,316,71],[217,4,317,2],[217,11,317,9],[217,15,317,13,"Set"],[217,18,317,16],[217,19,317,17],[217,20,317,18],[217,23,317,21,"a"],[217,24,317,22],[217,25,317,23],[217,26,317,24,"filter"],[217,32,317,30],[217,33,317,31,"x"],[217,34,317,32],[217,38,317,36],[217,39,317,37,"b"],[217,40,317,38],[217,41,317,39,"has"],[217,44,317,42],[217,45,317,43,"x"],[217,46,317,44],[217,47,317,45],[217,48,317,46],[217,49,317,47],[218,2,318,0],[219,0,318,1],[219,3]],"functionMap":{"names":["<global>","PerformanceObserverEntryList","PerformanceObserverEntryList#constructor","PerformanceObserverEntryList#getEntries","PerformanceObserverEntryList#getEntriesByType","_entries.filter$argument_0","PerformanceObserverEntryList#getEntriesByName","onPerformanceEntry","entries.filter$argument_0","warnNoNativePerformanceObserver","applyDurationThresholds","Array.from.map$argument_0","Array.from.map.reduce$argument_0","PerformanceObserver","constructor","observe","options.entryTypes.map$argument_0","disconnect","_validateObserveOptions","union","difference","filter$argument_0"],"mappings":"AAA;OCsB;ECG;GDE;EEE;GFE;EGE;gCCC,iCD;GHC;EKE;kCDK,4BC;QDG,wDC;GLG;CDC;2BO8B;oECY;KDM;CPO;OSE;CTK;AUE;SCI,2BD;MEE,+DF;CVU;easB;ECI;GDE;EEE;+BCa,mBD;GFoD;EIE;GJiC;EKE;GLgC;CbI;AmBG;CnBa;AoBE;+BCC,cD"},"hasCjsExports":false},"type":"js/module"}]}