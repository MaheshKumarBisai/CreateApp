{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"./fork/getStateFromPath","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":27,"index":177},"end":{"line":4,"column":61,"index":211}}],"key":"V4iyoeyvpTZsSAmoAwG5TMhmjcM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\").default;\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getNormalizedStatePath = exports.getRouteInfoFromState = void 0;\n  var getStateFromPath_1 = require(_dependencyMap[1], \"./fork/getStateFromPath\");\n  function getRouteInfoFromState(getPathFromState, state, baseUrl) {\n    var _getPathFromState = getPathFromState(state, false),\n      path = _getPathFromState.path;\n    var qualified = getPathFromState(state, true);\n    return {\n      // TODO: This may have a predefined origin attached in the future.\n      unstable_globalHref: path,\n      pathname: (0, getStateFromPath_1.stripBaseUrl)(path, baseUrl).split('?')['0'],\n      isIndex: isIndexPath(state),\n      ...getNormalizedStatePath(qualified, baseUrl)\n    };\n  }\n  exports.getRouteInfoFromState = getRouteInfoFromState;\n  function isIndexPath(state) {\n    var route = state.routes[state.index ?? state.routes.length - 1];\n    if (route.state) {\n      return isIndexPath(route.state);\n    }\n    // Index routes on the same level as a layout do not have `index` in their name\n    if (route.params && 'screen' in route.params) {\n      return route.params.screen === 'index';\n    }\n    // The `params` key will not exist if there are no params\n    // So we need to do a positive lookahead to check if the route ends with /index\n    // Nested routes that are hoisted will have a name ending with /index\n    // e.g name could be /user/[id]/index\n    if (route.name.match(/.+\\/index$/)) return true;\n    // The state will either have params (because there are multiple _layout) or it will be hoisted with a name\n    // If we don't match the above cases, then it's not an index route\n    return false;\n  }\n  // TODO: Split up getPathFromState to return all this info at once.\n  function getNormalizedStatePath(_ref, baseUrl) {\n    var statePath = _ref.path,\n      params = _ref.params;\n    var _statePath$split = statePath.split('?'),\n      _statePath$split2 = _slicedToArray(_statePath$split, 1),\n      pathname = _statePath$split2[0];\n    return {\n      // Strip empty path at the start\n      segments: (0, getStateFromPath_1.stripBaseUrl)(pathname, baseUrl).split('/').filter(Boolean).map(decodeURIComponent),\n      // TODO: This is not efficient, we should generate based on the state instead\n      // of converting to string then back to object\n      params: Object.entries(params).reduce((prev, _ref2) => {\n        var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          value = _ref3[1];\n        if (Array.isArray(value)) {\n          prev[key] = value.map(v => {\n            try {\n              return decodeURIComponent(v);\n            } catch {\n              return v;\n            }\n          });\n        } else {\n          try {\n            prev[key] = decodeURIComponent(value);\n          } catch {\n            prev[key] = value;\n          }\n        }\n        return prev;\n      }, {})\n    };\n  }\n  exports.getNormalizedStatePath = getNormalizedStatePath;\n});","lineCount":77,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[4,90,1,13,"default"],[4,97,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,3,0,"exports"],[8,9,3,7],[8,10,3,8,"getNormalizedStatePath"],[8,32,3,30],[8,35,3,33,"exports"],[8,42,3,40],[8,43,3,41,"getRouteInfoFromState"],[8,64,3,62],[8,67,3,65],[8,72,3,70],[8,73,3,71],[9,2,4,0],[9,6,4,6,"getStateFromPath_1"],[9,24,4,24],[9,27,4,27,"require"],[9,34,4,34],[9,35,4,34,"_dependencyMap"],[9,49,4,34],[9,79,4,60],[9,80,4,61],[10,2,5,0],[10,11,5,9,"getRouteInfoFromState"],[10,32,5,30,"getRouteInfoFromState"],[10,33,5,31,"getPathFromState"],[10,49,5,47],[10,51,5,49,"state"],[10,56,5,54],[10,58,5,56,"baseUrl"],[10,65,5,63],[10,67,5,65],[11,4,6,4],[11,8,6,4,"_getPathFromState"],[11,25,6,4],[11,28,6,21,"getPathFromState"],[11,44,6,37],[11,45,6,38,"state"],[11,50,6,43],[11,52,6,45],[11,57,6,50],[11,58,6,51],[12,6,6,12,"path"],[12,10,6,16],[12,13,6,16,"_getPathFromState"],[12,30,6,16],[12,31,6,12,"path"],[12,35,6,16],[13,4,7,4],[13,8,7,10,"qualified"],[13,17,7,19],[13,20,7,22,"getPathFromState"],[13,36,7,38],[13,37,7,39,"state"],[13,42,7,44],[13,44,7,46],[13,48,7,50],[13,49,7,51],[14,4,8,4],[14,11,8,11],[15,6,9,8],[16,6,10,8,"unstable_globalHref"],[16,25,10,27],[16,27,10,29,"path"],[16,31,10,33],[17,6,11,8,"pathname"],[17,14,11,16],[17,16,11,18],[17,17,11,19],[17,18,11,20],[17,20,11,22,"getStateFromPath_1"],[17,38,11,40],[17,39,11,41,"stripBaseUrl"],[17,51,11,53],[17,53,11,55,"path"],[17,57,11,59],[17,59,11,61,"baseUrl"],[17,66,11,68],[17,67,11,69],[17,68,11,70,"split"],[17,73,11,75],[17,74,11,76],[17,77,11,79],[17,78,11,80],[17,79,11,81],[17,82,11,84],[17,83,11,85],[18,6,12,8,"isIndex"],[18,13,12,15],[18,15,12,17,"isIndexPath"],[18,26,12,28],[18,27,12,29,"state"],[18,32,12,34],[18,33,12,35],[19,6,13,8],[19,9,13,11,"getNormalizedStatePath"],[19,31,13,33],[19,32,13,34,"qualified"],[19,41,13,43],[19,43,13,45,"baseUrl"],[19,50,13,52],[20,4,14,4],[20,5,14,5],[21,2,15,0],[22,2,16,0,"exports"],[22,9,16,7],[22,10,16,8,"getRouteInfoFromState"],[22,31,16,29],[22,34,16,32,"getRouteInfoFromState"],[22,55,16,53],[23,2,17,0],[23,11,17,9,"isIndexPath"],[23,22,17,20,"isIndexPath"],[23,23,17,21,"state"],[23,28,17,26],[23,30,17,28],[24,4,18,4],[24,8,18,10,"route"],[24,13,18,15],[24,16,18,18,"state"],[24,21,18,23],[24,22,18,24,"routes"],[24,28,18,30],[24,29,18,31,"state"],[24,34,18,36],[24,35,18,37,"index"],[24,40,18,42],[24,44,18,46,"state"],[24,49,18,51],[24,50,18,52,"routes"],[24,56,18,58],[24,57,18,59,"length"],[24,63,18,65],[24,66,18,68],[24,67,18,69],[24,68,18,70],[25,4,19,4],[25,8,19,8,"route"],[25,13,19,13],[25,14,19,14,"state"],[25,19,19,19],[25,21,19,21],[26,6,20,8],[26,13,20,15,"isIndexPath"],[26,24,20,26],[26,25,20,27,"route"],[26,30,20,32],[26,31,20,33,"state"],[26,36,20,38],[26,37,20,39],[27,4,21,4],[28,4,22,4],[29,4,23,4],[29,8,23,8,"route"],[29,13,23,13],[29,14,23,14,"params"],[29,20,23,20],[29,24,23,24],[29,32,23,32],[29,36,23,36,"route"],[29,41,23,41],[29,42,23,42,"params"],[29,48,23,48],[29,50,23,50],[30,6,24,8],[30,13,24,15,"route"],[30,18,24,20],[30,19,24,21,"params"],[30,25,24,27],[30,26,24,28,"screen"],[30,32,24,34],[30,37,24,39],[30,44,24,46],[31,4,25,4],[32,4,26,4],[33,4,27,4],[34,4,28,4],[35,4,29,4],[36,4,30,4],[36,8,30,8,"route"],[36,13,30,13],[36,14,30,14,"name"],[36,18,30,18],[36,19,30,19,"match"],[36,24,30,24],[36,25,30,25],[36,37,30,37],[36,38,30,38],[36,40,31,8],[36,47,31,15],[36,51,31,19],[37,4,32,4],[38,4,33,4],[39,4,34,4],[39,11,34,11],[39,16,34,16],[40,2,35,0],[41,2,36,0],[42,2,37,0],[42,11,37,9,"getNormalizedStatePath"],[42,33,37,31,"getNormalizedStatePath"],[42,34,37,31,"_ref"],[42,38,37,31],[42,40,37,62,"baseUrl"],[42,47,37,69],[42,49,37,71],[43,4,37,71],[43,8,37,40,"statePath"],[43,17,37,49],[43,20,37,49,"_ref"],[43,24,37,49],[43,25,37,34,"path"],[43,29,37,38],[44,6,37,51,"params"],[44,12,37,57],[44,15,37,57,"_ref"],[44,19,37,57],[44,20,37,51,"params"],[44,26,37,57],[45,4,38,4],[45,8,38,4,"_statePath$split"],[45,24,38,4],[45,27,38,23,"statePath"],[45,36,38,32],[45,37,38,33,"split"],[45,42,38,38],[45,43,38,39],[45,46,38,42],[45,47,38,43],[46,6,38,43,"_statePath$split2"],[46,23,38,43],[46,26,38,43,"_slicedToArray"],[46,40,38,43],[46,41,38,43,"_statePath$split"],[46,57,38,43],[47,6,38,11,"pathname"],[47,14,38,19],[47,17,38,19,"_statePath$split2"],[47,34,38,19],[48,4,39,4],[48,11,39,11],[49,6,40,8],[50,6,41,8,"segments"],[50,14,41,16],[50,16,41,18],[50,17,41,19],[50,18,41,20],[50,20,41,22,"getStateFromPath_1"],[50,38,41,40],[50,39,41,41,"stripBaseUrl"],[50,51,41,53],[50,53,41,55,"pathname"],[50,61,41,63],[50,63,41,65,"baseUrl"],[50,70,41,72],[50,71,41,73],[50,72,41,74,"split"],[50,77,41,79],[50,78,41,80],[50,81,41,83],[50,82,41,84],[50,83,41,85,"filter"],[50,89,41,91],[50,90,41,92,"Boolean"],[50,97,41,99],[50,98,41,100],[50,99,41,101,"map"],[50,102,41,104],[50,103,41,105,"decodeURIComponent"],[50,121,41,123],[50,122,41,124],[51,6,42,8],[52,6,43,8],[53,6,44,8,"params"],[53,12,44,14],[53,14,44,16,"Object"],[53,20,44,22],[53,21,44,23,"entries"],[53,28,44,30],[53,29,44,31,"params"],[53,35,44,37],[53,36,44,38],[53,37,44,39,"reduce"],[53,43,44,45],[53,44,44,46],[53,45,44,47,"prev"],[53,49,44,51],[53,51,44,51,"_ref2"],[53,56,44,51],[53,61,44,70],[54,8,44,70],[54,12,44,70,"_ref3"],[54,17,44,70],[54,20,44,70,"_slicedToArray"],[54,34,44,70],[54,35,44,70,"_ref2"],[54,40,44,70],[55,10,44,54,"key"],[55,13,44,57],[55,16,44,57,"_ref3"],[55,21,44,57],[56,10,44,59,"value"],[56,15,44,64],[56,18,44,64,"_ref3"],[56,23,44,64],[57,8,45,12],[57,12,45,16,"Array"],[57,17,45,21],[57,18,45,22,"isArray"],[57,25,45,29],[57,26,45,30,"value"],[57,31,45,35],[57,32,45,36],[57,34,45,38],[58,10,46,16,"prev"],[58,14,46,20],[58,15,46,21,"key"],[58,18,46,24],[58,19,46,25],[58,22,46,28,"value"],[58,27,46,33],[58,28,46,34,"map"],[58,31,46,37],[58,32,46,39,"v"],[58,33,46,40],[58,37,46,45],[59,12,47,20],[59,16,47,24],[60,14,48,24],[60,21,48,31,"decodeURIComponent"],[60,39,48,49],[60,40,48,50,"v"],[60,41,48,51],[60,42,48,52],[61,12,49,20],[61,13,49,21],[61,14,50,20],[61,20,50,26],[62,14,51,24],[62,21,51,31,"v"],[62,22,51,32],[63,12,52,20],[64,10,53,16],[64,11,53,17],[64,12,53,18],[65,8,54,12],[65,9,54,13],[65,15,55,17],[66,10,56,16],[66,14,56,20],[67,12,57,20,"prev"],[67,16,57,24],[67,17,57,25,"key"],[67,20,57,28],[67,21,57,29],[67,24,57,32,"decodeURIComponent"],[67,42,57,50],[67,43,57,51,"value"],[67,48,57,56],[67,49,57,57],[68,10,58,16],[68,11,58,17],[68,12,59,16],[68,18,59,22],[69,12,60,20,"prev"],[69,16,60,24],[69,17,60,25,"key"],[69,20,60,28],[69,21,60,29],[69,24,60,32,"value"],[69,29,60,37],[70,10,61,16],[71,8,62,12],[72,8,63,12],[72,15,63,19,"prev"],[72,19,63,23],[73,6,64,8],[73,7,64,9],[73,9,64,11],[73,10,64,12],[73,11,64,13],[74,4,65,4],[74,5,65,5],[75,2,66,0],[76,2,67,0,"exports"],[76,9,67,7],[76,10,67,8,"getNormalizedStatePath"],[76,32,67,30],[76,35,67,33,"getNormalizedStatePath"],[76,57,67,55],[77,0,67,56],[77,3]],"functionMap":{"names":["<global>","getRouteInfoFromState","isIndexPath","getNormalizedStatePath","Object.entries.reduce$argument_0","value.map$argument_0"],"mappings":"AAA;ACI;CDU;AEE;CFkB;AGE;8CCO;sCCE;iBDO;SDW;CHE"},"hasCjsExports":true},"type":"js/module"}]}