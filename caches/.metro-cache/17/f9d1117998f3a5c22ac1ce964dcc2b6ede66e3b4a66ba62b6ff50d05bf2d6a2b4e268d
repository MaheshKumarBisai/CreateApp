{"dependencies":[{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":43,"index":43}}],"key":"SN8WVal79eAEDQEpzmVqVAy5JJs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _nanoidNonSecure = require(_dependencyMap[0], \"nanoid/non-secure\");\n  /**\n   * Base router object that can be used when writing custom routers.\n   * This provides few helper methods to handle common actions such as `RESET`.\n   */\n  var BaseRouter = {\n    getStateForAction(state, action) {\n      switch (action.type) {\n        case 'SET_PARAMS':\n          {\n            var index = action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            return {\n              ...state,\n              routes: state.routes.map((r, i) => i === index ? {\n                ...r,\n                params: {\n                  ...r.params,\n                  ...action.payload.params\n                }\n              } : r)\n            };\n          }\n        case 'RESET':\n          {\n            var nextState = action.payload;\n            if (nextState.routes.length === 0 || nextState.routes.some(route => !state.routeNames.includes(route.name))) {\n              return null;\n            }\n            if (nextState.stale === false) {\n              if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(name => !state.routeNames.includes(name))) {\n                return null;\n              }\n              return {\n                ...nextState,\n                routes: nextState.routes.map(route => route.key ? route : {\n                  ...route,\n                  key: `${route.name}-${(0, _nanoidNonSecure.nanoid)()}`\n                })\n              };\n            }\n            return nextState;\n          }\n        default:\n          return null;\n      }\n    },\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    }\n  };\n  var _default = BaseRouter;\n});","lineCount":67,"map":[[7,2,81,0,"Object"],[7,8,81,0],[7,9,81,0,"defineProperty"],[7,23,81,0],[7,24,81,0,"exports"],[7,31,81,0],[8,4,81,0,"enumerable"],[8,14,81,0],[9,4,81,0,"get"],[9,7,81,0],[9,18,81,0,"get"],[9,19,81,0],[10,6,81,0],[10,13,81,0,"_default"],[10,21,81,0],[11,4,81,0],[12,2,81,0],[13,2,1,0],[13,6,1,0,"_nanoidNonSecure"],[13,22,1,0],[13,25,1,0,"require"],[13,32,1,0],[13,33,1,0,"_dependencyMap"],[13,47,1,0],[14,2,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,2,13,0],[18,6,13,6,"BaseRouter"],[18,16,13,16],[18,19,13,19],[19,4,14,2,"getStateForAction"],[19,21,14,19,"getStateForAction"],[19,22,15,4,"state"],[19,27,15,16],[19,29,16,4,"action"],[19,35,16,34],[19,37,17,40],[20,6,18,4],[20,14,18,12,"action"],[20,20,18,18],[20,21,18,19,"type"],[20,25,18,23],[21,8,19,6],[21,13,19,11],[21,25,19,23],[22,10,19,25],[23,12,20,8],[23,16,20,14,"index"],[23,21,20,19],[23,24,20,22,"action"],[23,30,20,28],[23,31,20,29,"source"],[23,37,20,35],[23,40,21,12,"state"],[23,45,21,17],[23,46,21,18,"routes"],[23,52,21,24],[23,53,21,25,"findIndex"],[23,62,21,34],[23,63,21,36,"r"],[23,64,21,37],[23,68,21,42,"r"],[23,69,21,43],[23,70,21,44,"key"],[23,73,21,47],[23,78,21,52,"action"],[23,84,21,58],[23,85,21,59,"source"],[23,91,21,65],[23,92,21,66],[23,95,22,12,"state"],[23,100,22,17],[23,101,22,18,"index"],[23,106,22,23],[24,12,24,8],[24,16,24,12,"index"],[24,21,24,17],[24,26,24,22],[24,27,24,23],[24,28,24,24],[24,30,24,26],[25,14,25,10],[25,21,25,17],[25,25,25,21],[26,12,26,8],[27,12,28,8],[27,19,28,15],[28,14,29,10],[28,17,29,13,"state"],[28,22,29,18],[29,14,30,10,"routes"],[29,20,30,16],[29,22,30,18,"state"],[29,27,30,23],[29,28,30,24,"routes"],[29,34,30,30],[29,35,30,31,"map"],[29,38,30,34],[29,39,30,35],[29,40,30,36,"r"],[29,41,30,37],[29,43,30,39,"i"],[29,44,30,40],[29,49,31,12,"i"],[29,50,31,13],[29,55,31,18,"index"],[29,60,31,23],[29,63,32,16],[30,16,32,18],[30,19,32,21,"r"],[30,20,32,22],[31,16,32,24,"params"],[31,22,32,30],[31,24,32,32],[32,18,32,34],[32,21,32,37,"r"],[32,22,32,38],[32,23,32,39,"params"],[32,29,32,45],[33,18,32,47],[33,21,32,50,"action"],[33,27,32,56],[33,28,32,57,"payload"],[33,35,32,64],[33,36,32,65,"params"],[34,16,32,72],[35,14,32,74],[35,15,32,75],[35,18,33,16,"r"],[35,19,34,10],[36,12,35,8],[36,13,35,9],[37,10,36,6],[38,8,38,6],[38,13,38,11],[38,20,38,18],[39,10,38,20],[40,12,39,8],[40,16,39,14,"nextState"],[40,25,39,23],[40,28,39,26,"action"],[40,34,39,32],[40,35,39,33,"payload"],[40,42,39,71],[41,12,41,8],[41,16,42,10,"nextState"],[41,25,42,19],[41,26,42,20,"routes"],[41,32,42,26],[41,33,42,27,"length"],[41,39,42,33],[41,44,42,38],[41,45,42,39],[41,49,43,10,"nextState"],[41,58,43,19],[41,59,43,20,"routes"],[41,65,43,26],[41,66,43,27,"some"],[41,70,43,31],[41,71,44,13,"route"],[41,76,44,36],[41,80,44,41],[41,81,44,42,"state"],[41,86,44,47],[41,87,44,48,"routeNames"],[41,97,44,58],[41,98,44,59,"includes"],[41,106,44,67],[41,107,44,68,"route"],[41,112,44,73],[41,113,44,74,"name"],[41,117,44,78],[41,118,45,10],[41,119,45,11],[41,121,46,10],[42,14,47,10],[42,21,47,17],[42,25,47,21],[43,12,48,8],[44,12,50,8],[44,16,50,12,"nextState"],[44,25,50,21],[44,26,50,22,"stale"],[44,31,50,27],[44,36,50,32],[44,41,50,37],[44,43,50,39],[45,14,51,10],[45,18,52,12,"state"],[45,23,52,17],[45,24,52,18,"routeNames"],[45,34,52,28],[45,35,52,29,"length"],[45,41,52,35],[45,46,52,40,"nextState"],[45,55,52,49],[45,56,52,50,"routeNames"],[45,66,52,60],[45,67,52,61,"length"],[45,73,52,67],[45,77,53,12,"nextState"],[45,86,53,21],[45,87,53,22,"routeNames"],[45,97,53,32],[45,98,53,33,"some"],[45,102,53,37],[45,103,54,15,"name"],[45,107,54,19],[45,111,54,24],[45,112,54,25,"state"],[45,117,54,30],[45,118,54,31,"routeNames"],[45,128,54,41],[45,129,54,42,"includes"],[45,137,54,50],[45,138,54,51,"name"],[45,142,54,55],[45,143,55,12],[45,144,55,13],[45,146,56,12],[46,16,57,12],[46,23,57,19],[46,27,57,23],[47,14,58,10],[48,14,60,10],[48,21,60,17],[49,16,61,12],[49,19,61,15,"nextState"],[49,28,61,24],[50,16,62,12,"routes"],[50,22,62,18],[50,24,62,20,"nextState"],[50,33,62,29],[50,34,62,30,"routes"],[50,40,62,36],[50,41,62,37,"map"],[50,44,62,40],[50,45,62,42,"route"],[50,50,62,47],[50,54,63,14,"route"],[50,59,63,19],[50,60,63,20,"key"],[50,63,63,23],[50,66,63,26,"route"],[50,71,63,31],[50,74,63,34],[51,18,63,36],[51,21,63,39,"route"],[51,26,63,44],[52,18,63,46,"key"],[52,21,63,49],[52,23,63,51],[52,26,63,54,"route"],[52,31,63,59],[52,32,63,60,"name"],[52,36,63,64],[52,40,63,68],[52,44,63,68,"nanoid"],[52,60,63,74],[52,61,63,74,"nanoid"],[52,67,63,74],[52,69,63,75],[52,70,63,76],[53,16,63,79],[53,17,64,12],[54,14,65,10],[54,15,65,11],[55,12,66,8],[56,12,68,8],[56,19,68,15,"nextState"],[56,28,68,24],[57,10,69,6],[58,8,71,6],[59,10,72,8],[59,17,72,15],[59,21,72,19],[60,6,73,4],[61,4,74,2],[61,5,74,3],[62,4,76,2,"shouldActionChangeFocus"],[62,27,76,25,"shouldActionChangeFocus"],[62,28,76,26,"action"],[62,34,76,56],[62,36,76,58],[63,6,77,4],[63,13,77,11,"action"],[63,19,77,17],[63,20,77,18,"type"],[63,24,77,22],[63,29,77,27],[63,39,77,37],[64,4,78,2],[65,2,79,0],[65,3,79,1],[66,2,81,0],[66,6,81,0,"_default"],[66,14,81,0],[66,17,81,15,"BaseRouter"],[66,27,81,25],[67,0,81,26],[67,3]],"functionMap":{"names":["<global>","getStateForAction","state.routes.findIndex$argument_0","state.routes.map$argument_0","nextState.routes.some$argument_0","nextState.routeNames.some$argument_0","nextState.routes.map$argument_0","shouldActionChangeFocus"],"mappings":"AAA;ECa;mCCO,8BD;mCES;iBFG;YGW,mEH;cIU,0CJ;yCKQ;gFLC;GDW;EOE;GPE"},"hasCjsExports":false},"type":"js/module"}]}