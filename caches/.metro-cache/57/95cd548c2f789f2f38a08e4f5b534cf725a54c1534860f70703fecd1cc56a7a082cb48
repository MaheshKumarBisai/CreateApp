{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":19,"index":181},"end":{"line":4,"column":40,"index":202}}],"key":"89ylKT57ef0l7ma8+p1HhPaMj94=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getReactNavigationConfig = exports.getReactNavigationScreensConfig = void 0;\n  var matchers_1 = require(_dependencyMap[0], \"./matchers\");\n  // `[page]` -> `:page`\n  // `page` -> `page`\n  function convertDynamicRouteToReactNavigation(segment) {\n    // NOTE(EvanBacon): To support shared routes we preserve group segments.\n    if (segment === 'index') {\n      return '';\n    }\n    if (segment === '+not-found') {\n      return '*not-found';\n    }\n    var rest = (0, matchers_1.matchDeepDynamicRouteName)(segment);\n    if (rest != null) {\n      return '*' + rest;\n    }\n    var dynamicName = (0, matchers_1.matchDynamicName)(segment);\n    if (dynamicName != null) {\n      return `:${dynamicName}`;\n    }\n    return segment;\n  }\n  function parseRouteSegments(segments) {\n    return (\n      // NOTE(EvanBacon): When there are nested routes without layouts\n      // the node.route will be something like `app/home/index`\n      // this needs to be split to ensure each segment is parsed correctly.\n      segments.split('/')\n      // Convert each segment to a React Navigation format.\n      .map(convertDynamicRouteToReactNavigation)\n      // Remove any empty paths from groups or index routes.\n      .filter(Boolean)\n      // Join to return as a path.\n      .join('/')\n    );\n  }\n  function convertRouteNodeToScreen(node, metaOnly) {\n    var path = parseRouteSegments(node.route);\n    if (!node.children.length) {\n      if (!metaOnly) {\n        return {\n          path,\n          screens: {},\n          _route: node\n        };\n      }\n      return path;\n    }\n    var screens = getReactNavigationScreensConfig(node.children, metaOnly);\n    var screen = {\n      path,\n      screens,\n      // NOTE(EvanBacon): This is bad because it forces all Layout Routes\n      // to be loaded into memory. We should move towards a system where\n      // the initial route name is either loaded asynchronously in the Layout Route\n      // or defined via a file system convention.\n      initialRouteName: node.initialRouteName\n    };\n    if (!metaOnly) {\n      screen._route = node;\n    }\n    return screen;\n  }\n  function getReactNavigationScreensConfig(nodes, metaOnly) {\n    return Object.fromEntries(nodes.map(node => [node.route, convertRouteNodeToScreen(node, metaOnly)]));\n  }\n  exports.getReactNavigationScreensConfig = getReactNavigationScreensConfig;\n  function getReactNavigationConfig(routes, metaOnly) {\n    return {\n      initialRouteName: routes.initialRouteName,\n      screens: getReactNavigationScreensConfig(routes.children, metaOnly)\n    };\n  }\n  exports.getReactNavigationConfig = getReactNavigationConfig;\n});","lineCount":81,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getReactNavigationConfig"],[7,34,3,32],[7,37,3,35,"exports"],[7,44,3,42],[7,45,3,43,"getReactNavigationScreensConfig"],[7,76,3,74],[7,79,3,77],[7,84,3,82],[7,85,3,83],[8,2,4,0],[8,6,4,6,"matchers_1"],[8,16,4,16],[8,19,4,19,"require"],[8,26,4,26],[8,27,4,26,"_dependencyMap"],[8,41,4,26],[8,58,4,39],[8,59,4,40],[9,2,5,0],[10,2,6,0],[11,2,7,0],[11,11,7,9,"convertDynamicRouteToReactNavigation"],[11,47,7,45,"convertDynamicRouteToReactNavigation"],[11,48,7,46,"segment"],[11,55,7,53],[11,57,7,55],[12,4,8,4],[13,4,9,4],[13,8,9,8,"segment"],[13,15,9,15],[13,20,9,20],[13,27,9,27],[13,29,9,29],[14,6,10,8],[14,13,10,15],[14,15,10,17],[15,4,11,4],[16,4,12,4],[16,8,12,8,"segment"],[16,15,12,15],[16,20,12,20],[16,32,12,32],[16,34,12,34],[17,6,13,8],[17,13,13,15],[17,25,13,27],[18,4,14,4],[19,4,15,4],[19,8,15,10,"rest"],[19,12,15,14],[19,15,15,17],[19,16,15,18],[19,17,15,19],[19,19,15,21,"matchers_1"],[19,29,15,31],[19,30,15,32,"matchDeepDynamicRouteName"],[19,55,15,57],[19,57,15,59,"segment"],[19,64,15,66],[19,65,15,67],[20,4,16,4],[20,8,16,8,"rest"],[20,12,16,12],[20,16,16,16],[20,20,16,20],[20,22,16,22],[21,6,17,8],[21,13,17,15],[21,16,17,18],[21,19,17,21,"rest"],[21,23,17,25],[22,4,18,4],[23,4,19,4],[23,8,19,10,"dynamicName"],[23,19,19,21],[23,22,19,24],[23,23,19,25],[23,24,19,26],[23,26,19,28,"matchers_1"],[23,36,19,38],[23,37,19,39,"matchDynamicName"],[23,53,19,55],[23,55,19,57,"segment"],[23,62,19,64],[23,63,19,65],[24,4,20,4],[24,8,20,8,"dynamicName"],[24,19,20,19],[24,23,20,23],[24,27,20,27],[24,29,20,29],[25,6,21,8],[25,13,21,15],[25,17,21,19,"dynamicName"],[25,28,21,30],[25,30,21,32],[26,4,22,4],[27,4,23,4],[27,11,23,11,"segment"],[27,18,23,18],[28,2,24,0],[29,2,25,0],[29,11,25,9,"parseRouteSegments"],[29,29,25,27,"parseRouteSegments"],[29,30,25,28,"segments"],[29,38,25,36],[29,40,25,38],[30,4,26,4],[31,6,27,4],[32,6,28,4],[33,6,29,4],[34,6,30,4,"segments"],[34,14,30,12],[34,15,31,9,"split"],[34,20,31,14],[34,21,31,15],[34,24,31,18],[35,6,32,8],[36,6,32,8],[36,7,33,9,"map"],[36,10,33,12],[36,11,33,13,"convertDynamicRouteToReactNavigation"],[36,47,33,49],[37,6,34,8],[38,6,34,8],[38,7,35,9,"filter"],[38,13,35,15],[38,14,35,16,"Boolean"],[38,21,35,23],[39,6,36,8],[40,6,36,8],[40,7,37,9,"join"],[40,11,37,13],[40,12,37,14],[40,15,37,17],[41,4,37,18],[42,2,38,0],[43,2,39,0],[43,11,39,9,"convertRouteNodeToScreen"],[43,35,39,33,"convertRouteNodeToScreen"],[43,36,39,34,"node"],[43,40,39,38],[43,42,39,40,"metaOnly"],[43,50,39,48],[43,52,39,50],[44,4,40,4],[44,8,40,10,"path"],[44,12,40,14],[44,15,40,17,"parseRouteSegments"],[44,33,40,35],[44,34,40,36,"node"],[44,38,40,40],[44,39,40,41,"route"],[44,44,40,46],[44,45,40,47],[45,4,41,4],[45,8,41,8],[45,9,41,9,"node"],[45,13,41,13],[45,14,41,14,"children"],[45,22,41,22],[45,23,41,23,"length"],[45,29,41,29],[45,31,41,31],[46,6,42,8],[46,10,42,12],[46,11,42,13,"metaOnly"],[46,19,42,21],[46,21,42,23],[47,8,43,12],[47,15,43,19],[48,10,44,16,"path"],[48,14,44,20],[49,10,45,16,"screens"],[49,17,45,23],[49,19,45,25],[49,20,45,26],[49,21,45,27],[50,10,46,16,"_route"],[50,16,46,22],[50,18,46,24,"node"],[51,8,47,12],[51,9,47,13],[52,6,48,8],[53,6,49,8],[53,13,49,15,"path"],[53,17,49,19],[54,4,50,4],[55,4,51,4],[55,8,51,10,"screens"],[55,15,51,17],[55,18,51,20,"getReactNavigationScreensConfig"],[55,49,51,51],[55,50,51,52,"node"],[55,54,51,56],[55,55,51,57,"children"],[55,63,51,65],[55,65,51,67,"metaOnly"],[55,73,51,75],[55,74,51,76],[56,4,52,4],[56,8,52,10,"screen"],[56,14,52,16],[56,17,52,19],[57,6,53,8,"path"],[57,10,53,12],[58,6,54,8,"screens"],[58,13,54,15],[59,6,55,8],[60,6,56,8],[61,6,57,8],[62,6,58,8],[63,6,59,8,"initialRouteName"],[63,22,59,24],[63,24,59,26,"node"],[63,28,59,30],[63,29,59,31,"initialRouteName"],[64,4,60,4],[64,5,60,5],[65,4,61,4],[65,8,61,8],[65,9,61,9,"metaOnly"],[65,17,61,17],[65,19,61,19],[66,6,62,8,"screen"],[66,12,62,14],[66,13,62,15,"_route"],[66,19,62,21],[66,22,62,24,"node"],[66,26,62,28],[67,4,63,4],[68,4,64,4],[68,11,64,11,"screen"],[68,17,64,17],[69,2,65,0],[70,2,66,0],[70,11,66,9,"getReactNavigationScreensConfig"],[70,42,66,40,"getReactNavigationScreensConfig"],[70,43,66,41,"nodes"],[70,48,66,46],[70,50,66,48,"metaOnly"],[70,58,66,56],[70,60,66,58],[71,4,67,4],[71,11,67,11,"Object"],[71,17,67,17],[71,18,67,18,"fromEntries"],[71,29,67,29],[71,30,67,30,"nodes"],[71,35,67,35],[71,36,67,36,"map"],[71,39,67,39],[71,40,67,41,"node"],[71,44,67,45],[71,48,67,50],[71,49,67,51,"node"],[71,53,67,55],[71,54,67,56,"route"],[71,59,67,61],[71,61,67,63,"convertRouteNodeToScreen"],[71,85,67,87],[71,86,67,88,"node"],[71,90,67,92],[71,92,67,94,"metaOnly"],[71,100,67,102],[71,101,67,103],[71,102,67,104],[71,103,67,105],[71,104,67,106],[72,2,68,0],[73,2,69,0,"exports"],[73,9,69,7],[73,10,69,8,"getReactNavigationScreensConfig"],[73,41,69,39],[73,44,69,42,"getReactNavigationScreensConfig"],[73,75,69,73],[74,2,70,0],[74,11,70,9,"getReactNavigationConfig"],[74,35,70,33,"getReactNavigationConfig"],[74,36,70,34,"routes"],[74,42,70,40],[74,44,70,42,"metaOnly"],[74,52,70,50],[74,54,70,52],[75,4,71,4],[75,11,71,11],[76,6,72,8,"initialRouteName"],[76,22,72,24],[76,24,72,26,"routes"],[76,30,72,32],[76,31,72,33,"initialRouteName"],[76,47,72,49],[77,6,73,8,"screens"],[77,13,73,15],[77,15,73,17,"getReactNavigationScreensConfig"],[77,46,73,48],[77,47,73,49,"routes"],[77,53,73,55],[77,54,73,56,"children"],[77,62,73,64],[77,64,73,66,"metaOnly"],[77,72,73,74],[78,4,74,4],[78,5,74,5],[79,2,75,0],[80,2,76,0,"exports"],[80,9,76,7],[80,10,76,8,"getReactNavigationConfig"],[80,34,76,32],[80,37,76,35,"getReactNavigationConfig"],[80,61,76,59],[81,0,76,60],[81,3]],"functionMap":{"names":["<global>","convertDynamicRouteToReactNavigation","parseRouteSegments","convertRouteNodeToScreen","getReactNavigationScreensConfig","nodes.map$argument_0","getReactNavigationConfig"],"mappings":"AAA;ACM;CDiB;AEC;CFa;AGC;CH0B;AIC;wCCC,gED;CJC;AME;CNK"},"hasCjsExports":true},"type":"js/module"}]}