{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":47,"index":376},"end":{"line":7,"column":78,"index":407}}],"key":"14QBo/6I2jfYu7Ct29OWBvp5ENM=","exportNames":["*"],"imports":1}},{"name":"./findFocusedRoute","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":27,"index":437},"end":{"line":8,"column":56,"index":466}}],"key":"JPe8xQMI59bnv97OB8syZ4AgEvA=","exportNames":["*"],"imports":1}},{"name":"./validatePathConfig","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":45,"index":513},"end":{"line":9,"column":76,"index":544}}],"key":"0F8GIhgh9FMVcNu3BBSsU0c5578=","exportNames":["*"],"imports":1}},{"name":"../matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":19,"index":566},"end":{"line":10,"column":41,"index":588}}],"key":"lD+VV93WPi10A3qv5+9m649ytvA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\").default;\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.stripBaseUrl = exports.getMatchableRouteConfigs = exports.getUrlWithReactNavigationConcessions = void 0;\n  var escape_string_regexp_1 = __importDefault(require(_dependencyMap[1], \"escape-string-regexp\"));\n  var findFocusedRoute_1 = require(_dependencyMap[2], \"./findFocusedRoute\");\n  var validatePathConfig_1 = __importDefault(require(_dependencyMap[3], \"./validatePathConfig\"));\n  var matchers_1 = require(_dependencyMap[4], \"../matchers\");\n  function getUrlWithReactNavigationConcessions(path) {\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    var parsed;\n    try {\n      parsed = new URL(path, 'https://phony.example');\n    } catch {\n      // Do nothing with invalid URLs.\n      return {\n        nonstandardPathname: '',\n        inputPathnameWithoutHash: '',\n        url: null\n      };\n    }\n    var pathname = parsed.pathname;\n    // Make sure there is a trailing slash\n    return {\n      // The slashes are at the end, not the beginning\n      nonstandardPathname: stripBaseUrl(pathname, baseUrl).replace(/^\\/+/g, '').replace(/\\/+$/g, '') + '/',\n      url: parsed\n    };\n  }\n  exports.getUrlWithReactNavigationConcessions = getUrlWithReactNavigationConcessions;\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _getMatchableRouteCon = getMatchableRouteConfigs(options, this?.routeInfo?.segments),\n      initialRoutes = _getMatchableRouteCon.initialRoutes,\n      configs = _getMatchableRouteCon.configs;\n    return getStateFromPathWithConfigs(path, configs, initialRoutes);\n  }\n  exports.default = getStateFromPath;\n  function getMatchableRouteConfigs(options) {\n    var previousSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    if (options) {\n      (0, validatePathConfig_1.default)(options);\n    }\n    var screens = options?.screens;\n    // Expo Router disallows usage without a linking config.\n    if (!screens) {\n      throw Error(\"You must pass a 'screens' object to 'getStateFromPath' to generate a path.\");\n    }\n    // This will be mutated...\n    var initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    // Create a normalized configs array which will be easier to use.\n    var converted = Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes)).flat();\n    var resolvedInitialPatterns = initialRoutes.map(route => joinPaths(...route.parentScreens, route.initialRouteName));\n    var convertedWithInitial = converted.map(config => ({\n      ...config,\n      // TODO(EvanBacon): Probably a safer way to do this\n      // Mark initial routes to give them potential priority over other routes that match.\n      isInitial: resolvedInitialPatterns.includes(config.routeNames.join('/'))\n    }));\n    // Sort in order of resolution. This is extremely important for the algorithm to work.\n    var configs = convertedWithInitial.sort((a, b) => sortConfigs(a, b, previousSegments));\n    // Assert any duplicates before we start parsing.\n    assertConfigDuplicates(configs);\n    return {\n      configs,\n      initialRoutes\n    };\n  }\n  exports.getMatchableRouteConfigs = getMatchableRouteConfigs;\n  function assertConfigDuplicates(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      // NOTE(EvanBacon): Uses the regex pattern as key to detect duplicate slugs.\n      var indexedKey = config.regex?.toString() ?? config.pattern;\n      var alpha = acc[indexedKey];\n      // NOTE(EvanBacon): Skips checking nodes that have children.\n      if (alpha && !alpha.hasChildren && !config.hasChildren) {\n        var a = alpha.routeNames;\n        var b = config.routeNames;\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          // NOTE(EvanBacon): Adds more context to the error message since we know about the\n          // file-based routing.\n          var last = config.pattern.split('/').pop();\n          if (!last?.match(/^\\*not-found$/)) {\n            var routeType = last?.startsWith(':') ? 'dynamic route' : last?.startsWith('*') ? 'dynamic-rest route' : 'route';\n            throw new Error(`The ${routeType} pattern '${config.pattern || '/'}' resolves to both '${alpha.userReadableName}' and '${config.userReadableName}'. Patterns must be unique and cannot resolve to more than one route.`);\n          }\n        }\n      }\n      return Object.assign(acc, {\n        [indexedKey]: config\n      });\n    }, {});\n  }\n  function sortConfigs(a, b) {\n    var previousSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n    // If one of the patterns starts with the other, it's more exhaustive\n    // So move it up\n    if (a.pattern.startsWith(b.pattern) &&\n    // NOTE(EvanBacon): This is a hack to make sure that `*` is always at the end\n    b.screen !== 'index') {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern) && a.screen !== 'index') {\n      return 1;\n    }\n    // NOTE(EvanBacon): Here we append `index` if the screen was `index` so the length is the same\n    // as a slug or wildcard when nested more than one level deep.\n    // This is so we can compare the length of the pattern, e.g. `foo/*` > `foo` vs `*` < ``.\n    var aParts = a.pattern.split('/')\n    // Strip out group names to ensure they don't affect the priority.\n    .filter(part => (0, matchers_1.matchGroupName)(part) == null);\n    if (a.screen === 'index' || a.screen.match(/\\/index$/)) {\n      aParts.push('index');\n    }\n    var bParts = b.pattern.split('/').filter(part => (0, matchers_1.matchGroupName)(part) == null);\n    if (b.screen === 'index' || b.screen.match(/\\/index$/)) {\n      bParts.push('index');\n    }\n    // When we navigate, we need to stay within groups as close as possible\n    // Hence, a route is sorted based upon is similiarity to the current state\n    var similarToPreviousA = previousSegments.filter((value, index) => {\n      return value === a.expandedRouteNames[index] && value.startsWith('(') && value.endsWith(')');\n    });\n    var similarToPreviousB = previousSegments.filter((value, index) => {\n      return value === b.expandedRouteNames[index] && value.startsWith('(') && value.endsWith(')');\n    });\n    if ((similarToPreviousA.length > 0 || similarToPreviousB.length > 0) && similarToPreviousA.length !== similarToPreviousB.length) {\n      // They both match to some degree, so pick the one that matches more\n      return similarToPreviousB.length - similarToPreviousA.length;\n    }\n    for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      // if b is longer, b get higher priority\n      if (aParts[i] == null) {\n        return 1;\n      }\n      // if a is longer, a get higher priority\n      if (bParts[i] == null) {\n        return -1;\n      }\n      var aWildCard = aParts[i].startsWith('*');\n      var bWildCard = bParts[i].startsWith('*');\n      // if both are wildcard we compare next component\n      if (aWildCard && bWildCard) {\n        var aNotFound = aParts[i].match(/^[*]not-found$/);\n        var bNotFound = bParts[i].match(/^[*]not-found$/);\n        if (aNotFound && bNotFound) {\n          continue;\n        } else if (aNotFound) {\n          return 1;\n        } else if (bNotFound) {\n          return -1;\n        }\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aWildCard) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bWildCard) {\n        return -1;\n      }\n      var aSlug = aParts[i].startsWith(':');\n      var bSlug = bParts[i].startsWith(':');\n      // if both are wildcard we compare next component\n      if (aSlug && bSlug) {\n        var _aNotFound = aParts[i].match(/^[*]not-found$/);\n        var _bNotFound = bParts[i].match(/^[*]not-found$/);\n        if (_aNotFound && _bNotFound) {\n          continue;\n        } else if (_aNotFound) {\n          return 1;\n        } else if (_bNotFound) {\n          return -1;\n        }\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aSlug) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bSlug) {\n        return -1;\n      }\n    }\n    // Sort initial routes with a higher priority than routes which will push more screens\n    // this ensures shared routes go to the shortest path.\n    if (a.isInitial && !b.isInitial) {\n      return -1;\n    }\n    if (!a.isInitial && b.isInitial) {\n      return 1;\n    }\n    return bParts.length - aParts.length;\n  }\n  function getStateFromEmptyPathWithConfigs(path, hash, configs, initialRoutes) {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    // NOTE(EvanBacon): We only care about matching leaf nodes.\n    var leafNodes = configs.filter(config => !config.hasChildren).map(value => {\n      return {\n        ...value,\n        // Collapse all levels of group segments before testing.\n        // This enables `app/(one)/(two)/index.js` to be matched.\n        path: (0, matchers_1.stripGroupSegmentsFromPath)(value.path)\n      };\n    });\n    var match = leafNodes.find(config =>\n    // NOTE(EvanBacon): Test leaf node index routes that either don't have a regex or match an empty string.\n    config.path === '' && (!config.regex || config.regex.test(''))) ?? leafNodes.find(config =>\n    // NOTE(EvanBacon): Test leaf node dynamic routes that match an empty string.\n    config.path.startsWith(':') && config.regex.test('')) ??\n    // NOTE(EvanBacon): Test leaf node deep dynamic routes that match a slash.\n    // This should be done last to enable dynamic routes having a higher priority.\n    leafNodes.find(config => config.path.startsWith('*') && config.regex.test('/'));\n    if (!match) {\n      return undefined;\n    }\n    var routes = match.routeNames.map(name => {\n      if (!match._route) {\n        return {\n          name\n        };\n      }\n      return {\n        name,\n        _route: match._route\n      };\n    });\n    return createNestedStateObject(path, hash, routes, configs, initialRoutes);\n  }\n  function getStateFromPathWithConfigs(path, configs, initialRoutes) {\n    var baseUrl = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    var formattedPaths = getUrlWithReactNavigationConcessions(path);\n    if (!formattedPaths.url) return;\n    var cleanPath = stripBaseUrl((0, matchers_1.stripGroupSegmentsFromPath)(formattedPaths.url.pathname), baseUrl) + formattedPaths.url.search;\n    if (!path.startsWith('/')) cleanPath = cleanPath.slice(1);\n    if (formattedPaths.nonstandardPathname === '/') {\n      return getStateFromEmptyPathWithConfigs(cleanPath, formattedPaths.url.hash.slice(1), configs, initialRoutes);\n    }\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var routes = matchAgainstConfigs(formattedPaths.nonstandardPathname, configs);\n    if (routes == null) {\n      return undefined;\n    }\n    // This will always be empty if full path matched\n    return createNestedStateObject(cleanPath, formattedPaths.url.hash.slice(1), routes, configs, initialRoutes);\n  }\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  function matchAgainstConfigs(remaining, configs) {\n    var routes;\n    var remainingPath = remaining;\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function (config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n        // If our regex matches, we need to extract params from the path\n        if (!match) {\n          return 0; // continue\n        }\n        // TODO: Add support for wildcard routes\n        var matchedParams = config.pattern?.split('/').filter(p => p.match(/^[:*]/)).reduce((acc, p, i) => {\n          if (p.match(/^\\*/)) {\n            return {\n              ...acc,\n              [p]: match[(i + 1) * 2] //?.replace(/\\//, \"\"),\n            };\n          }\n          return Object.assign(acc, {\n            // The param segments appear every second item starting from 2 in the regex match result.\n            // This will only work if we ensure groups aren't included in the match.\n            [p]: match[(i + 1) * 2]?.replace(/\\//, '')\n          });\n        }, {});\n        var routeFromName = name => {\n          var config = configs.find(c => c.screen === name);\n          if (!config?.path) {\n            return {\n              name\n            };\n          }\n          var segments = config.path.split('/');\n          var params = {};\n          segments.filter(p => p.match(/^[:*]/)).forEach(p => {\n            var value = matchedParams[p];\n            if (value) {\n              if (p.match(/^\\*/)) {\n                // Convert to an array before providing as a route.\n                value = value?.split('/').filter(Boolean);\n              }\n              var key = p.replace(/^[:*]/, '').replace(/\\?$/, '');\n              params[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n          });\n          if (params && Object.keys(params).length) {\n            return {\n              name,\n              params\n            };\n          }\n          return {\n            name\n          };\n        };\n        routes = config.routeNames.map(name => {\n          if (!config._route) {\n            return {\n              ...routeFromName(name)\n            };\n          }\n          return {\n            ...routeFromName(name),\n            _route: config._route\n          };\n        });\n        // TODO(EvanBacon): Maybe we should warn / assert if multiple slugs use the same param name.\n        var combinedParams = routes.reduce((acc, r) => Object.assign(acc, r.params), {});\n        var hasCombinedParams = Object.keys(combinedParams).length > 0;\n        // Combine all params so a route `[foo]/[bar]/other.js` has access to `{ foo, bar }`\n        routes = routes.map(r => {\n          if (hasCombinedParams) {\n            r.params = combinedParams;\n          }\n          return r;\n        });\n        remainingPath = remainingPath.replace(match[1], '');\n        return 1; // break\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return routes;\n  }\n  function equalHeritage(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n      if (a[i].localeCompare(b[i]) !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  var createNormalizedConfigs = function (screen, routeConfig) {\n    var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var initials = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var parentScreens = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      // TODO: This should never happen with the addition of `_route`\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(screen, routeNames, pattern, config, false));\n    } else if (typeof config === 'object') {\n      var _pattern;\n      var _route = config._route;\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.screens ? !!Object.keys(config.screens)?.length : false, config.parse, _route));\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], _pattern ?? parentPattern);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  function formatRegexPattern(it) {\n    // Allow spaces in file path names.\n    it = it.replace(' ', '%20');\n    if (it.startsWith(':')) {\n      // TODO: Remove unused match group\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    } else if (it.startsWith('*')) {\n      return `((.*\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    // Strip groups from the matcher\n    if ((0, matchers_1.matchGroupName)(it) != null) {\n      // Groups are optional segments\n      // this enables us to match `/bar` and `/(foo)/bar` for the same route\n      // NOTE(EvanBacon): Ignore this match in the regex to avoid capturing the group\n      return `(?:${(0, escape_string_regexp_1.default)(it)}\\\\/)?`;\n    }\n    return (0, escape_string_regexp_1.default)(it) + `\\\\/`;\n  }\n  var createConfigItem = (screen, routeNames, pattern, path, hasChildren, parse, _route) => {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    var regex = pattern ? new RegExp(`^(${pattern.split('/').map(formatRegexPattern).join('')})$`) : undefined;\n    return {\n      screen,\n      regex,\n      pattern,\n      path,\n      // The routeNames array is mutated, so copy it to keep the current state\n      routeNames: [...routeNames],\n      expandedRouteNames: screen.includes('/') ? [...routeNames.slice(0, -1), ...screen.split('/')] : [...routeNames],\n      parse,\n      userReadableName: [...routeNames.slice(0, -1), path || screen].join('/'),\n      hasChildren: !!hasChildren,\n      _route\n    };\n  };\n  var findParseConfigForRoute = (routeName, routeConfigs) => {\n    for (var config of routeConfigs) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (var config of initialRoutes) {\n      if (equalHeritage(parentScreens, config.parentScreens)) {\n        // If the parents are the same but the route name doesn't match the initial route\n        // then we return the initial route.\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n    return undefined;\n  };\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = (route, isEmpty, initialRoute) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, route]\n        };\n      }\n      return {\n        routes: [route]\n      };\n    }\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute,\n          params: route.params\n        }, {\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n    return {\n      routes: [{\n        ...route,\n        state: {\n          routes: []\n        }\n      }]\n    };\n  };\n  var createNestedStateObject = (path, hash, routes, routeConfigs, initialRoutes) => {\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(route, routes.length === 0, initialRoute);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(route, routes.length === 0, initialRoute);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, findFocusedRoute_1.findFocusedRoute)(state);\n    // Remove groups from the path while preserving a trailing slash.\n    route.path = path;\n    var params = parseQueryParams(route.path, findParseConfigForRoute(route.name, routeConfigs));\n    if (params) {\n      route.params = Object.assign(Object.create(null), route.params);\n      for (var _ref of Object.entries(params)) {\n        var _ref2 = _slicedToArray(_ref, 2);\n        var name = _ref2[0];\n        var value = _ref2[1];\n        if (route.params?.[name]) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(`Route '/${route.name}' with param '${name}' was specified both in the path and as a param, removing from path`);\n          }\n        }\n        if (!route.params?.[name]) {\n          route.params[name] = value;\n          continue;\n        }\n      }\n      if (Object.keys(route.params).length === 0) {\n        delete route.params;\n      }\n    }\n    if (hash) {\n      route.params = Object.assign(Object.create(null), route.params);\n      route.params['#'] = hash;\n    }\n    return state;\n  };\n  var parseQueryParams = (path, parseConfig) => {\n    var query = path.split('?')[1];\n    var searchParams = new URLSearchParams(query);\n    var params = Object.fromEntries(\n    // @ts-ignore: [Symbol.iterator] is indeed, available on every platform.\n    searchParams);\n    if (parseConfig) {\n      Object.keys(params).forEach(name => {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n  var baseUrlCache = new Map();\n  function getBaseUrlRegex(baseUrl) {\n    if (baseUrlCache.has(baseUrl)) {\n      return baseUrlCache.get(baseUrl);\n    }\n    var regex = new RegExp(`^\\\\/?${(0, escape_string_regexp_1.default)(baseUrl)}`, 'g');\n    baseUrlCache.set(baseUrl, regex);\n    return regex;\n  }\n  function stripBaseUrl(path) {\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (process.env.NODE_ENV !== 'development') {\n      if (baseUrl) {\n        var reg = getBaseUrlRegex(baseUrl);\n        return path.replace(/^\\/+/g, '/').replace(reg, '');\n      }\n    }\n    return path;\n  }\n  exports.stripBaseUrl = stripBaseUrl;\n});","lineCount":626,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[4,90,1,13,"default"],[4,97,1,13],[5,2,2,0],[5,6,2,4,"__importDefault"],[5,21,2,19],[5,24,2,23],[5,28,2,27],[5,32,2,31],[5,36,2,35],[5,37,2,36,"__importDefault"],[5,52,2,51],[5,56,2,56],[5,66,2,66,"mod"],[5,69,2,69],[5,71,2,71],[6,4,3,4],[6,11,3,12,"mod"],[6,14,3,15],[6,18,3,19,"mod"],[6,21,3,22],[6,22,3,23,"__esModule"],[6,32,3,33],[6,35,3,37,"mod"],[6,38,3,40],[6,41,3,43],[7,6,3,45],[7,15,3,54],[7,17,3,56,"mod"],[8,4,3,60],[8,5,3,61],[9,2,4,0],[9,3,4,1],[10,2,5,0,"Object"],[10,8,5,6],[10,9,5,7,"defineProperty"],[10,23,5,21],[10,24,5,22,"exports"],[10,31,5,29],[10,33,5,31],[10,45,5,43],[10,47,5,45],[11,4,5,47,"value"],[11,9,5,52],[11,11,5,54],[12,2,5,59],[12,3,5,60],[12,4,5,61],[13,2,6,0,"exports"],[13,9,6,7],[13,10,6,8,"stripBaseUrl"],[13,22,6,20],[13,25,6,23,"exports"],[13,32,6,30],[13,33,6,31,"getMatchableRouteConfigs"],[13,57,6,55],[13,60,6,58,"exports"],[13,67,6,65],[13,68,6,66,"getUrlWithReactNavigationConcessions"],[13,104,6,102],[13,107,6,105],[13,112,6,110],[13,113,6,111],[14,2,7,0],[14,6,7,6,"escape_string_regexp_1"],[14,28,7,28],[14,31,7,31,"__importDefault"],[14,46,7,46],[14,47,7,47,"require"],[14,54,7,54],[14,55,7,54,"_dependencyMap"],[14,69,7,54],[14,96,7,77],[14,97,7,78],[14,98,7,79],[15,2,8,0],[15,6,8,6,"findFocusedRoute_1"],[15,24,8,24],[15,27,8,27,"require"],[15,34,8,34],[15,35,8,34,"_dependencyMap"],[15,49,8,34],[15,74,8,55],[15,75,8,56],[16,2,9,0],[16,6,9,6,"validatePathConfig_1"],[16,26,9,26],[16,29,9,29,"__importDefault"],[16,44,9,44],[16,45,9,45,"require"],[16,52,9,52],[16,53,9,52,"_dependencyMap"],[16,67,9,52],[16,94,9,75],[16,95,9,76],[16,96,9,77],[17,2,10,0],[17,6,10,6,"matchers_1"],[17,16,10,16],[17,19,10,19,"require"],[17,26,10,26],[17,27,10,26,"_dependencyMap"],[17,41,10,26],[17,59,10,40],[17,60,10,41],[18,2,11,0],[18,11,11,9,"getUrlWithReactNavigationConcessions"],[18,47,11,45,"getUrlWithReactNavigationConcessions"],[18,48,11,46,"path"],[18,52,11,50],[18,54,11,89],[19,4,11,89],[19,8,11,52,"baseUrl"],[19,15,11,59],[19,18,11,59,"arguments"],[19,27,11,59],[19,28,11,59,"length"],[19,34,11,59],[19,42,11,59,"arguments"],[19,51,11,59],[19,59,11,59,"undefined"],[19,68,11,59],[19,71,11,59,"arguments"],[19,80,11,59],[20,4,12,4],[20,8,12,8,"parsed"],[20,14,12,14],[21,4,13,4],[21,8,13,8],[22,6,14,8,"parsed"],[22,12,14,14],[22,15,14,17],[22,19,14,21,"URL"],[22,22,14,24],[22,23,14,25,"path"],[22,27,14,29],[22,29,14,31],[22,52,14,54],[22,53,14,55],[23,4,15,4],[23,5,15,5],[23,6,16,4],[23,12,16,10],[24,6,17,8],[25,6,18,8],[25,13,18,15],[26,8,19,12,"nonstandardPathname"],[26,27,19,31],[26,29,19,33],[26,31,19,35],[27,8,20,12,"inputPathnameWithoutHash"],[27,32,20,36],[27,34,20,38],[27,36,20,40],[28,8,21,12,"url"],[28,11,21,15],[28,13,21,17],[29,6,22,8],[29,7,22,9],[30,4,23,4],[31,4,24,4],[31,8,24,10,"pathname"],[31,16,24,18],[31,19,24,21,"parsed"],[31,25,24,27],[31,26,24,28,"pathname"],[31,34,24,36],[32,4,25,4],[33,4,26,4],[33,11,26,11],[34,6,27,8],[35,6,28,8,"nonstandardPathname"],[35,25,28,27],[35,27,28,29,"stripBaseUrl"],[35,39,28,41],[35,40,28,42,"pathname"],[35,48,28,50],[35,50,28,52,"baseUrl"],[35,57,28,59],[35,58,28,60],[35,59,28,61,"replace"],[35,66,28,68],[35,67,28,69],[35,74,28,76],[35,76,28,78],[35,78,28,80],[35,79,28,81],[35,80,28,82,"replace"],[35,87,28,89],[35,88,28,90],[35,95,28,97],[35,97,28,99],[35,99,28,101],[35,100,28,102],[35,103,28,105],[35,106,28,108],[36,6,29,8,"url"],[36,9,29,11],[36,11,29,13,"parsed"],[37,4,30,4],[37,5,30,5],[38,2,31,0],[39,2,32,0,"exports"],[39,9,32,7],[39,10,32,8,"getUrlWithReactNavigationConcessions"],[39,46,32,44],[39,49,32,47,"getUrlWithReactNavigationConcessions"],[39,85,32,83],[40,2,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,0,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,0,47,0],[55,0,48,0],[56,0,49,0],[57,0,50,0],[58,0,51,0],[59,0,52,0],[60,0,53,0],[61,2,54,0],[61,11,54,9,"getStateFromPath"],[61,27,54,25,"getStateFromPath"],[61,28,54,26,"path"],[61,32,54,30],[61,34,54,32,"options"],[61,41,54,39],[61,43,54,41],[62,4,55,4],[62,8,55,4,"_getMatchableRouteCon"],[62,29,55,4],[62,32,55,39,"getMatchableRouteConfigs"],[62,56,55,63],[62,57,55,64,"options"],[62,64,55,71],[62,66,55,73],[62,70,55,77],[62,72,55,79,"routeInfo"],[62,81,55,88],[62,83,55,90,"segments"],[62,91,55,98],[62,92,55,99],[63,6,55,12,"initialRoutes"],[63,19,55,25],[63,22,55,25,"_getMatchableRouteCon"],[63,43,55,25],[63,44,55,12,"initialRoutes"],[63,57,55,25],[64,6,55,27,"configs"],[64,13,55,34],[64,16,55,34,"_getMatchableRouteCon"],[64,37,55,34],[64,38,55,27,"configs"],[64,45,55,34],[65,4,56,4],[65,11,56,11,"getStateFromPathWithConfigs"],[65,38,56,38],[65,39,56,39,"path"],[65,43,56,43],[65,45,56,45,"configs"],[65,52,56,52],[65,54,56,54,"initialRoutes"],[65,67,56,67],[65,68,56,68],[66,2,57,0],[67,2,58,0,"exports"],[67,9,58,7],[67,10,58,8,"default"],[67,17,58,15],[67,20,58,18,"getStateFromPath"],[67,36,58,34],[68,2,59,0],[68,11,59,9,"getMatchableRouteConfigs"],[68,35,59,33,"getMatchableRouteConfigs"],[68,36,59,34,"options"],[68,43,59,41],[68,45,59,66],[69,4,59,66],[69,8,59,43,"previousSegments"],[69,24,59,59],[69,27,59,59,"arguments"],[69,36,59,59],[69,37,59,59,"length"],[69,43,59,59],[69,51,59,59,"arguments"],[69,60,59,59],[69,68,59,59,"undefined"],[69,77,59,59],[69,80,59,59,"arguments"],[69,89,59,59],[69,95,59,62],[69,97,59,64],[70,4,60,4],[70,8,60,8,"options"],[70,15,60,15],[70,17,60,17],[71,6,61,8],[71,7,61,9],[71,8,61,10],[71,10,61,12,"validatePathConfig_1"],[71,30,61,32],[71,31,61,33,"default"],[71,38,61,40],[71,40,61,42,"options"],[71,47,61,49],[71,48,61,50],[72,4,62,4],[73,4,63,4],[73,8,63,10,"screens"],[73,15,63,17],[73,18,63,20,"options"],[73,25,63,27],[73,27,63,29,"screens"],[73,34,63,36],[74,4,64,4],[75,4,65,4],[75,8,65,8],[75,9,65,9,"screens"],[75,16,65,16],[75,18,65,18],[76,6,66,8],[76,12,66,14,"Error"],[76,17,66,19],[76,18,66,20],[76,94,66,96],[76,95,66,97],[77,4,67,4],[78,4,68,4],[79,4,69,4],[79,8,69,10,"initialRoutes"],[79,21,69,23],[79,24,69,26],[79,26,69,28],[80,4,70,4],[80,8,70,8,"options"],[80,15,70,15],[80,17,70,17,"initialRouteName"],[80,33,70,33],[80,35,70,35],[81,6,71,8,"initialRoutes"],[81,19,71,21],[81,20,71,22,"push"],[81,24,71,26],[81,25,71,27],[82,8,72,12,"initialRouteName"],[82,24,72,28],[82,26,72,30,"options"],[82,33,72,37],[82,34,72,38,"initialRouteName"],[82,50,72,54],[83,8,73,12,"parentScreens"],[83,21,73,25],[83,23,73,27],[84,6,74,8],[84,7,74,9],[84,8,74,10],[85,4,75,4],[86,4,76,4],[87,4,77,4],[87,8,77,10,"converted"],[87,17,77,19],[87,20,77,22,"Object"],[87,26,77,28],[87,27,77,29,"keys"],[87,31,77,33],[87,32,77,34,"screens"],[87,39,77,41],[87,40,77,42],[87,41,78,9,"map"],[87,44,78,12],[87,45,78,14,"key"],[87,48,78,17],[87,52,78,22,"createNormalizedConfigs"],[87,75,78,45],[87,76,78,46,"key"],[87,79,78,49],[87,81,78,51,"screens"],[87,88,78,58],[87,90,78,60],[87,92,78,62],[87,94,78,64,"initialRoutes"],[87,107,78,77],[87,108,78,78],[87,109,78,79],[87,110,79,9,"flat"],[87,114,79,13],[87,115,79,14],[87,116,79,15],[88,4,80,4],[88,8,80,10,"resolvedInitialPatterns"],[88,31,80,33],[88,34,80,36,"initialRoutes"],[88,47,80,49],[88,48,80,50,"map"],[88,51,80,53],[88,52,80,55,"route"],[88,57,80,60],[88,61,80,65,"joinPaths"],[88,70,80,74],[88,71,80,75],[88,74,80,78,"route"],[88,79,80,83],[88,80,80,84,"parentScreens"],[88,93,80,97],[88,95,80,99,"route"],[88,100,80,104],[88,101,80,105,"initialRouteName"],[88,117,80,121],[88,118,80,122],[88,119,80,123],[89,4,81,4],[89,8,81,10,"convertedWithInitial"],[89,28,81,30],[89,31,81,33,"converted"],[89,40,81,42],[89,41,81,43,"map"],[89,44,81,46],[89,45,81,48,"config"],[89,51,81,54],[89,56,81,60],[90,6,82,8],[90,9,82,11,"config"],[90,15,82,17],[91,6,83,8],[92,6,84,8],[93,6,85,8,"isInitial"],[93,15,85,17],[93,17,85,19,"resolvedInitialPatterns"],[93,40,85,42],[93,41,85,43,"includes"],[93,49,85,51],[93,50,85,52,"config"],[93,56,85,58],[93,57,85,59,"routeNames"],[93,67,85,69],[93,68,85,70,"join"],[93,72,85,74],[93,73,85,75],[93,76,85,78],[93,77,85,79],[94,4,86,4],[94,5,86,5],[94,6,86,6],[94,7,86,7],[95,4,87,4],[96,4,88,4],[96,8,88,10,"configs"],[96,15,88,17],[96,18,88,20,"convertedWithInitial"],[96,38,88,40],[96,39,88,41,"sort"],[96,43,88,45],[96,44,88,46],[96,45,88,47,"a"],[96,46,88,48],[96,48,88,50,"b"],[96,49,88,51],[96,54,88,56,"sortConfigs"],[96,65,88,67],[96,66,88,68,"a"],[96,67,88,69],[96,69,88,71,"b"],[96,70,88,72],[96,72,88,74,"previousSegments"],[96,88,88,90],[96,89,88,91],[96,90,88,92],[97,4,89,4],[98,4,90,4,"assertConfigDuplicates"],[98,26,90,26],[98,27,90,27,"configs"],[98,34,90,34],[98,35,90,35],[99,4,91,4],[99,11,91,11],[100,6,91,13,"configs"],[100,13,91,20],[101,6,91,22,"initialRoutes"],[102,4,91,36],[102,5,91,37],[103,2,92,0],[104,2,93,0,"exports"],[104,9,93,7],[104,10,93,8,"getMatchableRouteConfigs"],[104,34,93,32],[104,37,93,35,"getMatchableRouteConfigs"],[104,61,93,59],[105,2,94,0],[105,11,94,9,"assertConfigDuplicates"],[105,33,94,31,"assertConfigDuplicates"],[105,34,94,32,"configs"],[105,41,94,39],[105,43,94,41],[106,4,95,4],[107,4,96,4,"configs"],[107,11,96,11],[107,12,96,12,"reduce"],[107,18,96,18],[107,19,96,19],[107,20,96,20,"acc"],[107,23,96,23],[107,25,96,25,"config"],[107,31,96,31],[107,36,96,36],[108,6,97,8],[109,6,98,8],[109,10,98,14,"indexedKey"],[109,20,98,24],[109,23,98,27,"config"],[109,29,98,33],[109,30,98,34,"regex"],[109,35,98,39],[109,37,98,41,"toString"],[109,45,98,49],[109,46,98,50],[109,47,98,51],[109,51,98,55,"config"],[109,57,98,61],[109,58,98,62,"pattern"],[109,65,98,69],[110,6,99,8],[110,10,99,14,"alpha"],[110,15,99,19],[110,18,99,22,"acc"],[110,21,99,25],[110,22,99,26,"indexedKey"],[110,32,99,36],[110,33,99,37],[111,6,100,8],[112,6,101,8],[112,10,101,12,"alpha"],[112,15,101,17],[112,19,101,21],[112,20,101,22,"alpha"],[112,25,101,27],[112,26,101,28,"hasChildren"],[112,37,101,39],[112,41,101,43],[112,42,101,44,"config"],[112,48,101,50],[112,49,101,51,"hasChildren"],[112,60,101,62],[112,62,101,64],[113,8,102,12],[113,12,102,18,"a"],[113,13,102,19],[113,16,102,22,"alpha"],[113,21,102,27],[113,22,102,28,"routeNames"],[113,32,102,38],[114,8,103,12],[114,12,103,18,"b"],[114,13,103,19],[114,16,103,22,"config"],[114,22,103,28],[114,23,103,29,"routeNames"],[114,33,103,39],[115,8,104,12],[116,8,105,12],[117,8,106,12],[117,12,106,18,"intersects"],[117,22,106,28],[117,25,106,31,"a"],[117,26,106,32],[117,27,106,33,"length"],[117,33,106,39],[117,36,106,42,"b"],[117,37,106,43],[117,38,106,44,"length"],[117,44,106,50],[117,47,106,53,"b"],[117,48,106,54],[117,49,106,55,"every"],[117,54,106,60],[117,55,106,61],[117,56,106,62,"it"],[117,58,106,64],[117,60,106,66,"i"],[117,61,106,67],[117,66,106,72,"a"],[117,67,106,73],[117,68,106,74,"i"],[117,69,106,75],[117,70,106,76],[117,75,106,81,"it"],[117,77,106,83],[117,78,106,84],[117,81,106,87,"a"],[117,82,106,88],[117,83,106,89,"every"],[117,88,106,94],[117,89,106,95],[117,90,106,96,"it"],[117,92,106,98],[117,94,106,100,"i"],[117,95,106,101],[117,100,106,106,"b"],[117,101,106,107],[117,102,106,108,"i"],[117,103,106,109],[117,104,106,110],[117,109,106,115,"it"],[117,111,106,117],[117,112,106,118],[118,8,107,12],[118,12,107,16],[118,13,107,17,"intersects"],[118,23,107,27],[118,25,107,29],[119,10,108,16],[120,10,109,16],[121,10,110,16],[121,14,110,22,"last"],[121,18,110,26],[121,21,110,29,"config"],[121,27,110,35],[121,28,110,36,"pattern"],[121,35,110,43],[121,36,110,44,"split"],[121,41,110,49],[121,42,110,50],[121,45,110,53],[121,46,110,54],[121,47,110,55,"pop"],[121,50,110,58],[121,51,110,59],[121,52,110,60],[122,10,111,16],[122,14,111,20],[122,15,111,21,"last"],[122,19,111,25],[122,21,111,27,"match"],[122,26,111,32],[122,27,111,33],[122,42,111,48],[122,43,111,49],[122,45,111,51],[123,12,112,20],[123,16,112,26,"routeType"],[123,25,112,35],[123,28,112,38,"last"],[123,32,112,42],[123,34,112,44,"startsWith"],[123,44,112,54],[123,45,112,55],[123,48,112,58],[123,49,112,59],[123,52,113,26],[123,67,113,41],[123,70,114,26,"last"],[123,74,114,30],[123,76,114,32,"startsWith"],[123,86,114,42],[123,87,114,43],[123,90,114,46],[123,91,114,47],[123,94,115,30],[123,114,115,50],[123,117,116,30],[123,124,116,37],[124,12,117,20],[124,18,117,26],[124,22,117,30,"Error"],[124,27,117,35],[124,28,117,36],[124,35,117,43,"routeType"],[124,44,117,52],[124,57,117,65,"config"],[124,63,117,71],[124,64,117,72,"pattern"],[124,71,117,79],[124,75,117,83],[124,78,117,86],[124,101,117,109,"alpha"],[124,106,117,114],[124,107,117,115,"userReadableName"],[124,123,117,131],[124,133,117,141,"config"],[124,139,117,147],[124,140,117,148,"userReadableName"],[124,156,117,164],[124,227,117,235],[124,228,117,236],[125,10,118,16],[126,8,119,12],[127,6,120,8],[128,6,121,8],[128,13,121,15,"Object"],[128,19,121,21],[128,20,121,22,"assign"],[128,26,121,28],[128,27,121,29,"acc"],[128,30,121,32],[128,32,121,34],[129,8,122,12],[129,9,122,13,"indexedKey"],[129,19,122,23],[129,22,122,26,"config"],[130,6,123,8],[130,7,123,9],[130,8,123,10],[131,4,124,4],[131,5,124,5],[131,7,124,7],[131,8,124,8],[131,9,124,9],[131,10,124,10],[132,2,125,0],[133,2,126,0],[133,11,126,9,"sortConfigs"],[133,22,126,20,"sortConfigs"],[133,23,126,21,"a"],[133,24,126,22],[133,26,126,24,"b"],[133,27,126,25],[133,29,126,50],[134,4,126,50],[134,8,126,27,"previousSegments"],[134,24,126,43],[134,27,126,43,"arguments"],[134,36,126,43],[134,37,126,43,"length"],[134,43,126,43],[134,51,126,43,"arguments"],[134,60,126,43],[134,68,126,43,"undefined"],[134,77,126,43],[134,80,126,43,"arguments"],[134,89,126,43],[134,95,126,46],[134,97,126,48],[135,4,127,4],[136,4,128,4],[137,4,129,4],[138,4,130,4],[139,4,131,4],[140,4,132,4],[140,8,132,8,"a"],[140,9,132,9],[140,10,132,10,"pattern"],[140,17,132,17],[140,22,132,22,"b"],[140,23,132,23],[140,24,132,24,"pattern"],[140,31,132,31],[140,33,132,33],[141,6,133,8],[141,13,133,15,"b"],[141,14,133,16],[141,15,133,17,"routeNames"],[141,25,133,27],[141,26,133,28,"join"],[141,30,133,32],[141,31,133,33],[141,34,133,36],[141,35,133,37],[141,36,133,38,"localeCompare"],[141,49,133,51],[141,50,133,52,"a"],[141,51,133,53],[141,52,133,54,"routeNames"],[141,62,133,64],[141,63,133,65,"join"],[141,67,133,69],[141,68,133,70],[141,71,133,73],[141,72,133,74],[141,73,133,75],[142,4,134,4],[143,4,135,4],[144,4,136,4],[145,4,137,4],[145,8,137,8,"a"],[145,9,137,9],[145,10,137,10,"pattern"],[145,17,137,17],[145,18,137,18,"startsWith"],[145,28,137,28],[145,29,137,29,"b"],[145,30,137,30],[145,31,137,31,"pattern"],[145,38,137,38],[145,39,137,39],[146,4,138,8],[147,4,139,8,"b"],[147,5,139,9],[147,6,139,10,"screen"],[147,12,139,16],[147,17,139,21],[147,24,139,28],[147,26,139,30],[148,6,140,8],[148,13,140,15],[148,14,140,16],[148,15,140,17],[149,4,141,4],[150,4,142,4],[150,8,142,8,"b"],[150,9,142,9],[150,10,142,10,"pattern"],[150,17,142,17],[150,18,142,18,"startsWith"],[150,28,142,28],[150,29,142,29,"a"],[150,30,142,30],[150,31,142,31,"pattern"],[150,38,142,38],[150,39,142,39],[150,43,142,43,"a"],[150,44,142,44],[150,45,142,45,"screen"],[150,51,142,51],[150,56,142,56],[150,63,142,63],[150,65,142,65],[151,6,143,8],[151,13,143,15],[151,14,143,16],[152,4,144,4],[153,4,145,4],[154,4,146,4],[155,4,147,4],[156,4,148,4],[156,8,148,10,"aParts"],[156,14,148,16],[156,17,148,19,"a"],[156,18,148,20],[156,19,148,21,"pattern"],[156,26,148,28],[156,27,149,9,"split"],[156,32,149,14],[156,33,149,15],[156,36,149,18],[157,4,150,8],[158,4,150,8],[158,5,151,9,"filter"],[158,11,151,15],[158,12,151,17,"part"],[158,16,151,21],[158,20,151,26],[158,21,151,27],[158,22,151,28],[158,24,151,30,"matchers_1"],[158,34,151,40],[158,35,151,41,"matchGroupName"],[158,49,151,55],[158,51,151,57,"part"],[158,55,151,61],[158,56,151,62],[158,60,151,66],[158,64,151,70],[158,65,151,71],[159,4,152,4],[159,8,152,8,"a"],[159,9,152,9],[159,10,152,10,"screen"],[159,16,152,16],[159,21,152,21],[159,28,152,28],[159,32,152,32,"a"],[159,33,152,33],[159,34,152,34,"screen"],[159,40,152,40],[159,41,152,41,"match"],[159,46,152,46],[159,47,152,47],[159,57,152,57],[159,58,152,58],[159,60,152,60],[160,6,153,8,"aParts"],[160,12,153,14],[160,13,153,15,"push"],[160,17,153,19],[160,18,153,20],[160,25,153,27],[160,26,153,28],[161,4,154,4],[162,4,155,4],[162,8,155,10,"bParts"],[162,14,155,16],[162,17,155,19,"b"],[162,18,155,20],[162,19,155,21,"pattern"],[162,26,155,28],[162,27,155,29,"split"],[162,32,155,34],[162,33,155,35],[162,36,155,38],[162,37,155,39],[162,38,155,40,"filter"],[162,44,155,46],[162,45,155,48,"part"],[162,49,155,52],[162,53,155,57],[162,54,155,58],[162,55,155,59],[162,57,155,61,"matchers_1"],[162,67,155,71],[162,68,155,72,"matchGroupName"],[162,82,155,86],[162,84,155,88,"part"],[162,88,155,92],[162,89,155,93],[162,93,155,97],[162,97,155,101],[162,98,155,102],[163,4,156,4],[163,8,156,8,"b"],[163,9,156,9],[163,10,156,10,"screen"],[163,16,156,16],[163,21,156,21],[163,28,156,28],[163,32,156,32,"b"],[163,33,156,33],[163,34,156,34,"screen"],[163,40,156,40],[163,41,156,41,"match"],[163,46,156,46],[163,47,156,47],[163,57,156,57],[163,58,156,58],[163,60,156,60],[164,6,157,8,"bParts"],[164,12,157,14],[164,13,157,15,"push"],[164,17,157,19],[164,18,157,20],[164,25,157,27],[164,26,157,28],[165,4,158,4],[166,4,159,4],[167,4,160,4],[168,4,161,4],[168,8,161,10,"similarToPreviousA"],[168,26,161,28],[168,29,161,31,"previousSegments"],[168,45,161,47],[168,46,161,48,"filter"],[168,52,161,54],[168,53,161,55],[168,54,161,56,"value"],[168,59,161,61],[168,61,161,63,"index"],[168,66,161,68],[168,71,161,73],[169,6,162,8],[169,13,162,15,"value"],[169,18,162,20],[169,23,162,25,"a"],[169,24,162,26],[169,25,162,27,"expandedRouteNames"],[169,43,162,45],[169,44,162,46,"index"],[169,49,162,51],[169,50,162,52],[169,54,162,56,"value"],[169,59,162,61],[169,60,162,62,"startsWith"],[169,70,162,72],[169,71,162,73],[169,74,162,76],[169,75,162,77],[169,79,162,81,"value"],[169,84,162,86],[169,85,162,87,"endsWith"],[169,93,162,95],[169,94,162,96],[169,97,162,99],[169,98,162,100],[170,4,163,4],[170,5,163,5],[170,6,163,6],[171,4,164,4],[171,8,164,10,"similarToPreviousB"],[171,26,164,28],[171,29,164,31,"previousSegments"],[171,45,164,47],[171,46,164,48,"filter"],[171,52,164,54],[171,53,164,55],[171,54,164,56,"value"],[171,59,164,61],[171,61,164,63,"index"],[171,66,164,68],[171,71,164,73],[172,6,165,8],[172,13,165,15,"value"],[172,18,165,20],[172,23,165,25,"b"],[172,24,165,26],[172,25,165,27,"expandedRouteNames"],[172,43,165,45],[172,44,165,46,"index"],[172,49,165,51],[172,50,165,52],[172,54,165,56,"value"],[172,59,165,61],[172,60,165,62,"startsWith"],[172,70,165,72],[172,71,165,73],[172,74,165,76],[172,75,165,77],[172,79,165,81,"value"],[172,84,165,86],[172,85,165,87,"endsWith"],[172,93,165,95],[172,94,165,96],[172,97,165,99],[172,98,165,100],[173,4,166,4],[173,5,166,5],[173,6,166,6],[174,4,167,4],[174,8,167,8],[174,9,167,9,"similarToPreviousA"],[174,27,167,27],[174,28,167,28,"length"],[174,34,167,34],[174,37,167,37],[174,38,167,38],[174,42,167,42,"similarToPreviousB"],[174,60,167,60],[174,61,167,61,"length"],[174,67,167,67],[174,70,167,70],[174,71,167,71],[174,76,168,8,"similarToPreviousA"],[174,94,168,26],[174,95,168,27,"length"],[174,101,168,33],[174,106,168,38,"similarToPreviousB"],[174,124,168,56],[174,125,168,57,"length"],[174,131,168,63],[174,133,168,65],[175,6,169,8],[176,6,170,8],[176,13,170,15,"similarToPreviousB"],[176,31,170,33],[176,32,170,34,"length"],[176,38,170,40],[176,41,170,43,"similarToPreviousA"],[176,59,170,61],[176,60,170,62,"length"],[176,66,170,68],[177,4,171,4],[178,4,172,4],[178,9,172,9],[178,13,172,13,"i"],[178,14,172,14],[178,17,172,17],[178,18,172,18],[178,20,172,20,"i"],[178,21,172,21],[178,24,172,24,"Math"],[178,28,172,28],[178,29,172,29,"max"],[178,32,172,32],[178,33,172,33,"aParts"],[178,39,172,39],[178,40,172,40,"length"],[178,46,172,46],[178,48,172,48,"bParts"],[178,54,172,54],[178,55,172,55,"length"],[178,61,172,61],[178,62,172,62],[178,64,172,64,"i"],[178,65,172,65],[178,67,172,67],[178,69,172,69],[179,6,173,8],[180,6,174,8],[180,10,174,12,"aParts"],[180,16,174,18],[180,17,174,19,"i"],[180,18,174,20],[180,19,174,21],[180,23,174,25],[180,27,174,29],[180,29,174,31],[181,8,175,12],[181,15,175,19],[181,16,175,20],[182,6,176,8],[183,6,177,8],[184,6,178,8],[184,10,178,12,"bParts"],[184,16,178,18],[184,17,178,19,"i"],[184,18,178,20],[184,19,178,21],[184,23,178,25],[184,27,178,29],[184,29,178,31],[185,8,179,12],[185,15,179,19],[185,16,179,20],[185,17,179,21],[186,6,180,8],[187,6,181,8],[187,10,181,14,"aWildCard"],[187,19,181,23],[187,22,181,26,"aParts"],[187,28,181,32],[187,29,181,33,"i"],[187,30,181,34],[187,31,181,35],[187,32,181,36,"startsWith"],[187,42,181,46],[187,43,181,47],[187,46,181,50],[187,47,181,51],[188,6,182,8],[188,10,182,14,"bWildCard"],[188,19,182,23],[188,22,182,26,"bParts"],[188,28,182,32],[188,29,182,33,"i"],[188,30,182,34],[188,31,182,35],[188,32,182,36,"startsWith"],[188,42,182,46],[188,43,182,47],[188,46,182,50],[188,47,182,51],[189,6,183,8],[190,6,184,8],[190,10,184,12,"aWildCard"],[190,19,184,21],[190,23,184,25,"bWildCard"],[190,32,184,34],[190,34,184,36],[191,8,185,12],[191,12,185,18,"aNotFound"],[191,21,185,27],[191,24,185,30,"aParts"],[191,30,185,36],[191,31,185,37,"i"],[191,32,185,38],[191,33,185,39],[191,34,185,40,"match"],[191,39,185,45],[191,40,185,46],[191,56,185,62],[191,57,185,63],[192,8,186,12],[192,12,186,18,"bNotFound"],[192,21,186,27],[192,24,186,30,"bParts"],[192,30,186,36],[192,31,186,37,"i"],[192,32,186,38],[192,33,186,39],[192,34,186,40,"match"],[192,39,186,45],[192,40,186,46],[192,56,186,62],[192,57,186,63],[193,8,187,12],[193,12,187,16,"aNotFound"],[193,21,187,25],[193,25,187,29,"bNotFound"],[193,34,187,38],[193,36,187,40],[194,10,188,16],[195,8,189,12],[195,9,189,13],[195,15,190,17],[195,19,190,21,"aNotFound"],[195,28,190,30],[195,30,190,32],[196,10,191,16],[196,17,191,23],[196,18,191,24],[197,8,192,12],[197,9,192,13],[197,15,193,17],[197,19,193,21,"bNotFound"],[197,28,193,30],[197,30,193,32],[198,10,194,16],[198,17,194,23],[198,18,194,24],[198,19,194,25],[199,8,195,12],[200,8,196,12],[201,6,197,8],[202,6,198,8],[203,6,199,8],[203,10,199,12,"aWildCard"],[203,19,199,21],[203,21,199,23],[204,8,200,12],[204,15,200,19],[204,16,200,20],[205,6,201,8],[206,6,202,8],[207,6,203,8],[207,10,203,12,"bWildCard"],[207,19,203,21],[207,21,203,23],[208,8,204,12],[208,15,204,19],[208,16,204,20],[208,17,204,21],[209,6,205,8],[210,6,206,8],[210,10,206,14,"aSlug"],[210,15,206,19],[210,18,206,22,"aParts"],[210,24,206,28],[210,25,206,29,"i"],[210,26,206,30],[210,27,206,31],[210,28,206,32,"startsWith"],[210,38,206,42],[210,39,206,43],[210,42,206,46],[210,43,206,47],[211,6,207,8],[211,10,207,14,"bSlug"],[211,15,207,19],[211,18,207,22,"bParts"],[211,24,207,28],[211,25,207,29,"i"],[211,26,207,30],[211,27,207,31],[211,28,207,32,"startsWith"],[211,38,207,42],[211,39,207,43],[211,42,207,46],[211,43,207,47],[212,6,208,8],[213,6,209,8],[213,10,209,12,"aSlug"],[213,15,209,17],[213,19,209,21,"bSlug"],[213,24,209,26],[213,26,209,28],[214,8,210,12],[214,12,210,18,"aNotFound"],[214,22,210,27],[214,25,210,30,"aParts"],[214,31,210,36],[214,32,210,37,"i"],[214,33,210,38],[214,34,210,39],[214,35,210,40,"match"],[214,40,210,45],[214,41,210,46],[214,57,210,62],[214,58,210,63],[215,8,211,12],[215,12,211,18,"bNotFound"],[215,22,211,27],[215,25,211,30,"bParts"],[215,31,211,36],[215,32,211,37,"i"],[215,33,211,38],[215,34,211,39],[215,35,211,40,"match"],[215,40,211,45],[215,41,211,46],[215,57,211,62],[215,58,211,63],[216,8,212,12],[216,12,212,16,"aNotFound"],[216,22,212,25],[216,26,212,29,"bNotFound"],[216,36,212,38],[216,38,212,40],[217,10,213,16],[218,8,214,12],[218,9,214,13],[218,15,215,17],[218,19,215,21,"aNotFound"],[218,29,215,30],[218,31,215,32],[219,10,216,16],[219,17,216,23],[219,18,216,24],[220,8,217,12],[220,9,217,13],[220,15,218,17],[220,19,218,21,"bNotFound"],[220,29,218,30],[220,31,218,32],[221,10,219,16],[221,17,219,23],[221,18,219,24],[221,19,219,25],[222,8,220,12],[223,8,221,12],[224,6,222,8],[225,6,223,8],[226,6,224,8],[226,10,224,12,"aSlug"],[226,15,224,17],[226,17,224,19],[227,8,225,12],[227,15,225,19],[227,16,225,20],[228,6,226,8],[229,6,227,8],[230,6,228,8],[230,10,228,12,"bSlug"],[230,15,228,17],[230,17,228,19],[231,8,229,12],[231,15,229,19],[231,16,229,20],[231,17,229,21],[232,6,230,8],[233,4,231,4],[234,4,232,4],[235,4,233,4],[236,4,234,4],[236,8,234,8,"a"],[236,9,234,9],[236,10,234,10,"isInitial"],[236,19,234,19],[236,23,234,23],[236,24,234,24,"b"],[236,25,234,25],[236,26,234,26,"isInitial"],[236,35,234,35],[236,37,234,37],[237,6,235,8],[237,13,235,15],[237,14,235,16],[237,15,235,17],[238,4,236,4],[239,4,237,4],[239,8,237,8],[239,9,237,9,"a"],[239,10,237,10],[239,11,237,11,"isInitial"],[239,20,237,20],[239,24,237,24,"b"],[239,25,237,25],[239,26,237,26,"isInitial"],[239,35,237,35],[239,37,237,37],[240,6,238,8],[240,13,238,15],[240,14,238,16],[241,4,239,4],[242,4,240,4],[242,11,240,11,"bParts"],[242,17,240,17],[242,18,240,18,"length"],[242,24,240,24],[242,27,240,27,"aParts"],[242,33,240,33],[242,34,240,34,"length"],[242,40,240,40],[243,2,241,0],[244,2,242,0],[244,11,242,9,"getStateFromEmptyPathWithConfigs"],[244,43,242,41,"getStateFromEmptyPathWithConfigs"],[244,44,242,42,"path"],[244,48,242,46],[244,50,242,48,"hash"],[244,54,242,52],[244,56,242,54,"configs"],[244,63,242,61],[244,65,242,63,"initialRoutes"],[244,78,242,76],[244,80,242,78],[245,4,243,4],[246,4,244,4],[247,4,245,4],[248,4,246,4],[248,8,246,10,"leafNodes"],[248,17,246,19],[248,20,246,22,"configs"],[248,27,246,29],[248,28,247,9,"filter"],[248,34,247,15],[248,35,247,17,"config"],[248,41,247,23],[248,45,247,28],[248,46,247,29,"config"],[248,52,247,35],[248,53,247,36,"hasChildren"],[248,64,247,47],[248,65,247,48],[248,66,248,9,"map"],[248,69,248,12],[248,70,248,14,"value"],[248,75,248,19],[248,79,248,24],[249,6,249,8],[249,13,249,15],[250,8,250,12],[250,11,250,15,"value"],[250,16,250,20],[251,8,251,12],[252,8,252,12],[253,8,253,12,"path"],[253,12,253,16],[253,14,253,18],[253,15,253,19],[253,16,253,20],[253,18,253,22,"matchers_1"],[253,28,253,32],[253,29,253,33,"stripGroupSegmentsFromPath"],[253,55,253,59],[253,57,253,61,"value"],[253,62,253,66],[253,63,253,67,"path"],[253,67,253,71],[254,6,254,8],[254,7,254,9],[255,4,255,4],[255,5,255,5],[255,6,255,6],[256,4,256,4],[256,8,256,10,"match"],[256,13,256,15],[256,16,256,18,"leafNodes"],[256,25,256,27],[256,26,256,28,"find"],[256,30,256,32],[256,31,256,34,"config"],[256,37,256,40],[257,4,257,4],[258,4,258,4,"config"],[258,10,258,10],[258,11,258,11,"path"],[258,15,258,15],[258,20,258,20],[258,22,258,22],[258,27,258,27],[258,28,258,28,"config"],[258,34,258,34],[258,35,258,35,"regex"],[258,40,258,40],[258,44,258,44,"config"],[258,50,258,50],[258,51,258,51,"regex"],[258,56,258,56],[258,57,258,57,"test"],[258,61,258,61],[258,62,258,62],[258,64,258,64],[258,65,258,65],[258,66,258,66],[258,67,258,67],[258,71,259,8,"leafNodes"],[258,80,259,17],[258,81,259,18,"find"],[258,85,259,22],[258,86,259,24,"config"],[258,92,259,30],[259,4,260,8],[260,4,261,8,"config"],[260,10,261,14],[260,11,261,15,"path"],[260,15,261,19],[260,16,261,20,"startsWith"],[260,26,261,30],[260,27,261,31],[260,30,261,34],[260,31,261,35],[260,35,261,39,"config"],[260,41,261,45],[260,42,261,46,"regex"],[260,47,261,51],[260,48,261,52,"test"],[260,52,261,56],[260,53,261,57],[260,55,261,59],[260,56,261,60],[260,57,261,61],[261,4,262,8],[262,4,263,8],[263,4,264,8,"leafNodes"],[263,13,264,17],[263,14,264,18,"find"],[263,18,264,22],[263,19,264,24,"config"],[263,25,264,30],[263,29,264,35,"config"],[263,35,264,41],[263,36,264,42,"path"],[263,40,264,46],[263,41,264,47,"startsWith"],[263,51,264,57],[263,52,264,58],[263,55,264,61],[263,56,264,62],[263,60,264,66,"config"],[263,66,264,72],[263,67,264,73,"regex"],[263,72,264,78],[263,73,264,79,"test"],[263,77,264,83],[263,78,264,84],[263,81,264,87],[263,82,264,88],[263,83,264,89],[264,4,265,4],[264,8,265,8],[264,9,265,9,"match"],[264,14,265,14],[264,16,265,16],[265,6,266,8],[265,13,266,15,"undefined"],[265,22,266,24],[266,4,267,4],[267,4,268,4],[267,8,268,10,"routes"],[267,14,268,16],[267,17,268,19,"match"],[267,22,268,24],[267,23,268,25,"routeNames"],[267,33,268,35],[267,34,268,36,"map"],[267,37,268,39],[267,38,268,41,"name"],[267,42,268,45],[267,46,268,50],[268,6,269,8],[268,10,269,12],[268,11,269,13,"match"],[268,16,269,18],[268,17,269,19,"_route"],[268,23,269,25],[268,25,269,27],[269,8,270,12],[269,15,270,19],[270,10,270,21,"name"],[271,8,270,26],[271,9,270,27],[272,6,271,8],[273,6,272,8],[273,13,272,15],[274,8,273,12,"name"],[274,12,273,16],[275,8,274,12,"_route"],[275,14,274,18],[275,16,274,20,"match"],[275,21,274,25],[275,22,274,26,"_route"],[276,6,275,8],[276,7,275,9],[277,4,276,4],[277,5,276,5],[277,6,276,6],[278,4,277,4],[278,11,277,11,"createNestedStateObject"],[278,34,277,34],[278,35,277,35,"path"],[278,39,277,39],[278,41,277,41,"hash"],[278,45,277,45],[278,47,277,47,"routes"],[278,53,277,53],[278,55,277,55,"configs"],[278,62,277,62],[278,64,277,64,"initialRoutes"],[278,77,277,77],[278,78,277,78],[279,2,278,0],[280,2,279,0],[280,11,279,9,"getStateFromPathWithConfigs"],[280,38,279,36,"getStateFromPathWithConfigs"],[280,39,279,37,"path"],[280,43,279,41],[280,45,279,43,"configs"],[280,52,279,50],[280,54,279,52,"initialRoutes"],[280,67,279,65],[280,69,279,104],[281,4,279,104],[281,8,279,67,"baseUrl"],[281,15,279,74],[281,18,279,74,"arguments"],[281,27,279,74],[281,28,279,74,"length"],[281,34,279,74],[281,42,279,74,"arguments"],[281,51,279,74],[281,59,279,74,"undefined"],[281,68,279,74],[281,71,279,74,"arguments"],[281,80,279,74],[282,4,280,4],[282,8,280,10,"formattedPaths"],[282,22,280,24],[282,25,280,27,"getUrlWithReactNavigationConcessions"],[282,61,280,63],[282,62,280,64,"path"],[282,66,280,68],[282,67,280,69],[283,4,281,4],[283,8,281,8],[283,9,281,9,"formattedPaths"],[283,23,281,23],[283,24,281,24,"url"],[283,27,281,27],[283,29,282,8],[284,4,283,4],[284,8,283,8,"cleanPath"],[284,17,283,17],[284,20,283,20,"stripBaseUrl"],[284,32,283,32],[284,33,283,33],[284,34,283,34],[284,35,283,35],[284,37,283,37,"matchers_1"],[284,47,283,47],[284,48,283,48,"stripGroupSegmentsFromPath"],[284,74,283,74],[284,76,283,76,"formattedPaths"],[284,90,283,90],[284,91,283,91,"url"],[284,94,283,94],[284,95,283,95,"pathname"],[284,103,283,103],[284,104,283,104],[284,106,283,106,"baseUrl"],[284,113,283,113],[284,114,283,114],[284,117,284,8,"formattedPaths"],[284,131,284,22],[284,132,284,23,"url"],[284,135,284,26],[284,136,284,27,"search"],[284,142,284,33],[285,4,285,4],[285,8,285,8],[285,9,285,9,"path"],[285,13,285,13],[285,14,285,14,"startsWith"],[285,24,285,24],[285,25,285,25],[285,28,285,28],[285,29,285,29],[285,31,286,8,"cleanPath"],[285,40,286,17],[285,43,286,20,"cleanPath"],[285,52,286,29],[285,53,286,30,"slice"],[285,58,286,35],[285,59,286,36],[285,60,286,37],[285,61,286,38],[286,4,287,4],[286,8,287,8,"formattedPaths"],[286,22,287,22],[286,23,287,23,"nonstandardPathname"],[286,42,287,42],[286,47,287,47],[286,50,287,50],[286,52,287,52],[287,6,288,8],[287,13,288,15,"getStateFromEmptyPathWithConfigs"],[287,45,288,47],[287,46,288,48,"cleanPath"],[287,55,288,57],[287,57,288,59,"formattedPaths"],[287,71,288,73],[287,72,288,74,"url"],[287,75,288,77],[287,76,288,78,"hash"],[287,80,288,82],[287,81,288,83,"slice"],[287,86,288,88],[287,87,288,89],[287,88,288,90],[287,89,288,91],[287,91,288,93,"configs"],[287,98,288,100],[287,100,288,102,"initialRoutes"],[287,113,288,115],[287,114,288,116],[288,4,289,4],[289,4,290,4],[290,4,291,4],[291,4,292,4],[291,8,292,10,"routes"],[291,14,292,16],[291,17,292,19,"matchAgainstConfigs"],[291,36,292,38],[291,37,292,39,"formattedPaths"],[291,51,292,53],[291,52,292,54,"nonstandardPathname"],[291,71,292,73],[291,73,292,75,"configs"],[291,80,292,82],[291,81,292,83],[292,4,293,4],[292,8,293,8,"routes"],[292,14,293,14],[292,18,293,18],[292,22,293,22],[292,24,293,24],[293,6,294,8],[293,13,294,15,"undefined"],[293,22,294,24],[294,4,295,4],[295,4,296,4],[296,4,297,4],[296,11,297,11,"createNestedStateObject"],[296,34,297,34],[296,35,297,35,"cleanPath"],[296,44,297,44],[296,46,297,46,"formattedPaths"],[296,60,297,60],[296,61,297,61,"url"],[296,64,297,64],[296,65,297,65,"hash"],[296,69,297,69],[296,70,297,70,"slice"],[296,75,297,75],[296,76,297,76],[296,77,297,77],[296,78,297,78],[296,80,297,80,"routes"],[296,86,297,86],[296,88,297,88,"configs"],[296,95,297,95],[296,97,297,97,"initialRoutes"],[296,110,297,110],[296,111,297,111],[297,2,298,0],[298,2,299,0],[298,6,299,6,"joinPaths"],[298,15,299,15],[298,18,299,18],[298,27,299,18,"joinPaths"],[298,28,299,18],[299,4,299,18],[299,13,299,18,"_len"],[299,17,299,18],[299,20,299,18,"arguments"],[299,29,299,18],[299,30,299,18,"length"],[299,36,299,18],[299,38,299,22,"paths"],[299,43,299,27],[299,50,299,27,"Array"],[299,55,299,27],[299,56,299,27,"_len"],[299,60,299,27],[299,63,299,27,"_key"],[299,67,299,27],[299,73,299,27,"_key"],[299,77,299,27],[299,80,299,27,"_len"],[299,84,299,27],[299,86,299,27,"_key"],[299,90,299,27],[300,6,299,22,"paths"],[300,11,299,27],[300,12,299,27,"_key"],[300,16,299,27],[300,20,299,27,"arguments"],[300,29,299,27],[300,30,299,27,"_key"],[300,34,299,27],[301,4,299,27],[302,4,299,27],[302,11,299,32],[302,13,299,34],[302,14,300,5,"concat"],[302,20,300,11],[302,21,300,12],[302,24,300,15,"paths"],[302,29,300,20],[302,30,300,21,"map"],[302,33,300,24],[302,34,300,26,"p"],[302,35,300,27],[302,39,300,32,"p"],[302,40,300,33],[302,41,300,34,"split"],[302,46,300,39],[302,47,300,40],[302,50,300,43],[302,51,300,44],[302,52,300,45],[302,53,300,46],[302,54,301,5,"filter"],[302,60,301,11],[302,61,301,12,"Boolean"],[302,68,301,19],[302,69,301,20],[302,70,302,5,"join"],[302,74,302,9],[302,75,302,10],[302,78,302,13],[302,79,302,14],[303,2,302,14],[304,2,303,0],[304,11,303,9,"matchAgainstConfigs"],[304,30,303,28,"matchAgainstConfigs"],[304,31,303,29,"remaining"],[304,40,303,38],[304,42,303,40,"configs"],[304,49,303,47],[304,51,303,49],[305,4,304,4],[305,8,304,8,"routes"],[305,14,304,14],[306,4,305,4],[306,8,305,8,"remainingPath"],[306,21,305,21],[306,24,305,24,"remaining"],[306,33,305,33],[307,4,306,4],[308,4,306,4],[308,8,306,4,"_loop"],[308,13,306,4],[308,25,306,4,"_loop"],[308,26,306,4,"config"],[308,32,306,4],[308,34,307,34],[309,8,308,8],[309,12,308,12],[309,13,308,13,"config"],[309,19,308,19],[309,20,308,20,"regex"],[309,25,308,25],[309,27,308,27],[310,10,308,27],[311,8,310,8],[312,8,311,8],[312,12,311,14,"match"],[312,17,311,19],[312,20,311,22,"remainingPath"],[312,33,311,35],[312,34,311,36,"match"],[312,39,311,41],[312,40,311,42,"config"],[312,46,311,48],[312,47,311,49,"regex"],[312,52,311,54],[312,53,311,55],[313,8,312,8],[314,8,313,8],[314,12,313,12],[314,13,313,13,"match"],[314,18,313,18],[314,20,313,20],[315,10,313,20],[316,8,315,8],[317,8,316,8],[318,8,317,8],[318,12,317,14,"matchedParams"],[318,25,317,27],[318,28,317,30,"config"],[318,34,317,36],[318,35,317,37,"pattern"],[318,42,317,44],[318,44,318,14,"split"],[318,49,318,19],[318,50,318,20],[318,53,318,23],[318,54,318,24],[318,55,319,13,"filter"],[318,61,319,19],[318,62,319,21,"p"],[318,63,319,22],[318,67,319,27,"p"],[318,68,319,28],[318,69,319,29,"match"],[318,74,319,34],[318,75,319,35],[318,82,319,42],[318,83,319,43],[318,84,319,44],[318,85,320,13,"reduce"],[318,91,320,19],[318,92,320,20],[318,93,320,21,"acc"],[318,96,320,24],[318,98,320,26,"p"],[318,99,320,27],[318,101,320,29,"i"],[318,102,320,30],[318,107,320,35],[319,10,321,12],[319,14,321,16,"p"],[319,15,321,17],[319,16,321,18,"match"],[319,21,321,23],[319,22,321,24],[319,27,321,29],[319,28,321,30],[319,30,321,32],[320,12,322,16],[320,19,322,23],[321,14,323,20],[321,17,323,23,"acc"],[321,20,323,26],[322,14,324,20],[322,15,324,21,"p"],[322,16,324,22],[322,19,324,25,"match"],[322,24,324,30],[322,25,324,31],[322,26,324,32,"i"],[322,27,324,33],[322,30,324,36],[322,31,324,37],[322,35,324,41],[322,36,324,42],[322,37,324,43],[322,38,324,45],[323,12,325,16],[323,13,325,17],[324,10,326,12],[325,10,327,12],[325,17,327,19,"Object"],[325,23,327,25],[325,24,327,26,"assign"],[325,30,327,32],[325,31,327,33,"acc"],[325,34,327,36],[325,36,327,38],[326,12,328,16],[327,12,329,16],[328,12,330,16],[328,13,330,17,"p"],[328,14,330,18],[328,17,330,21,"match"],[328,22,330,26],[328,23,330,27],[328,24,330,28,"i"],[328,25,330,29],[328,28,330,32],[328,29,330,33],[328,33,330,37],[328,34,330,38],[328,35,330,39],[328,37,330,41,"replace"],[328,44,330,48],[328,45,330,49],[328,49,330,53],[328,51,330,55],[328,53,330,57],[329,10,331,12],[329,11,331,13],[329,12,331,14],[330,8,332,8],[330,9,332,9],[330,11,332,11],[330,12,332,12],[330,13,332,13],[330,14,332,14],[331,8,333,8],[331,12,333,14,"routeFromName"],[331,25,333,27],[331,28,333,31,"name"],[331,32,333,35],[331,36,333,40],[332,10,334,12],[332,14,334,18,"config"],[332,20,334,24],[332,23,334,27,"configs"],[332,30,334,34],[332,31,334,35,"find"],[332,35,334,39],[332,36,334,41,"c"],[332,37,334,42],[332,41,334,47,"c"],[332,42,334,48],[332,43,334,49,"screen"],[332,49,334,55],[332,54,334,60,"name"],[332,58,334,64],[332,59,334,65],[333,10,335,12],[333,14,335,16],[333,15,335,17,"config"],[333,21,335,23],[333,23,335,25,"path"],[333,27,335,29],[333,29,335,31],[334,12,336,16],[334,19,336,23],[335,14,336,25,"name"],[336,12,336,30],[336,13,336,31],[337,10,337,12],[338,10,338,12],[338,14,338,18,"segments"],[338,22,338,26],[338,25,338,29,"config"],[338,31,338,35],[338,32,338,36,"path"],[338,36,338,40],[338,37,338,41,"split"],[338,42,338,46],[338,43,338,47],[338,46,338,50],[338,47,338,51],[339,10,339,12],[339,14,339,18,"params"],[339,20,339,24],[339,23,339,27],[339,24,339,28],[339,25,339,29],[340,10,340,12,"segments"],[340,18,340,20],[340,19,341,17,"filter"],[340,25,341,23],[340,26,341,25,"p"],[340,27,341,26],[340,31,341,31,"p"],[340,32,341,32],[340,33,341,33,"match"],[340,38,341,38],[340,39,341,39],[340,46,341,46],[340,47,341,47],[340,48,341,48],[340,49,342,17,"forEach"],[340,56,342,24],[340,57,342,26,"p"],[340,58,342,27],[340,62,342,32],[341,12,343,16],[341,16,343,20,"value"],[341,21,343,25],[341,24,343,28,"matchedParams"],[341,37,343,41],[341,38,343,42,"p"],[341,39,343,43],[341,40,343,44],[342,12,344,16],[342,16,344,20,"value"],[342,21,344,25],[342,23,344,27],[343,14,345,20],[343,18,345,24,"p"],[343,19,345,25],[343,20,345,26,"match"],[343,25,345,31],[343,26,345,32],[343,31,345,37],[343,32,345,38],[343,34,345,40],[344,16,346,24],[345,16,347,24,"value"],[345,21,347,29],[345,24,347,32,"value"],[345,29,347,37],[345,31,347,39,"split"],[345,36,347,44],[345,37,347,45],[345,40,347,48],[345,41,347,49],[345,42,347,50,"filter"],[345,48,347,56],[345,49,347,57,"Boolean"],[345,56,347,64],[345,57,347,65],[346,14,348,20],[347,14,349,20],[347,18,349,26,"key"],[347,21,349,29],[347,24,349,32,"p"],[347,25,349,33],[347,26,349,34,"replace"],[347,33,349,41],[347,34,349,42],[347,41,349,49],[347,43,349,51],[347,45,349,53],[347,46,349,54],[347,47,349,55,"replace"],[347,54,349,62],[347,55,349,63],[347,60,349,68],[347,62,349,70],[347,64,349,72],[347,65,349,73],[348,14,350,20,"params"],[348,20,350,26],[348,21,350,27,"key"],[348,24,350,30],[348,25,350,31],[348,28,350,34,"config"],[348,34,350,40],[348,35,350,41,"parse"],[348,40,350,46],[348,43,350,49,"key"],[348,46,350,52],[348,47,350,53],[348,50,350,56,"config"],[348,56,350,62],[348,57,350,63,"parse"],[348,62,350,68],[348,63,350,69,"key"],[348,66,350,72],[348,67,350,73],[348,68,350,74,"value"],[348,73,350,79],[348,74,350,80],[348,77,350,83,"value"],[348,82,350,88],[349,12,351,16],[350,10,352,12],[350,11,352,13],[350,12,352,14],[351,10,353,12],[351,14,353,16,"params"],[351,20,353,22],[351,24,353,26,"Object"],[351,30,353,32],[351,31,353,33,"keys"],[351,35,353,37],[351,36,353,38,"params"],[351,42,353,44],[351,43,353,45],[351,44,353,46,"length"],[351,50,353,52],[351,52,353,54],[352,12,354,16],[352,19,354,23],[353,14,354,25,"name"],[353,18,354,29],[354,14,354,31,"params"],[355,12,354,38],[355,13,354,39],[356,10,355,12],[357,10,356,12],[357,17,356,19],[358,12,356,21,"name"],[359,10,356,26],[359,11,356,27],[360,8,357,8],[360,9,357,9],[361,8,358,8,"routes"],[361,14,358,14],[361,17,358,17,"config"],[361,23,358,23],[361,24,358,24,"routeNames"],[361,34,358,34],[361,35,358,35,"map"],[361,38,358,38],[361,39,358,40,"name"],[361,43,358,44],[361,47,358,49],[362,10,359,12],[362,14,359,16],[362,15,359,17,"config"],[362,21,359,23],[362,22,359,24,"_route"],[362,28,359,30],[362,30,359,32],[363,12,360,16],[363,19,360,23],[364,14,360,25],[364,17,360,28,"routeFromName"],[364,30,360,41],[364,31,360,42,"name"],[364,35,360,46],[365,12,360,48],[365,13,360,49],[366,10,361,12],[367,10,362,12],[367,17,362,19],[368,12,363,16],[368,15,363,19,"routeFromName"],[368,28,363,32],[368,29,363,33,"name"],[368,33,363,37],[368,34,363,38],[369,12,364,16,"_route"],[369,18,364,22],[369,20,364,24,"config"],[369,26,364,30],[369,27,364,31,"_route"],[370,10,365,12],[370,11,365,13],[371,8,366,8],[371,9,366,9],[371,10,366,10],[372,8,367,8],[373,8,368,8],[373,12,368,14,"combinedParams"],[373,26,368,28],[373,29,368,31,"routes"],[373,35,368,37],[373,36,368,38,"reduce"],[373,42,368,44],[373,43,368,45],[373,44,368,46,"acc"],[373,47,368,49],[373,49,368,51,"r"],[373,50,368,52],[373,55,368,57,"Object"],[373,61,368,63],[373,62,368,64,"assign"],[373,68,368,70],[373,69,368,71,"acc"],[373,72,368,74],[373,74,368,76,"r"],[373,75,368,77],[373,76,368,78,"params"],[373,82,368,84],[373,83,368,85],[373,85,368,87],[373,86,368,88],[373,87,368,89],[373,88,368,90],[374,8,369,8],[374,12,369,14,"hasCombinedParams"],[374,29,369,31],[374,32,369,34,"Object"],[374,38,369,40],[374,39,369,41,"keys"],[374,43,369,45],[374,44,369,46,"combinedParams"],[374,58,369,60],[374,59,369,61],[374,60,369,62,"length"],[374,66,369,68],[374,69,369,71],[374,70,369,72],[375,8,370,8],[376,8,371,8,"routes"],[376,14,371,14],[376,17,371,17,"routes"],[376,23,371,23],[376,24,371,24,"map"],[376,27,371,27],[376,28,371,29,"r"],[376,29,371,30],[376,33,371,35],[377,10,372,12],[377,14,372,16,"hasCombinedParams"],[377,31,372,33],[377,33,372,35],[378,12,373,16,"r"],[378,13,373,17],[378,14,373,18,"params"],[378,20,373,24],[378,23,373,27,"combinedParams"],[378,37,373,41],[379,10,374,12],[380,10,375,12],[380,17,375,19,"r"],[380,18,375,20],[381,8,376,8],[381,9,376,9],[381,10,376,10],[382,8,377,8,"remainingPath"],[382,21,377,21],[382,24,377,24,"remainingPath"],[382,37,377,37],[382,38,377,38,"replace"],[382,45,377,45],[382,46,377,46,"match"],[382,51,377,51],[382,52,377,52],[382,53,377,53],[382,54,377,54],[382,56,377,56],[382,58,377,58],[382,59,377,59],[383,8,377,60],[384,6,379,4],[384,7,379,5],[385,6,379,5,"_ret"],[385,10,379,5],[386,4,307,4],[386,9,307,9],[386,13,307,15,"config"],[386,19,307,21],[386,23,307,25,"configs"],[386,30,307,32],[387,6,307,32,"_ret"],[387,10,307,32],[387,13,307,32,"_loop"],[387,18,307,32],[387,19,307,32,"config"],[387,25,307,32],[388,6,307,32],[388,10,307,32,"_ret"],[388,14,307,32],[388,22,309,12],[389,6,309,21],[389,10,309,21,"_ret"],[389,14,309,21],[389,22,378,8],[390,4,378,14],[391,4,380,4],[391,11,380,11,"routes"],[391,17,380,17],[392,2,381,0],[393,2,382,0],[393,11,382,9,"equalHeritage"],[393,24,382,22,"equalHeritage"],[393,25,382,23,"a"],[393,26,382,24],[393,28,382,26,"b"],[393,29,382,27],[393,31,382,29],[394,4,383,4],[394,8,383,8,"a"],[394,9,383,9],[394,10,383,10,"length"],[394,16,383,16],[394,21,383,21,"b"],[394,22,383,22],[394,23,383,23,"length"],[394,29,383,29],[394,31,383,31],[395,6,384,8],[395,13,384,15],[395,18,384,20],[396,4,385,4],[397,4,386,4],[397,9,386,9],[397,13,386,13,"i"],[397,14,386,14],[397,17,386,17],[397,18,386,18],[397,20,386,20,"i"],[397,21,386,21],[397,24,386,24,"a"],[397,25,386,25],[397,26,386,26,"length"],[397,32,386,32],[397,34,386,34,"i"],[397,35,386,35],[397,37,386,37],[397,39,386,39],[398,6,387,8],[398,10,387,12,"a"],[398,11,387,13],[398,12,387,14,"i"],[398,13,387,15],[398,14,387,16],[398,15,387,17,"localeCompare"],[398,28,387,30],[398,29,387,31,"b"],[398,30,387,32],[398,31,387,33,"i"],[398,32,387,34],[398,33,387,35],[398,34,387,36],[398,39,387,41],[398,40,387,42],[398,42,387,44],[399,8,388,12],[399,15,388,19],[399,20,388,24],[400,6,389,8],[401,4,390,4],[402,4,391,4],[402,11,391,11],[402,15,391,15],[403,2,392,0],[404,2,393,0],[404,6,393,6,"createNormalizedConfigs"],[404,29,393,29],[404,32,393,32],[404,41,393,32,"createNormalizedConfigs"],[404,42,393,33,"screen"],[404,48,393,39],[404,50,393,41,"routeConfig"],[404,61,393,52],[404,63,393,124],[405,4,393,124],[405,8,393,54,"routeNames"],[405,18,393,64],[405,21,393,64,"arguments"],[405,30,393,64],[405,31,393,64,"length"],[405,37,393,64],[405,45,393,64,"arguments"],[405,54,393,64],[405,62,393,64,"undefined"],[405,71,393,64],[405,74,393,64,"arguments"],[405,83,393,64],[405,89,393,67],[405,91,393,69],[406,4,393,69],[406,8,393,71,"initials"],[406,16,393,79],[406,19,393,79,"arguments"],[406,28,393,79],[406,29,393,79,"length"],[406,35,393,79],[406,43,393,79,"arguments"],[406,52,393,79],[406,60,393,79,"undefined"],[406,69,393,79],[406,72,393,79,"arguments"],[406,81,393,79],[406,87,393,82],[406,89,393,84],[407,4,393,84],[407,8,393,86,"parentScreens"],[407,21,393,99],[407,24,393,99,"arguments"],[407,33,393,99],[407,34,393,99,"length"],[407,40,393,99],[407,48,393,99,"arguments"],[407,57,393,99],[407,65,393,99,"undefined"],[407,74,393,99],[407,77,393,99,"arguments"],[407,86,393,99],[407,92,393,102],[407,94,393,104],[408,4,393,104],[408,8,393,106,"parentPattern"],[408,21,393,119],[408,24,393,119,"arguments"],[408,33,393,119],[408,34,393,119,"length"],[408,40,393,119],[408,47,393,119,"arguments"],[408,56,393,119],[408,62,393,119,"undefined"],[408,71,393,119],[409,4,394,4],[409,8,394,10,"configs"],[409,15,394,17],[409,18,394,20],[409,20,394,22],[410,4,395,4,"routeNames"],[410,14,395,14],[410,15,395,15,"push"],[410,19,395,19],[410,20,395,20,"screen"],[410,26,395,26],[410,27,395,27],[411,4,396,4,"parentScreens"],[411,17,396,17],[411,18,396,18,"push"],[411,22,396,22],[411,23,396,23,"screen"],[411,29,396,29],[411,30,396,30],[412,4,397,4],[412,8,397,10,"config"],[412,14,397,16],[412,17,397,19,"routeConfig"],[412,28,397,30],[412,29,397,31,"screen"],[412,35,397,37],[412,36,397,38],[413,4,398,4],[413,8,398,8],[413,15,398,15,"config"],[413,21,398,21],[413,26,398,26],[413,34,398,34],[413,36,398,36],[414,6,399,8],[415,6,400,8],[416,6,401,8],[416,10,401,14,"pattern"],[416,17,401,21],[416,20,401,24,"parentPattern"],[416,33,401,37],[416,36,401,40,"joinPaths"],[416,45,401,49],[416,46,401,50,"parentPattern"],[416,59,401,63],[416,61,401,65,"config"],[416,67,401,71],[416,68,401,72],[416,71,401,75,"config"],[416,77,401,81],[417,6,402,8,"configs"],[417,13,402,15],[417,14,402,16,"push"],[417,18,402,20],[417,19,402,21,"createConfigItem"],[417,35,402,37],[417,36,402,38,"screen"],[417,42,402,44],[417,44,402,46,"routeNames"],[417,54,402,56],[417,56,402,58,"pattern"],[417,63,402,65],[417,65,402,67,"config"],[417,71,402,73],[417,73,402,75],[417,78,402,80],[417,79,402,81],[417,80,402,82],[418,4,403,4],[418,5,403,5],[418,11,404,9],[418,15,404,13],[418,22,404,20,"config"],[418,28,404,26],[418,33,404,31],[418,41,404,39],[418,43,404,41],[419,6,405,8],[419,10,405,12,"pattern"],[419,18,405,19],[420,6,406,8],[420,10,406,16,"_route"],[420,16,406,22],[420,19,406,27,"config"],[420,25,406,33],[420,26,406,16,"_route"],[420,32,406,22],[421,6,407,8],[422,6,408,8],[423,6,409,8],[424,6,410,8],[424,10,410,12],[424,17,410,19,"config"],[424,23,410,25],[424,24,410,26,"path"],[424,28,410,30],[424,33,410,35],[424,41,410,43],[424,43,410,45],[425,8,411,12],[425,12,411,16,"config"],[425,18,411,22],[425,19,411,23,"exact"],[425,24,411,28],[425,28,411,32,"config"],[425,34,411,38],[425,35,411,39,"path"],[425,39,411,43],[425,44,411,48,"undefined"],[425,53,411,57],[425,55,411,59],[426,10,412,16],[426,16,412,22],[426,20,412,26,"Error"],[426,25,412,31],[426,26,412,32],[426,176,412,182],[426,177,412,183],[427,8,413,12],[428,8,414,12,"pattern"],[428,16,414,19],[428,19,415,16,"config"],[428,25,415,22],[428,26,415,23,"exact"],[428,31,415,28],[428,36,415,33],[428,40,415,37],[428,43,416,22,"joinPaths"],[428,52,416,31],[428,53,416,32,"parentPattern"],[428,66,416,45],[428,70,416,49],[428,72,416,51],[428,74,416,53,"config"],[428,80,416,59],[428,81,416,60,"path"],[428,85,416,64],[428,89,416,68],[428,91,416,70],[428,92,416,71],[428,95,417,22,"config"],[428,101,417,28],[428,102,417,29,"path"],[428,106,417,33],[428,110,417,37],[428,112,417,39],[429,8,418,12,"configs"],[429,15,418,19],[429,16,418,20,"push"],[429,20,418,24],[429,21,418,25,"createConfigItem"],[429,37,418,41],[429,38,418,42,"screen"],[429,44,418,48],[429,46,418,50,"routeNames"],[429,56,418,60],[429,58,418,62,"pattern"],[429,66,418,69],[429,68,418,71,"config"],[429,74,418,77],[429,75,418,78,"path"],[429,79,418,82],[429,81,418,84,"config"],[429,87,418,90],[429,88,418,91,"screens"],[429,95,418,98],[429,98,418,101],[429,99,418,102],[429,100,418,103,"Object"],[429,106,418,109],[429,107,418,110,"keys"],[429,111,418,114],[429,112,418,115,"config"],[429,118,418,121],[429,119,418,122,"screens"],[429,126,418,129],[429,127,418,130],[429,129,418,132,"length"],[429,135,418,138],[429,138,418,141],[429,143,418,146],[429,145,418,148,"config"],[429,151,418,154],[429,152,418,155,"parse"],[429,157,418,160],[429,159,418,162,"_route"],[429,165,418,168],[429,166,418,169],[429,167,418,170],[430,6,419,8],[431,6,420,8],[431,10,420,12,"config"],[431,16,420,18],[431,17,420,19,"screens"],[431,24,420,26],[431,26,420,28],[432,8,421,12],[433,8,422,12],[433,12,422,16,"config"],[433,18,422,22],[433,19,422,23,"initialRouteName"],[433,35,422,39],[433,37,422,41],[434,10,423,16,"initials"],[434,18,423,24],[434,19,423,25,"push"],[434,23,423,29],[434,24,423,30],[435,12,424,20,"initialRouteName"],[435,28,424,36],[435,30,424,38,"config"],[435,36,424,44],[435,37,424,45,"initialRouteName"],[435,53,424,61],[436,12,425,20,"parentScreens"],[437,10,426,16],[437,11,426,17],[437,12,426,18],[438,8,427,12],[439,8,428,12,"Object"],[439,14,428,18],[439,15,428,19,"keys"],[439,19,428,23],[439,20,428,24,"config"],[439,26,428,30],[439,27,428,31,"screens"],[439,34,428,38],[439,35,428,39],[439,36,428,40,"forEach"],[439,43,428,47],[439,44,428,49,"nestedConfig"],[439,56,428,61],[439,60,428,66],[440,10,429,16],[440,14,429,22,"result"],[440,20,429,28],[440,23,429,31,"createNormalizedConfigs"],[440,46,429,54],[440,47,429,55,"nestedConfig"],[440,59,429,67],[440,61,429,69,"config"],[440,67,429,75],[440,68,429,76,"screens"],[440,75,429,83],[440,77,429,85,"routeNames"],[440,87,429,95],[440,89,429,97,"initials"],[440,97,429,105],[440,99,429,107],[440,100,429,108],[440,103,429,111,"parentScreens"],[440,116,429,124],[440,117,429,125],[440,119,429,127,"pattern"],[440,127,429,134],[440,131,429,138,"parentPattern"],[440,144,429,151],[440,145,429,152],[441,10,430,16,"configs"],[441,17,430,23],[441,18,430,24,"push"],[441,22,430,28],[441,23,430,29],[441,26,430,32,"result"],[441,32,430,38],[441,33,430,39],[442,8,431,12],[442,9,431,13],[442,10,431,14],[443,6,432,8],[444,4,433,4],[445,4,434,4,"routeNames"],[445,14,434,14],[445,15,434,15,"pop"],[445,18,434,18],[445,19,434,19],[445,20,434,20],[446,4,435,4],[446,11,435,11,"configs"],[446,18,435,18],[447,2,436,0],[447,3,436,1],[448,2,437,0],[448,11,437,9,"formatRegexPattern"],[448,29,437,27,"formatRegexPattern"],[448,30,437,28,"it"],[448,32,437,30],[448,34,437,32],[449,4,438,4],[450,4,439,4,"it"],[450,6,439,6],[450,9,439,9,"it"],[450,11,439,11],[450,12,439,12,"replace"],[450,19,439,19],[450,20,439,20],[450,23,439,23],[450,25,439,25],[450,30,439,30],[450,31,439,31],[451,4,440,4],[451,8,440,8,"it"],[451,10,440,10],[451,11,440,11,"startsWith"],[451,21,440,21],[451,22,440,22],[451,25,440,25],[451,26,440,26],[451,28,440,28],[452,6,441,8],[453,6,442,8],[453,13,442,15],[453,27,442,29,"it"],[453,29,442,31],[453,30,442,32,"endsWith"],[453,38,442,40],[453,39,442,41],[453,42,442,44],[453,43,442,45],[453,46,442,48],[453,49,442,51],[453,52,442,54],[453,54,442,56],[453,57,442,59],[454,4,443,4],[454,5,443,5],[454,11,444,9],[454,15,444,13,"it"],[454,17,444,15],[454,18,444,16,"startsWith"],[454,28,444,26],[454,29,444,27],[454,32,444,30],[454,33,444,31],[454,35,444,33],[455,6,445,8],[455,13,445,15],[455,24,445,26,"it"],[455,26,445,28],[455,27,445,29,"endsWith"],[455,35,445,37],[455,36,445,38],[455,39,445,41],[455,40,445,42],[455,43,445,45],[455,46,445,48],[455,49,445,51],[455,51,445,53],[455,54,445,56],[456,4,446,4],[457,4,447,4],[458,4,448,4],[458,8,448,8],[458,9,448,9],[458,10,448,10],[458,12,448,12,"matchers_1"],[458,22,448,22],[458,23,448,23,"matchGroupName"],[458,37,448,37],[458,39,448,39,"it"],[458,41,448,41],[458,42,448,42],[458,46,448,46],[458,50,448,50],[458,52,448,52],[459,6,449,8],[460,6,450,8],[461,6,451,8],[462,6,452,8],[462,13,452,15],[462,19,452,21],[462,20,452,22],[462,21,452,23],[462,23,452,25,"escape_string_regexp_1"],[462,45,452,47],[462,46,452,48,"default"],[462,53,452,55],[462,55,452,57,"it"],[462,57,452,59],[462,58,452,60],[462,65,452,67],[463,4,453,4],[464,4,454,4],[464,11,454,11],[464,12,454,12],[464,13,454,13],[464,15,454,15,"escape_string_regexp_1"],[464,37,454,37],[464,38,454,38,"default"],[464,45,454,45],[464,47,454,47,"it"],[464,49,454,49],[464,50,454,50],[464,53,454,53],[464,58,454,58],[465,2,455,0],[466,2,456,0],[466,6,456,6,"createConfigItem"],[466,22,456,22],[466,25,456,25,"createConfigItem"],[466,26,456,26,"screen"],[466,32,456,32],[466,34,456,34,"routeNames"],[466,44,456,44],[466,46,456,46,"pattern"],[466,53,456,53],[466,55,456,55,"path"],[466,59,456,59],[466,61,456,61,"hasChildren"],[466,72,456,72],[466,74,456,74,"parse"],[466,79,456,79],[466,81,456,81,"_route"],[466,87,456,87],[466,92,456,92],[467,4,457,4],[468,4,458,4,"pattern"],[468,11,458,11],[468,14,458,14,"pattern"],[468,21,458,21],[468,22,458,22,"split"],[468,27,458,27],[468,28,458,28],[468,31,458,31],[468,32,458,32],[468,33,458,33,"filter"],[468,39,458,39],[468,40,458,40,"Boolean"],[468,47,458,47],[468,48,458,48],[468,49,458,49,"join"],[468,53,458,53],[468,54,458,54],[468,57,458,57],[468,58,458,58],[469,4,459,4],[469,8,459,10,"regex"],[469,13,459,15],[469,16,459,18,"pattern"],[469,23,459,25],[469,26,460,10],[469,30,460,14,"RegExp"],[469,36,460,20],[469,37,460,21],[469,42,460,26,"pattern"],[469,49,460,33],[469,50,460,34,"split"],[469,55,460,39],[469,56,460,40],[469,59,460,43],[469,60,460,44],[469,61,460,45,"map"],[469,64,460,48],[469,65,460,49,"formatRegexPattern"],[469,83,460,67],[469,84,460,68],[469,85,460,69,"join"],[469,89,460,73],[469,90,460,74],[469,92,460,76],[469,93,460,77],[469,97,460,81],[469,98,460,82],[469,101,461,10,"undefined"],[469,110,461,19],[470,4,462,4],[470,11,462,11],[471,6,463,8,"screen"],[471,12,463,14],[472,6,464,8,"regex"],[472,11,464,13],[473,6,465,8,"pattern"],[473,13,465,15],[474,6,466,8,"path"],[474,10,466,12],[475,6,467,8],[476,6,468,8,"routeNames"],[476,16,468,18],[476,18,468,20],[476,19,468,21],[476,22,468,24,"routeNames"],[476,32,468,34],[476,33,468,35],[477,6,469,8,"expandedRouteNames"],[477,24,469,26],[477,26,469,28,"screen"],[477,32,469,34],[477,33,469,35,"includes"],[477,41,469,43],[477,42,469,44],[477,45,469,47],[477,46,469,48],[477,49,470,14],[477,50,470,15],[477,53,470,18,"routeNames"],[477,63,470,28],[477,64,470,29,"slice"],[477,69,470,34],[477,70,470,35],[477,71,470,36],[477,73,470,38],[477,74,470,39],[477,75,470,40],[477,76,470,41],[477,78,470,43],[477,81,470,46,"screen"],[477,87,470,52],[477,88,470,53,"split"],[477,93,470,58],[477,94,470,59],[477,97,470,62],[477,98,470,63],[477,99,470,64],[477,102,471,14],[477,103,471,15],[477,106,471,18,"routeNames"],[477,116,471,28],[477,117,471,29],[478,6,472,8,"parse"],[478,11,472,13],[479,6,473,8,"userReadableName"],[479,22,473,24],[479,24,473,26],[479,25,473,27],[479,28,473,30,"routeNames"],[479,38,473,40],[479,39,473,41,"slice"],[479,44,473,46],[479,45,473,47],[479,46,473,48],[479,48,473,50],[479,49,473,51],[479,50,473,52],[479,51,473,53],[479,53,473,55,"path"],[479,57,473,59],[479,61,473,63,"screen"],[479,67,473,69],[479,68,473,70],[479,69,473,71,"join"],[479,73,473,75],[479,74,473,76],[479,77,473,79],[479,78,473,80],[480,6,474,8,"hasChildren"],[480,17,474,19],[480,19,474,21],[480,20,474,22],[480,21,474,23,"hasChildren"],[480,32,474,34],[481,6,475,8,"_route"],[482,4,476,4],[482,5,476,5],[483,2,477,0],[483,3,477,1],[484,2,478,0],[484,6,478,6,"findParseConfigForRoute"],[484,29,478,29],[484,32,478,32,"findParseConfigForRoute"],[484,33,478,33,"routeName"],[484,42,478,42],[484,44,478,44,"routeConfigs"],[484,56,478,56],[484,61,478,61],[485,4,479,4],[485,9,479,9],[485,13,479,15,"config"],[485,19,479,21],[485,23,479,25,"routeConfigs"],[485,35,479,37],[485,37,479,39],[486,6,480,8],[486,10,480,12,"routeName"],[486,19,480,21],[486,24,480,26,"config"],[486,30,480,32],[486,31,480,33,"routeNames"],[486,41,480,43],[486,42,480,44,"config"],[486,48,480,50],[486,49,480,51,"routeNames"],[486,59,480,61],[486,60,480,62,"length"],[486,66,480,68],[486,69,480,71],[486,70,480,72],[486,71,480,73],[486,73,480,75],[487,8,481,12],[487,15,481,19,"config"],[487,21,481,25],[487,22,481,26,"parse"],[487,27,481,31],[488,6,482,8],[489,4,483,4],[490,4,484,4],[490,11,484,11,"undefined"],[490,20,484,20],[491,2,485,0],[491,3,485,1],[492,2,486,0],[493,2,487,0],[493,6,487,6,"findInitialRoute"],[493,22,487,22],[493,25,487,25,"findInitialRoute"],[493,26,487,26,"routeName"],[493,35,487,35],[493,37,487,37,"parentScreens"],[493,50,487,50],[493,52,487,52,"initialRoutes"],[493,65,487,65],[493,70,487,70],[494,4,488,4],[494,9,488,9],[494,13,488,15,"config"],[494,19,488,21],[494,23,488,25,"initialRoutes"],[494,36,488,38],[494,38,488,40],[495,6,489,8],[495,10,489,12,"equalHeritage"],[495,23,489,25],[495,24,489,26,"parentScreens"],[495,37,489,39],[495,39,489,41,"config"],[495,45,489,47],[495,46,489,48,"parentScreens"],[495,59,489,61],[495,60,489,62],[495,62,489,64],[496,8,490,12],[497,8,491,12],[498,8,492,12],[498,15,492,19,"routeName"],[498,24,492,28],[498,29,492,33,"config"],[498,35,492,39],[498,36,492,40,"initialRouteName"],[498,52,492,56],[498,55,492,59,"config"],[498,61,492,65],[498,62,492,66,"initialRouteName"],[498,78,492,82],[498,81,492,85,"undefined"],[498,90,492,94],[499,6,493,8],[500,4,494,4],[501,4,495,4],[501,11,495,11,"undefined"],[501,20,495,20],[502,2,496,0],[502,3,496,1],[503,2,497,0],[504,2,498,0],[505,2,499,0],[505,6,499,6,"createStateObject"],[505,23,499,23],[505,26,499,26,"createStateObject"],[505,27,499,27,"route"],[505,32,499,32],[505,34,499,34,"isEmpty"],[505,41,499,41],[505,43,499,43,"initialRoute"],[505,55,499,55],[505,60,499,60],[506,4,500,4],[506,8,500,8,"isEmpty"],[506,15,500,15],[506,17,500,17],[507,6,501,8],[507,10,501,12,"initialRoute"],[507,22,501,24],[507,24,501,26],[508,8,502,12],[508,15,502,19],[509,10,503,16,"index"],[509,15,503,21],[509,17,503,23],[509,18,503,24],[510,10,504,16,"routes"],[510,16,504,22],[510,18,504,24],[510,19,504,25],[511,12,504,27,"name"],[511,16,504,31],[511,18,504,33,"initialRoute"],[511,30,504,45],[512,12,504,47,"params"],[512,18,504,53],[512,20,504,55,"route"],[512,25,504,60],[512,26,504,61,"params"],[513,10,504,68],[513,11,504,69],[513,13,504,71,"route"],[513,18,504,76],[514,8,505,12],[514,9,505,13],[515,6,506,8],[516,6,507,8],[516,13,507,15],[517,8,508,12,"routes"],[517,14,508,18],[517,16,508,20],[517,17,508,21,"route"],[517,22,508,26],[518,6,509,8],[518,7,509,9],[519,4,510,4],[520,4,511,4],[520,8,511,8,"initialRoute"],[520,20,511,20],[520,22,511,22],[521,6,512,8],[521,13,512,15],[522,8,513,12,"index"],[522,13,513,17],[522,15,513,19],[522,16,513,20],[523,8,514,12,"routes"],[523,14,514,18],[523,16,514,20],[523,17,515,16],[524,10,515,18,"name"],[524,14,515,22],[524,16,515,24,"initialRoute"],[524,28,515,36],[525,10,515,38,"params"],[525,16,515,44],[525,18,515,46,"route"],[525,23,515,51],[525,24,515,52,"params"],[526,8,515,59],[526,9,515,60],[526,11,516,16],[527,10,516,18],[527,13,516,21,"route"],[527,18,516,26],[528,10,516,28,"state"],[528,15,516,33],[528,17,516,35],[529,12,516,37,"routes"],[529,18,516,43],[529,20,516,45],[530,10,516,48],[531,8,516,50],[531,9,516,51],[532,6,518,8],[532,7,518,9],[533,4,519,4],[534,4,520,4],[534,11,520,11],[535,6,521,8,"routes"],[535,12,521,14],[535,14,521,16],[535,15,521,17],[536,8,521,19],[536,11,521,22,"route"],[536,16,521,27],[537,8,521,29,"state"],[537,13,521,34],[537,15,521,36],[538,10,521,38,"routes"],[538,16,521,44],[538,18,521,46],[539,8,521,49],[540,6,521,51],[540,7,521,52],[541,4,522,4],[541,5,522,5],[542,2,523,0],[542,3,523,1],[543,2,524,0],[543,6,524,6,"createNestedStateObject"],[543,29,524,29],[543,32,524,32,"createNestedStateObject"],[543,33,524,33,"path"],[543,37,524,37],[543,39,524,39,"hash"],[543,43,524,43],[543,45,524,45,"routes"],[543,51,524,51],[543,53,524,53,"routeConfigs"],[543,65,524,65],[543,67,524,67,"initialRoutes"],[543,80,524,80],[543,85,524,85],[544,4,525,4],[544,8,525,8,"route"],[544,13,525,13],[544,16,525,16,"routes"],[544,22,525,22],[544,23,525,23,"shift"],[544,28,525,28],[544,29,525,29],[544,30,525,30],[545,4,526,4],[545,8,526,10,"parentScreens"],[545,21,526,23],[545,24,526,26],[545,26,526,28],[546,4,527,4],[546,8,527,8,"initialRoute"],[546,20,527,20],[546,23,527,23,"findInitialRoute"],[546,39,527,39],[546,40,527,40,"route"],[546,45,527,45],[546,46,527,46,"name"],[546,50,527,50],[546,52,527,52,"parentScreens"],[546,65,527,65],[546,67,527,67,"initialRoutes"],[546,80,527,80],[546,81,527,81],[547,4,528,4,"parentScreens"],[547,17,528,17],[547,18,528,18,"push"],[547,22,528,22],[547,23,528,23,"route"],[547,28,528,28],[547,29,528,29,"name"],[547,33,528,33],[547,34,528,34],[548,4,529,4],[548,8,529,10,"state"],[548,13,529,15],[548,16,529,18,"createStateObject"],[548,33,529,35],[548,34,529,36,"route"],[548,39,529,41],[548,41,529,43,"routes"],[548,47,529,49],[548,48,529,50,"length"],[548,54,529,56],[548,59,529,61],[548,60,529,62],[548,62,529,64,"initialRoute"],[548,74,529,76],[548,75,529,77],[549,4,530,4],[549,8,530,8,"routes"],[549,14,530,14],[549,15,530,15,"length"],[549,21,530,21],[549,24,530,24],[549,25,530,25],[549,27,530,27],[550,6,531,8],[550,10,531,12,"nestedState"],[550,21,531,23],[550,24,531,26,"state"],[550,29,531,31],[551,6,532,8],[551,13,532,16,"route"],[551,18,532,21],[551,21,532,24,"routes"],[551,27,532,30],[551,28,532,31,"shift"],[551,33,532,36],[551,34,532,37],[551,35,532,38],[551,37,532,41],[552,8,533,12,"initialRoute"],[552,20,533,24],[552,23,533,27,"findInitialRoute"],[552,39,533,43],[552,40,533,44,"route"],[552,45,533,49],[552,46,533,50,"name"],[552,50,533,54],[552,52,533,56,"parentScreens"],[552,65,533,69],[552,67,533,71,"initialRoutes"],[552,80,533,84],[552,81,533,85],[553,8,534,12],[553,12,534,18,"nestedStateIndex"],[553,28,534,34],[553,31,534,37,"nestedState"],[553,42,534,48],[553,43,534,49,"index"],[553,48,534,54],[553,52,534,58,"nestedState"],[553,63,534,69],[553,64,534,70,"routes"],[553,70,534,76],[553,71,534,77,"length"],[553,77,534,83],[553,80,534,86],[553,81,534,87],[554,8,535,12,"nestedState"],[554,19,535,23],[554,20,535,24,"routes"],[554,26,535,30],[554,27,535,31,"nestedStateIndex"],[554,43,535,47],[554,44,535,48],[554,45,535,49,"state"],[554,50,535,54],[554,53,535,57,"createStateObject"],[554,70,535,74],[554,71,535,75,"route"],[554,76,535,80],[554,78,535,82,"routes"],[554,84,535,88],[554,85,535,89,"length"],[554,91,535,95],[554,96,535,100],[554,97,535,101],[554,99,535,103,"initialRoute"],[554,111,535,115],[554,112,535,116],[555,8,536,12],[555,12,536,16,"routes"],[555,18,536,22],[555,19,536,23,"length"],[555,25,536,29],[555,28,536,32],[555,29,536,33],[555,31,536,35],[556,10,537,16,"nestedState"],[556,21,537,27],[556,24,537,30,"nestedState"],[556,35,537,41],[556,36,537,42,"routes"],[556,42,537,48],[556,43,537,49,"nestedStateIndex"],[556,59,537,65],[556,60,537,66],[556,61,537,67,"state"],[556,66,537,72],[557,8,538,12],[558,8,539,12,"parentScreens"],[558,21,539,25],[558,22,539,26,"push"],[558,26,539,30],[558,27,539,31,"route"],[558,32,539,36],[558,33,539,37,"name"],[558,37,539,41],[558,38,539,42],[559,6,540,8],[560,4,541,4],[561,4,542,4,"route"],[561,9,542,9],[561,12,542,12],[561,13,542,13],[561,14,542,14],[561,16,542,16,"findFocusedRoute_1"],[561,34,542,34],[561,35,542,35,"findFocusedRoute"],[561,51,542,51],[561,53,542,53,"state"],[561,58,542,58],[561,59,542,59],[562,4,543,4],[563,4,544,4,"route"],[563,9,544,9],[563,10,544,10,"path"],[563,14,544,14],[563,17,544,17,"path"],[563,21,544,21],[564,4,545,4],[564,8,545,10,"params"],[564,14,545,16],[564,17,545,19,"parseQueryParams"],[564,33,545,35],[564,34,545,36,"route"],[564,39,545,41],[564,40,545,42,"path"],[564,44,545,46],[564,46,545,48,"findParseConfigForRoute"],[564,69,545,71],[564,70,545,72,"route"],[564,75,545,77],[564,76,545,78,"name"],[564,80,545,82],[564,82,545,84,"routeConfigs"],[564,94,545,96],[564,95,545,97],[564,96,545,98],[565,4,546,4],[565,8,546,8,"params"],[565,14,546,14],[565,16,546,16],[566,6,547,8,"route"],[566,11,547,13],[566,12,547,14,"params"],[566,18,547,20],[566,21,547,23,"Object"],[566,27,547,29],[566,28,547,30,"assign"],[566,34,547,36],[566,35,547,37,"Object"],[566,41,547,43],[566,42,547,44,"create"],[566,48,547,50],[566,49,547,51],[566,53,547,55],[566,54,547,56],[566,56,547,58,"route"],[566,61,547,63],[566,62,547,64,"params"],[566,68,547,70],[566,69,547,71],[567,6,548,8],[567,15,548,8,"_ref"],[567,19,548,8],[567,23,548,36,"Object"],[567,29,548,42],[567,30,548,43,"entries"],[567,37,548,50],[567,38,548,51,"params"],[567,44,548,57],[567,45,548,58],[567,47,548,60],[568,8,548,60],[568,12,548,60,"_ref2"],[568,17,548,60],[568,20,548,60,"_slicedToArray"],[568,34,548,60],[568,35,548,60,"_ref"],[568,39,548,60],[569,8,548,60],[569,12,548,20,"name"],[569,16,548,24],[569,19,548,24,"_ref2"],[569,24,548,24],[570,8,548,24],[570,12,548,26,"value"],[570,17,548,31],[570,20,548,31,"_ref2"],[570,25,548,31],[571,8,549,12],[571,12,549,16,"route"],[571,17,549,21],[571,18,549,22,"params"],[571,24,549,28],[571,27,549,31,"name"],[571,31,549,35],[571,32,549,36],[571,34,549,38],[572,10,550,16],[572,14,550,20,"process"],[572,21,550,27],[572,22,550,28,"env"],[572,25,550,31],[572,26,550,32,"NODE_ENV"],[572,34,550,40],[572,39,550,45],[572,51,550,57],[572,53,550,59],[573,12,551,20,"console"],[573,19,551,27],[573,20,551,28,"warn"],[573,24,551,32],[573,25,551,33],[573,36,551,44,"route"],[573,41,551,49],[573,42,551,50,"name"],[573,46,551,54],[573,63,551,71,"name"],[573,67,551,75],[573,136,551,144],[573,137,551,145],[574,10,552,16],[575,8,553,12],[576,8,554,12],[576,12,554,16],[576,13,554,17,"route"],[576,18,554,22],[576,19,554,23,"params"],[576,25,554,29],[576,28,554,32,"name"],[576,32,554,36],[576,33,554,37],[576,35,554,39],[577,10,555,16,"route"],[577,15,555,21],[577,16,555,22,"params"],[577,22,555,28],[577,23,555,29,"name"],[577,27,555,33],[577,28,555,34],[577,31,555,37,"value"],[577,36,555,42],[578,10,556,16],[579,8,557,12],[580,6,558,8],[581,6,559,8],[581,10,559,12,"Object"],[581,16,559,18],[581,17,559,19,"keys"],[581,21,559,23],[581,22,559,24,"route"],[581,27,559,29],[581,28,559,30,"params"],[581,34,559,36],[581,35,559,37],[581,36,559,38,"length"],[581,42,559,44],[581,47,559,49],[581,48,559,50],[581,50,559,52],[582,8,560,12],[582,15,560,19,"route"],[582,20,560,24],[582,21,560,25,"params"],[582,27,560,31],[583,6,561,8],[584,4,562,4],[585,4,563,4],[585,8,563,8,"hash"],[585,12,563,12],[585,14,563,14],[586,6,564,8,"route"],[586,11,564,13],[586,12,564,14,"params"],[586,18,564,20],[586,21,564,23,"Object"],[586,27,564,29],[586,28,564,30,"assign"],[586,34,564,36],[586,35,564,37,"Object"],[586,41,564,43],[586,42,564,44,"create"],[586,48,564,50],[586,49,564,51],[586,53,564,55],[586,54,564,56],[586,56,564,58,"route"],[586,61,564,63],[586,62,564,64,"params"],[586,68,564,70],[586,69,564,71],[587,6,565,8,"route"],[587,11,565,13],[587,12,565,14,"params"],[587,18,565,20],[587,19,565,21],[587,22,565,24],[587,23,565,25],[587,26,565,28,"hash"],[587,30,565,32],[588,4,566,4],[589,4,567,4],[589,11,567,11,"state"],[589,16,567,16],[590,2,568,0],[590,3,568,1],[591,2,569,0],[591,6,569,6,"parseQueryParams"],[591,22,569,22],[591,25,569,25,"parseQueryParams"],[591,26,569,26,"path"],[591,30,569,30],[591,32,569,32,"parseConfig"],[591,43,569,43],[591,48,569,48],[592,4,570,4],[592,8,570,10,"query"],[592,13,570,15],[592,16,570,18,"path"],[592,20,570,22],[592,21,570,23,"split"],[592,26,570,28],[592,27,570,29],[592,30,570,32],[592,31,570,33],[592,32,570,34],[592,33,570,35],[592,34,570,36],[593,4,571,4],[593,8,571,10,"searchParams"],[593,20,571,22],[593,23,571,25],[593,27,571,29,"URLSearchParams"],[593,42,571,44],[593,43,571,45,"query"],[593,48,571,50],[593,49,571,51],[594,4,572,4],[594,8,572,10,"params"],[594,14,572,16],[594,17,572,19,"Object"],[594,23,572,25],[594,24,572,26,"fromEntries"],[594,35,572,37],[595,4,573,4],[596,4,574,4,"searchParams"],[596,16,574,16],[596,17,574,17],[597,4,575,4],[597,8,575,8,"parseConfig"],[597,19,575,19],[597,21,575,21],[598,6,576,8,"Object"],[598,12,576,14],[598,13,576,15,"keys"],[598,17,576,19],[598,18,576,20,"params"],[598,24,576,26],[598,25,576,27],[598,26,576,28,"forEach"],[598,33,576,35],[598,34,576,37,"name"],[598,38,576,41],[598,42,576,46],[599,8,577,12],[599,12,577,16,"Object"],[599,18,577,22],[599,19,577,23,"hasOwnProperty"],[599,33,577,37],[599,34,577,38,"call"],[599,38,577,42],[599,39,577,43,"parseConfig"],[599,50,577,54],[599,52,577,56,"name"],[599,56,577,60],[599,57,577,61],[599,61,577,65],[599,68,577,72,"params"],[599,74,577,78],[599,75,577,79,"name"],[599,79,577,83],[599,80,577,84],[599,85,577,89],[599,93,577,97],[599,95,577,99],[600,10,578,16,"params"],[600,16,578,22],[600,17,578,23,"name"],[600,21,578,27],[600,22,578,28],[600,25,578,31,"parseConfig"],[600,36,578,42],[600,37,578,43,"name"],[600,41,578,47],[600,42,578,48],[600,43,578,49,"params"],[600,49,578,55],[600,50,578,56,"name"],[600,54,578,60],[600,55,578,61],[600,56,578,62],[601,8,579,12],[602,6,580,8],[602,7,580,9],[602,8,580,10],[603,4,581,4],[604,4,582,4],[604,11,582,11,"Object"],[604,17,582,17],[604,18,582,18,"keys"],[604,22,582,22],[604,23,582,23,"params"],[604,29,582,29],[604,30,582,30],[604,31,582,31,"length"],[604,37,582,37],[604,40,582,40,"params"],[604,46,582,46],[604,49,582,49,"undefined"],[604,58,582,58],[605,2,583,0],[605,3,583,1],[606,2,584,0],[606,6,584,6,"baseUrlCache"],[606,18,584,18],[606,21,584,21],[606,25,584,25,"Map"],[606,28,584,28],[606,29,584,29],[606,30,584,30],[607,2,585,0],[607,11,585,9,"getBaseUrlRegex"],[607,26,585,24,"getBaseUrlRegex"],[607,27,585,25,"baseUrl"],[607,34,585,32],[607,36,585,34],[608,4,586,4],[608,8,586,8,"baseUrlCache"],[608,20,586,20],[608,21,586,21,"has"],[608,24,586,24],[608,25,586,25,"baseUrl"],[608,32,586,32],[608,33,586,33],[608,35,586,35],[609,6,587,8],[609,13,587,15,"baseUrlCache"],[609,25,587,27],[609,26,587,28,"get"],[609,29,587,31],[609,30,587,32,"baseUrl"],[609,37,587,39],[609,38,587,40],[610,4,588,4],[611,4,589,4],[611,8,589,10,"regex"],[611,13,589,15],[611,16,589,18],[611,20,589,22,"RegExp"],[611,26,589,28],[611,27,589,29],[611,35,589,37],[611,36,589,38],[611,37,589,39],[611,39,589,41,"escape_string_regexp_1"],[611,61,589,63],[611,62,589,64,"default"],[611,69,589,71],[611,71,589,73,"baseUrl"],[611,78,589,80],[611,79,589,81],[611,81,589,83],[611,83,589,85],[611,86,589,88],[611,87,589,89],[612,4,590,4,"baseUrlCache"],[612,16,590,16],[612,17,590,17,"set"],[612,20,590,20],[612,21,590,21,"baseUrl"],[612,28,590,28],[612,30,590,30,"regex"],[612,35,590,35],[612,36,590,36],[613,4,591,4],[613,11,591,11,"regex"],[613,16,591,16],[614,2,592,0],[615,2,593,0],[615,11,593,9,"stripBaseUrl"],[615,23,593,21,"stripBaseUrl"],[615,24,593,22,"path"],[615,28,593,26],[615,30,593,65],[616,4,593,65],[616,8,593,28,"baseUrl"],[616,15,593,35],[616,18,593,35,"arguments"],[616,27,593,35],[616,28,593,35,"length"],[616,34,593,35],[616,42,593,35,"arguments"],[616,51,593,35],[616,59,593,35,"undefined"],[616,68,593,35],[616,71,593,35,"arguments"],[616,80,593,35],[617,4,594,4],[617,8,594,8,"process"],[617,15,594,15],[617,16,594,16,"env"],[617,19,594,19],[617,20,594,20,"NODE_ENV"],[617,28,594,28],[617,33,594,33],[617,46,594,46],[617,48,594,48],[618,6,595,8],[618,10,595,12,"baseUrl"],[618,17,595,19],[618,19,595,21],[619,8,596,12],[619,12,596,18,"reg"],[619,15,596,21],[619,18,596,24,"getBaseUrlRegex"],[619,33,596,39],[619,34,596,40,"baseUrl"],[619,41,596,47],[619,42,596,48],[620,8,597,12],[620,15,597,19,"path"],[620,19,597,23],[620,20,597,24,"replace"],[620,27,597,31],[620,28,597,32],[620,35,597,39],[620,37,597,41],[620,40,597,44],[620,41,597,45],[620,42,597,46,"replace"],[620,49,597,53],[620,50,597,54,"reg"],[620,53,597,57],[620,55,597,59],[620,57,597,61],[620,58,597,62],[621,6,598,8],[622,4,599,4],[623,4,600,4],[623,11,600,11,"path"],[623,15,600,15],[624,2,601,0],[625,2,602,0,"exports"],[625,9,602,7],[625,10,602,8,"stripBaseUrl"],[625,22,602,20],[625,25,602,23,"stripBaseUrl"],[625,37,602,35],[626,0,602,36],[626,3]],"functionMap":{"names":["<global>","<anonymous>","getUrlWithReactNavigationConcessions","getStateFromPath","getMatchableRouteConfigs","Object.keys.map$argument_0","initialRoutes.map$argument_0","converted.map$argument_0","convertedWithInitial.sort$argument_0","assertConfigDuplicates","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","sortConfigs","a.pattern.split.filter$argument_0","b.pattern.split.filter$argument_0","previousSegments.filter$argument_0","getStateFromEmptyPathWithConfigs","configs.filter$argument_0","configs.filter.map$argument_0","leafNodes.find$argument_0","match.routeNames.map$argument_0","getStateFromPathWithConfigs","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.filter$argument_0","config.pattern.split.filter.reduce$argument_0","routeFromName","configs.find$argument_0","segments.filter$argument_0","segments.filter.forEach$argument_0","config.routeNames.map$argument_0","routes.reduce$argument_0","routes.map$argument_0","equalHeritage","createNormalizedConfigs","Object.keys.forEach$argument_0","formatRegexPattern","createConfigItem","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams","getBaseUrlRegex","stripBaseUrl"],"mappings":"AAA;wDCC;CDE;AEO;CFoB;AGuB;CHG;AIE;aCmB,iED;sDEE,oEF;+CGC;MHK;8CIE,6CJ;CJI;ASE;mBCE;6DCU,sBD,YE,sBF;KDkB;CTC;AaC;gBCyB,sDD;+CEI,sDF;uDGM;KHE;uDGC;KHE;Cb2E;AiBC;gBCK,+BD;aEC;KFO;iCGC;kEHE;uBGC;4DHE;uBGG,iEH;wCII;KJQ;CjBE;AsBC;CtBmB;kBuBC;yBCC,mBD;cvBE;AyBC;oBCgB,uBD;oBEC;SFY;8BGC;wCCC,wBD;wBEO,uBF;yBGC;aHU;SHK;uCOC;SPQ;6CQE,wCR;4BSG;STK;CzBK;AmCC;CnCU;gCoCC;gDCmC;aDG;CpCK;AsCC;CtCkB;yBuCC;CvCqB;gCwCC;CxCO;yByCE;CzCS;0B0CG;C1CwB;gC2CC;C3C4C;yB4CC;oCPO;SOI;C5CG;A6CE;C7CO;A8CC;C9CQ"},"hasCjsExports":true},"type":"js/module"}]}