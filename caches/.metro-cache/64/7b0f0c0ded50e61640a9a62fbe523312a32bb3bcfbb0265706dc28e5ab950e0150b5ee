{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/objectWithoutProperties","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"fnQVLibs90KHiJ7y48fLgPWzDS0=","exportNames":["*"],"imports":1}},{"name":"@react-navigation/core","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":15,"index":175},"end":{"line":4,"column":48,"index":208}}],"key":"xujHbUBG5oDOE617zp8n2xt9qHw=","exportNames":["*"],"imports":1}},{"name":"../matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":19,"index":229},"end":{"line":5,"column":41,"index":251}}],"key":"lD+VV93WPi10A3qv5+9m649ytvA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\").default;\n  var _objectWithoutProperties = require(_dependencyMap[1], \"@babel/runtime/helpers/objectWithoutProperties\").default;\n  var _excluded = [\"preserveGroups\", \"preserveDynamicRoutes\"];\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.appendBaseUrl = exports.deepEqual = exports.getPathDataFromState = void 0;\n  var core_1 = require(_dependencyMap[2], \"@react-navigation/core\");\n  var matchers_1 = require(_dependencyMap[3], \"../matchers\");\n  var DEFAULT_SCREENS = {};\n  var getActiveRoute = state => {\n    var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n    if (route && isInvalidParams(route.params)) {\n      return getActiveRoute(createFakeState(route.params));\n    }\n    return route;\n  };\n  function createFakeState(params) {\n    return {\n      stale: false,\n      type: 'UNKNOWN',\n      key: 'UNKNOWN',\n      index: 0,\n      routeNames: [],\n      routes: [{\n        key: 'UNKNOWN',\n        name: params.screen,\n        params: params.params,\n        path: params.path\n      }]\n    };\n  }\n  function segmentMatchesConvention(segment) {\n    return segment === 'index' || (0, matchers_1.matchDynamicName)(segment) != null || (0, matchers_1.matchGroupName)(segment) != null || (0, matchers_1.matchDeepDynamicRouteName)(segment) != null;\n  }\n  function encodeURIComponentPreservingBrackets(str) {\n    return encodeURIComponent(str).replace(/%5B/g, '[').replace(/%5D/g, ']');\n  }\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, _options) {\n    return getPathDataFromState(state, _options).path;\n  }\n  exports.default = getPathFromState;\n  function getPathDataFromState(state) {\n    var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      screens: DEFAULT_SCREENS\n    };\n    if (state == null) {\n      throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n    }\n    var preserveGroups = _options.preserveGroups,\n      preserveDynamicRoutes = _options.preserveDynamicRoutes,\n      options = _objectWithoutProperties(_options, _excluded);\n    (0, core_1.validatePathConfig)(options);\n    // Expo Router disallows usage without a linking config.\n    if (Object.is(options.screens, DEFAULT_SCREENS)) {\n      throw Error(\"You must pass a 'screens' object to 'getPathFromState' to generate a path.\");\n    }\n    return getPathFromResolvedState(JSON.parse(JSON.stringify(state)),\n    // Create a normalized configs object which will be easier to use\n    createNormalizedConfigs(options.screens), {\n      preserveGroups,\n      preserveDynamicRoutes\n    });\n  }\n  exports.getPathDataFromState = getPathDataFromState;\n  function processParamsWithUserSettings(configItem, params) {\n    var stringify = configItem?.stringify;\n    return Object.fromEntries(Object.entries(params).map(_ref => {\n      var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n      return [key,\n      // TODO: Strip nullish values here.\n      stringify?.[key] ? stringify[key](value) :\n      // Preserve rest params\n      Array.isArray(value) ? value : String(value)];\n    }));\n  }\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n    if (Array.isArray(a) && Array.isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n      for (var i = 0; i < a.length; i++) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (typeof a === 'object' && typeof b === 'object') {\n      var keysA = Object.keys(a);\n      var keysB = Object.keys(b);\n      if (keysA.length !== keysB.length) {\n        return false;\n      }\n      for (var key of keysA) {\n        if (!deepEqual(a[key], b[key])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  exports.deepEqual = deepEqual;\n  function walkConfigItems(route, focusedRoute, configs, _ref3) {\n    var preserveDynamicRoutes = _ref3.preserveDynamicRoutes;\n    // NOTE(EvanBacon): Fill in current route using state that was passed as params.\n    if (!route.state && isInvalidParams(route.params)) {\n      route.state = createFakeState(route.params);\n    }\n    var pattern = null;\n    var focusedParams;\n    var hash;\n    var collectedParams = {};\n    while (route.name in configs) {\n      var configItem = configs[route.name];\n      var inputPattern = configItem.pattern;\n      if (inputPattern == null) {\n        // This should never happen in Expo Router.\n        throw new Error('Unexpected: No pattern found for route ' + route.name);\n      }\n      pattern = inputPattern;\n      if (route.params) {\n        if (route.params['#'] !== undefined) {\n          hash = route.params['#'];\n          delete route.params['#'];\n        }\n        var params = processParamsWithUserSettings(configItem, route.params);\n        if (pattern !== undefined && pattern !== null) {\n          Object.assign(collectedParams, params);\n        }\n        if (deepEqual(focusedRoute, route)) {\n          if (preserveDynamicRoutes) {\n            focusedParams = params;\n          } else {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = getParamsWithConventionsCollapsed({\n              params,\n              pattern,\n              routeName: route.name\n            });\n          }\n        }\n      }\n      if (!route.state && isInvalidParams(route.params)) {\n        route.state = createFakeState(route.params);\n      }\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!configItem.screens || route.state === undefined) {\n        if (configItem.initialRouteName && configItem.screens && configItem.initialRouteName in configItem.screens && configItem.screens[configItem.initialRouteName]?.pattern) {\n          var initialRouteConfig = configItem.screens[configItem.initialRouteName];\n          // NOTE(EvanBacon): Big hack to support initial route changes in tab bars.\n          pattern = initialRouteConfig.pattern;\n          if (focusedParams) {\n            if (!preserveDynamicRoutes) {\n              // If this is the focused route, keep the params for later use\n              // We save it here since it's been stringified already\n              focusedParams = getParamsWithConventionsCollapsed({\n                params: focusedParams,\n                pattern,\n                routeName: route.name\n              });\n            }\n          }\n        }\n        break;\n      }\n      var index = route.state.index ?? route.state.routes.length - 1;\n      var nextRoute = route.state.routes[index];\n      var nestedScreens = configItem.screens;\n      // if there is config for next route name, we go deeper\n      if (nestedScreens && nextRoute.name in nestedScreens) {\n        route = nextRoute;\n        configs = nestedScreens;\n      } else {\n        // If not, there is no sense in going deeper in config\n        break;\n      }\n    }\n    if (pattern == null) {\n      throw new Error(`No pattern found for route \"${route.name}\". Options are: ${Object.keys(configs).join(', ')}.`);\n    }\n    if (pattern && !focusedParams && focusedRoute.params) {\n      if (preserveDynamicRoutes) {\n        focusedParams = focusedRoute.params;\n      } else {\n        // If this is the focused route, keep the params for later use\n        // We save it here since it's been stringified already\n        focusedParams = getParamsWithConventionsCollapsed({\n          params: focusedRoute.params,\n          pattern,\n          routeName: route.name\n        });\n      }\n      Object.assign(focusedParams, collectedParams);\n    }\n    return {\n      pattern,\n      nextRoute: route,\n      focusedParams,\n      hash,\n      params: collectedParams\n    };\n  }\n  function getPathFromResolvedState(state, configs, _ref4) {\n    var preserveGroups = _ref4.preserveGroups,\n      preserveDynamicRoutes = _ref4.preserveDynamicRoutes;\n    var path = '';\n    var current = state;\n    var hash;\n    var allParams = {};\n    while (current) {\n      path += '/';\n      // Make mutable copies to ensure we don't leak state outside of the function.\n      var route = current.routes[current.index ?? 0];\n      // NOTE(EvanBacon): Fill in current route using state that was passed as params.\n      // if (isInvalidParams(route.params)) {\n      if (!route.state && isInvalidParams(route.params)) {\n        route.state = createFakeState(route.params);\n      }\n      var _walkConfigItems = walkConfigItems(route, getActiveRoute(current), {\n          ...configs\n        }, {\n          preserveDynamicRoutes\n        }),\n        pattern = _walkConfigItems.pattern,\n        _params = _walkConfigItems.params,\n        nextRoute = _walkConfigItems.nextRoute,\n        focusedParams = _walkConfigItems.focusedParams,\n        $hash = _walkConfigItems.hash;\n      if ($hash) {\n        hash = $hash;\n      }\n      Object.assign(allParams, _params);\n      path += getPathWithConventionsCollapsed({\n        pattern,\n        routePath: nextRoute.path,\n        params: allParams,\n        initialRouteName: configs[nextRoute.name]?.initialRouteName,\n        preserveGroups,\n        preserveDynamicRoutes\n      });\n      if (nextRoute.state &&\n      // NOTE(EvanBacon): The upstream implementation allows for sending in synthetic states (states that weren't generated by `getStateFromPath`)\n      // and any invalid routes will simply be ignored.\n      // Because of this, we need to check if the next route is valid before continuing, otherwise our more strict\n      // implementation will throw an error.\n      configs[nextRoute.state.routes?.[nextRoute.state?.index ?? 0]?.name]) {\n        // Continue looping with the next state if available.\n        current = nextRoute.state;\n      } else {\n        // Finished crawling state.\n        // Check for query params before exiting.\n        if (focusedParams) {\n          for (var param in focusedParams) {\n            // TODO: This is not good. We shouldn't squat strings named \"undefined\".\n            if (focusedParams[param] === 'undefined') {\n              // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n              delete focusedParams[param];\n            }\n          }\n          var query = new URLSearchParams(focusedParams).toString();\n          if (query) {\n            path += `?${query}`;\n          }\n        }\n        break;\n      }\n    }\n    if (hash) {\n      allParams['#'] = hash;\n      path += `#${hash}`;\n    }\n    var params = decodeParams(allParams);\n    return {\n      path: appendBaseUrl(basicSanitizePath(path)),\n      params\n    };\n  }\n  function decodeParams(params) {\n    var parsed = {};\n    for (var _ref5 of Object.entries(params)) {\n      var _ref6 = _slicedToArray(_ref5, 2);\n      var key = _ref6[0];\n      var value = _ref6[1];\n      try {\n        if (Array.isArray(value)) {\n          parsed[key] = value.map(v => decodeURIComponent(v));\n        } else {\n          parsed[key] = decodeURIComponent(value);\n        }\n      } catch {\n        parsed[key] = value;\n      }\n    }\n    return parsed;\n  }\n  function getPathWithConventionsCollapsed(_ref7) {\n    var pattern = _ref7.pattern,\n      routePath = _ref7.routePath,\n      params = _ref7.params,\n      preserveGroups = _ref7.preserveGroups,\n      preserveDynamicRoutes = _ref7.preserveDynamicRoutes,\n      initialRouteName = _ref7.initialRouteName;\n    var segments = pattern.split('/');\n    return segments.map((p, i) => {\n      var name = getParamName(p);\n      // We don't know what to show for wildcard patterns\n      // Showing the route name seems ok, though whatever we show here will be incorrect\n      // Since the page doesn't actually exist\n      if (p.startsWith('*')) {\n        if (preserveDynamicRoutes) {\n          if (name === 'not-found') {\n            return '+not-found';\n          }\n          return `[...${name}]`;\n        }\n        if (params[name]) {\n          if (Array.isArray(params[name])) {\n            return params[name].join('/');\n          }\n          return params[name];\n        }\n        if (i === 0) {\n          // This can occur when a wildcard matches all routes and the given path was `/`.\n          return routePath;\n        }\n        // remove existing segments from route.path and return it\n        // this is used for nested wildcard routes. Without this, the path would add\n        // all nested segments to the beginning of the wildcard route.\n        return routePath?.split('/').slice(i + 1).join('/');\n      }\n      // If the path has a pattern for a param, put the param in the path\n      if (p.startsWith(':')) {\n        if (preserveDynamicRoutes) {\n          return `[${name}]`;\n        }\n        // Optional params without value assigned in route.params should be ignored\n        return params[name];\n      }\n      if (!preserveGroups && (0, matchers_1.matchGroupName)(p) != null) {\n        // When the last part is a group it could be a shared URL\n        // if the route has an initialRouteName defined, then we should\n        // use that as the component path as we can assume it will be shown.\n        if (segments.length - 1 === i) {\n          if (initialRouteName) {\n            // Return an empty string if the init route is ambiguous.\n            if (segmentMatchesConvention(initialRouteName)) {\n              return '';\n            }\n            return encodeURIComponentPreservingBrackets(initialRouteName);\n          }\n        }\n        return '';\n      }\n      // Preserve dynamic syntax for rehydration\n      return encodeURIComponentPreservingBrackets(p);\n    }).map(v => v ?? '').join('/');\n  }\n  /** Given a set of query params and a pattern with possible conventions, collapse the conventions and return the remaining params. */\n  function getParamsWithConventionsCollapsed(_ref8) {\n    var pattern = _ref8.pattern,\n      routeName = _ref8.routeName,\n      params = _ref8.params;\n    var processedParams = {\n      ...params\n    };\n    // Remove the params present in the pattern since we'll only use the rest for query string\n    var segments = pattern.split('/');\n    // Dynamic Routes\n    segments.filter(segment => segment.startsWith(':')).forEach(segment => {\n      var name = getParamName(segment);\n      delete processedParams[name];\n    });\n    // Deep Dynamic Routes\n    if (segments.some(segment => segment.startsWith('*'))) {\n      // NOTE(EvanBacon): Drop the param name matching the wildcard route name -- this is specific to Expo Router.\n      var name = (0, matchers_1.testNotFound)(routeName) ? 'not-found' : (0, matchers_1.matchDeepDynamicRouteName)(routeName) ?? routeName;\n      delete processedParams[name];\n    }\n    return processedParams;\n  }\n  // Remove multiple as well as trailing slashes\n  function basicSanitizePath(path) {\n    // Remove duplicate slashes like `foo//bar` -> `foo/bar`\n    var simplifiedPath = path.replace(/\\/+/g, '/');\n    if (simplifiedPath.length <= 1) {\n      return simplifiedPath;\n    }\n    // Remove trailing slash like `foo/bar/` -> `foo/bar`\n    return simplifiedPath.replace(/\\/$/, '');\n  }\n  // TODO: Make StackRouter not do this...\n  // Detect if the params came from StackRouter using `params` to pass around internal state.\n  function isInvalidParams(params) {\n    if (!params) {\n      return false;\n    }\n    if ('params' in params && typeof params.params === 'object' && !!params.params) {\n      return true;\n    }\n    return 'initial' in params && typeof params.initial === 'boolean' &&\n    // \"path\" in params &&\n    'screen' in params;\n  }\n  var getParamName = pattern => pattern.replace(/^[:*]/, '').replace(/\\?$/, '');\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  var createConfigItem = (config, parentPattern) => {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var _pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      return {\n        pattern: _pattern\n      };\n    }\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    var pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n    var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n    return {\n      // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n      pattern: pattern?.split('/').filter(Boolean).join('/'),\n      stringify: config.stringify,\n      screens,\n      initialRouteName: config.initialRouteName\n    };\n  };\n  var createNormalizedConfigs = (options, pattern) => Object.fromEntries(Object.entries(options).map(_ref9 => {\n    var _ref0 = _slicedToArray(_ref9, 2),\n      name = _ref0[0],\n      c = _ref0[1];\n    return [name, createConfigItem(c, pattern)];\n  }));\n  function appendBaseUrl(path) {\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (process.env.NODE_ENV !== 'development') {\n      if (baseUrl) {\n        return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n      }\n    }\n    return path;\n  }\n  exports.appendBaseUrl = appendBaseUrl;\n});","lineCount":493,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[4,90,1,13,"default"],[4,97,1,13],[5,2,1,13],[5,6,1,13,"_objectWithoutProperties"],[5,30,1,13],[5,33,1,13,"require"],[5,40,1,13],[5,41,1,13,"_dependencyMap"],[5,55,1,13],[5,110,1,13,"default"],[5,117,1,13],[6,2,1,13],[6,6,1,13,"_excluded"],[6,15,1,13],[7,2,2,0,"Object"],[7,8,2,6],[7,9,2,7,"defineProperty"],[7,23,2,21],[7,24,2,22,"exports"],[7,31,2,29],[7,33,2,31],[7,45,2,43],[7,47,2,45],[8,4,2,47,"value"],[8,9,2,52],[8,11,2,54],[9,2,2,59],[9,3,2,60],[9,4,2,61],[10,2,3,0,"exports"],[10,9,3,7],[10,10,3,8,"appendBaseUrl"],[10,23,3,21],[10,26,3,24,"exports"],[10,33,3,31],[10,34,3,32,"deepEqual"],[10,43,3,41],[10,46,3,44,"exports"],[10,53,3,51],[10,54,3,52,"getPathDataFromState"],[10,74,3,72],[10,77,3,75],[10,82,3,80],[10,83,3,81],[11,2,4,0],[11,6,4,6,"core_1"],[11,12,4,12],[11,15,4,15,"require"],[11,22,4,22],[11,23,4,22,"_dependencyMap"],[11,37,4,22],[11,66,4,47],[11,67,4,48],[12,2,5,0],[12,6,5,6,"matchers_1"],[12,16,5,16],[12,19,5,19,"require"],[12,26,5,26],[12,27,5,26,"_dependencyMap"],[12,41,5,26],[12,59,5,40],[12,60,5,41],[13,2,6,0],[13,6,6,6,"DEFAULT_SCREENS"],[13,21,6,21],[13,24,6,24],[13,25,6,25],[13,26,6,26],[14,2,7,0],[14,6,7,6,"getActiveRoute"],[14,20,7,20],[14,23,7,24,"state"],[14,28,7,29],[14,32,7,34],[15,4,8,4],[15,8,8,10,"route"],[15,13,8,15],[15,16,8,18],[15,23,8,25,"state"],[15,28,8,30],[15,29,8,31,"index"],[15,34,8,36],[15,39,8,41],[15,47,8,49],[15,50,9,10,"state"],[15,55,9,15],[15,56,9,16,"routes"],[15,62,9,22],[15,63,9,23,"state"],[15,68,9,28],[15,69,9,29,"index"],[15,74,9,34],[15,75,9,35],[15,78,10,10,"state"],[15,83,10,15],[15,84,10,16,"routes"],[15,90,10,22],[15,91,10,23,"state"],[15,96,10,28],[15,97,10,29,"routes"],[15,103,10,35],[15,104,10,36,"length"],[15,110,10,42],[15,113,10,45],[15,114,10,46],[15,115,10,47],[16,4,11,4],[16,8,11,8,"route"],[16,13,11,13],[16,14,11,14,"state"],[16,19,11,19],[16,21,11,21],[17,6,12,8],[17,13,12,15,"getActiveRoute"],[17,27,12,29],[17,28,12,30,"route"],[17,33,12,35],[17,34,12,36,"state"],[17,39,12,41],[17,40,12,42],[18,4,13,4],[19,4,14,4],[19,8,14,8,"route"],[19,13,14,13],[19,17,14,17,"isInvalidParams"],[19,32,14,32],[19,33,14,33,"route"],[19,38,14,38],[19,39,14,39,"params"],[19,45,14,45],[19,46,14,46],[19,48,14,48],[20,6,15,8],[20,13,15,15,"getActiveRoute"],[20,27,15,29],[20,28,15,30,"createFakeState"],[20,43,15,45],[20,44,15,46,"route"],[20,49,15,51],[20,50,15,52,"params"],[20,56,15,58],[20,57,15,59],[20,58,15,60],[21,4,16,4],[22,4,17,4],[22,11,17,11,"route"],[22,16,17,16],[23,2,18,0],[23,3,18,1],[24,2,19,0],[24,11,19,9,"createFakeState"],[24,26,19,24,"createFakeState"],[24,27,19,25,"params"],[24,33,19,31],[24,35,19,33],[25,4,20,4],[25,11,20,11],[26,6,21,8,"stale"],[26,11,21,13],[26,13,21,15],[26,18,21,20],[27,6,22,8,"type"],[27,10,22,12],[27,12,22,14],[27,21,22,23],[28,6,23,8,"key"],[28,9,23,11],[28,11,23,13],[28,20,23,22],[29,6,24,8,"index"],[29,11,24,13],[29,13,24,15],[29,14,24,16],[30,6,25,8,"routeNames"],[30,16,25,18],[30,18,25,20],[30,20,25,22],[31,6,26,8,"routes"],[31,12,26,14],[31,14,26,16],[31,15,27,12],[32,8,28,16,"key"],[32,11,28,19],[32,13,28,21],[32,22,28,30],[33,8,29,16,"name"],[33,12,29,20],[33,14,29,22,"params"],[33,20,29,28],[33,21,29,29,"screen"],[33,27,29,35],[34,8,30,16,"params"],[34,14,30,22],[34,16,30,24,"params"],[34,22,30,30],[34,23,30,31,"params"],[34,29,30,37],[35,8,31,16,"path"],[35,12,31,20],[35,14,31,22,"params"],[35,20,31,28],[35,21,31,29,"path"],[36,6,32,12],[36,7,32,13],[37,4,34,4],[37,5,34,5],[38,2,35,0],[39,2,36,0],[39,11,36,9,"segmentMatchesConvention"],[39,35,36,33,"segmentMatchesConvention"],[39,36,36,34,"segment"],[39,43,36,41],[39,45,36,43],[40,4,37,4],[40,11,37,12,"segment"],[40,18,37,19],[40,23,37,24],[40,30,37,31],[40,34,38,8],[40,35,38,9],[40,36,38,10],[40,38,38,12,"matchers_1"],[40,48,38,22],[40,49,38,23,"matchDynamicName"],[40,65,38,39],[40,67,38,41,"segment"],[40,74,38,48],[40,75,38,49],[40,79,38,53],[40,83,38,57],[40,87,39,8],[40,88,39,9],[40,89,39,10],[40,91,39,12,"matchers_1"],[40,101,39,22],[40,102,39,23,"matchGroupName"],[40,116,39,37],[40,118,39,39,"segment"],[40,125,39,46],[40,126,39,47],[40,130,39,51],[40,134,39,55],[40,138,40,8],[40,139,40,9],[40,140,40,10],[40,142,40,12,"matchers_1"],[40,152,40,22],[40,153,40,23,"matchDeepDynamicRouteName"],[40,178,40,48],[40,180,40,50,"segment"],[40,187,40,57],[40,188,40,58],[40,192,40,62],[40,196,40,66],[41,2,41,0],[42,2,42,0],[42,11,42,9,"encodeURIComponentPreservingBrackets"],[42,47,42,45,"encodeURIComponentPreservingBrackets"],[42,48,42,46,"str"],[42,51,42,49],[42,53,42,51],[43,4,43,4],[43,11,43,11,"encodeURIComponent"],[43,29,43,29],[43,30,43,30,"str"],[43,33,43,33],[43,34,43,34],[43,35,43,35,"replace"],[43,42,43,42],[43,43,43,43],[43,49,43,49],[43,51,43,51],[43,54,43,54],[43,55,43,55],[43,56,43,56,"replace"],[43,63,43,63],[43,64,43,64],[43,70,43,70],[43,72,43,72],[43,75,43,75],[43,76,43,76],[44,2,44,0],[45,2,45,0],[46,0,46,0],[47,0,47,0],[48,0,48,0],[49,0,49,0],[50,0,50,0],[51,0,51,0],[52,0,52,0],[53,0,53,0],[54,0,54,0],[55,0,55,0],[56,0,56,0],[57,0,57,0],[58,0,58,0],[59,0,59,0],[60,0,60,0],[61,0,61,0],[62,0,62,0],[63,0,63,0],[64,0,64,0],[65,0,65,0],[66,0,66,0],[67,0,67,0],[68,0,68,0],[69,0,69,0],[70,0,70,0],[71,0,71,0],[72,0,72,0],[73,0,73,0],[74,2,74,0],[74,11,74,9,"getPathFromState"],[74,27,74,25,"getPathFromState"],[74,28,74,26,"state"],[74,33,74,31],[74,35,74,33,"_options"],[74,43,74,41],[74,45,74,43],[75,4,75,4],[75,11,75,11,"getPathDataFromState"],[75,31,75,31],[75,32,75,32,"state"],[75,37,75,37],[75,39,75,39,"_options"],[75,47,75,47],[75,48,75,48],[75,49,75,49,"path"],[75,53,75,53],[76,2,76,0],[77,2,77,0,"exports"],[77,9,77,7],[77,10,77,8,"default"],[77,17,77,15],[77,20,77,18,"getPathFromState"],[77,36,77,34],[78,2,78,0],[78,11,78,9,"getPathDataFromState"],[78,31,78,29,"getPathDataFromState"],[78,32,78,30,"state"],[78,37,78,35],[78,39,78,78],[79,4,78,78],[79,8,78,37,"_options"],[79,16,78,45],[79,19,78,45,"arguments"],[79,28,78,45],[79,29,78,45,"length"],[79,35,78,45],[79,43,78,45,"arguments"],[79,52,78,45],[79,60,78,45,"undefined"],[79,69,78,45],[79,72,78,45,"arguments"],[79,81,78,45],[79,87,78,48],[80,6,78,50,"screens"],[80,13,78,57],[80,15,78,59,"DEFAULT_SCREENS"],[81,4,78,75],[81,5,78,76],[82,4,79,4],[82,8,79,8,"state"],[82,13,79,13],[82,17,79,17],[82,21,79,21],[82,23,79,23],[83,6,80,8],[83,12,80,14,"Error"],[83,17,80,19],[83,18,80,20],[83,97,80,99],[83,98,80,100],[84,4,81,4],[85,4,82,4],[85,8,82,12,"preserveGroups"],[85,22,82,26],[85,25,82,66,"_options"],[85,33,82,74],[85,34,82,12,"preserveGroups"],[85,48,82,26],[86,6,82,28,"preserveDynamicRoutes"],[86,27,82,49],[86,30,82,66,"_options"],[86,38,82,74],[86,39,82,28,"preserveDynamicRoutes"],[86,60,82,49],[87,6,82,54,"options"],[87,13,82,61],[87,16,82,61,"_objectWithoutProperties"],[87,40,82,61],[87,41,82,66,"_options"],[87,49,82,74],[87,51,82,74,"_excluded"],[87,60,82,74],[88,4,83,4],[88,5,83,5],[88,6,83,6],[88,8,83,8,"core_1"],[88,14,83,14],[88,15,83,15,"validatePathConfig"],[88,33,83,33],[88,35,83,35,"options"],[88,42,83,42],[88,43,83,43],[89,4,84,4],[90,4,85,4],[90,8,85,8,"Object"],[90,14,85,14],[90,15,85,15,"is"],[90,17,85,17],[90,18,85,18,"options"],[90,25,85,25],[90,26,85,26,"screens"],[90,33,85,33],[90,35,85,35,"DEFAULT_SCREENS"],[90,50,85,50],[90,51,85,51],[90,53,85,53],[91,6,86,8],[91,12,86,14,"Error"],[91,17,86,19],[91,18,86,20],[91,94,86,96],[91,95,86,97],[92,4,87,4],[93,4,88,4],[93,11,88,11,"getPathFromResolvedState"],[93,35,88,35],[93,36,88,36,"JSON"],[93,40,88,40],[93,41,88,41,"parse"],[93,46,88,46],[93,47,88,47,"JSON"],[93,51,88,51],[93,52,88,52,"stringify"],[93,61,88,61],[93,62,88,62,"state"],[93,67,88,67],[93,68,88,68],[93,69,88,69],[94,4,89,4],[95,4,90,4,"createNormalizedConfigs"],[95,27,90,27],[95,28,90,28,"options"],[95,35,90,35],[95,36,90,36,"screens"],[95,43,90,43],[95,44,90,44],[95,46,90,46],[96,6,90,48,"preserveGroups"],[96,20,90,62],[97,6,90,64,"preserveDynamicRoutes"],[98,4,90,86],[98,5,90,87],[98,6,90,88],[99,2,91,0],[100,2,92,0,"exports"],[100,9,92,7],[100,10,92,8,"getPathDataFromState"],[100,30,92,28],[100,33,92,31,"getPathDataFromState"],[100,53,92,51],[101,2,93,0],[101,11,93,9,"processParamsWithUserSettings"],[101,40,93,38,"processParamsWithUserSettings"],[101,41,93,39,"configItem"],[101,51,93,49],[101,53,93,51,"params"],[101,59,93,57],[101,61,93,59],[102,4,94,4],[102,8,94,10,"stringify"],[102,17,94,19],[102,20,94,22,"configItem"],[102,30,94,32],[102,32,94,34,"stringify"],[102,41,94,43],[103,4,95,4],[103,11,95,11,"Object"],[103,17,95,17],[103,18,95,18,"fromEntries"],[103,29,95,29],[103,30,95,30,"Object"],[103,36,95,36],[103,37,95,37,"entries"],[103,44,95,44],[103,45,95,45,"params"],[103,51,95,51],[103,52,95,52],[103,53,95,53,"map"],[103,56,95,56],[103,57,95,57,"_ref"],[103,61,95,57],[104,6,95,57],[104,10,95,57,"_ref2"],[104,15,95,57],[104,18,95,57,"_slicedToArray"],[104,32,95,57],[104,33,95,57,"_ref"],[104,37,95,57],[105,8,95,59,"key"],[105,11,95,62],[105,14,95,62,"_ref2"],[105,19,95,62],[106,8,95,64,"value"],[106,13,95,69],[106,16,95,69,"_ref2"],[106,21,95,69],[107,6,95,69],[107,13,95,75],[107,14,96,8,"key"],[107,17,96,11],[108,6,97,8],[109,6,98,8,"stringify"],[109,15,98,17],[109,18,98,20,"key"],[109,21,98,23],[109,22,98,24],[109,25,99,14,"stringify"],[109,34,99,23],[109,35,99,24,"key"],[109,38,99,27],[109,39,99,28],[109,40,99,29,"value"],[109,45,99,34],[109,46,99,35],[110,6,100,14],[111,6,101,16,"Array"],[111,11,101,21],[111,12,101,22,"isArray"],[111,19,101,29],[111,20,101,30,"value"],[111,25,101,35],[111,26,101,36],[111,29,102,22,"value"],[111,34,102,27],[111,37,103,22,"String"],[111,43,103,28],[111,44,103,29,"value"],[111,49,103,34],[111,50,103,35],[111,51,104,5],[112,4,104,5],[112,6,104,6],[112,7,104,7],[113,2,105,0],[114,2,106,0],[114,11,106,9,"deepEqual"],[114,20,106,18,"deepEqual"],[114,21,106,19,"a"],[114,22,106,20],[114,24,106,22,"b"],[114,25,106,23],[114,27,106,25],[115,4,107,4],[115,8,107,8,"a"],[115,9,107,9],[115,14,107,14,"b"],[115,15,107,15],[115,17,107,17],[116,6,108,8],[116,13,108,15],[116,17,108,19],[117,4,109,4],[118,4,110,4],[118,8,110,8,"Array"],[118,13,110,13],[118,14,110,14,"isArray"],[118,21,110,21],[118,22,110,22,"a"],[118,23,110,23],[118,24,110,24],[118,28,110,28,"Array"],[118,33,110,33],[118,34,110,34,"isArray"],[118,41,110,41],[118,42,110,42,"b"],[118,43,110,43],[118,44,110,44],[118,46,110,46],[119,6,111,8],[119,10,111,12,"a"],[119,11,111,13],[119,12,111,14,"length"],[119,18,111,20],[119,23,111,25,"b"],[119,24,111,26],[119,25,111,27,"length"],[119,31,111,33],[119,33,111,35],[120,8,112,12],[120,15,112,19],[120,20,112,24],[121,6,113,8],[122,6,114,8],[122,11,114,13],[122,15,114,17,"i"],[122,16,114,18],[122,19,114,21],[122,20,114,22],[122,22,114,24,"i"],[122,23,114,25],[122,26,114,28,"a"],[122,27,114,29],[122,28,114,30,"length"],[122,34,114,36],[122,36,114,38,"i"],[122,37,114,39],[122,39,114,41],[122,41,114,43],[123,8,115,12],[123,12,115,16],[123,13,115,17,"deepEqual"],[123,22,115,26],[123,23,115,27,"a"],[123,24,115,28],[123,25,115,29,"i"],[123,26,115,30],[123,27,115,31],[123,29,115,33,"b"],[123,30,115,34],[123,31,115,35,"i"],[123,32,115,36],[123,33,115,37],[123,34,115,38],[123,36,115,40],[124,10,116,16],[124,17,116,23],[124,22,116,28],[125,8,117,12],[126,6,118,8],[127,6,119,8],[127,13,119,15],[127,17,119,19],[128,4,120,4],[129,4,121,4],[129,8,121,8],[129,15,121,15,"a"],[129,16,121,16],[129,21,121,21],[129,29,121,29],[129,33,121,33],[129,40,121,40,"b"],[129,41,121,41],[129,46,121,46],[129,54,121,54],[129,56,121,56],[130,6,122,8],[130,10,122,14,"keysA"],[130,15,122,19],[130,18,122,22,"Object"],[130,24,122,28],[130,25,122,29,"keys"],[130,29,122,33],[130,30,122,34,"a"],[130,31,122,35],[130,32,122,36],[131,6,123,8],[131,10,123,14,"keysB"],[131,15,123,19],[131,18,123,22,"Object"],[131,24,123,28],[131,25,123,29,"keys"],[131,29,123,33],[131,30,123,34,"b"],[131,31,123,35],[131,32,123,36],[132,6,124,8],[132,10,124,12,"keysA"],[132,15,124,17],[132,16,124,18,"length"],[132,22,124,24],[132,27,124,29,"keysB"],[132,32,124,34],[132,33,124,35,"length"],[132,39,124,41],[132,41,124,43],[133,8,125,12],[133,15,125,19],[133,20,125,24],[134,6,126,8],[135,6,127,8],[135,11,127,13],[135,15,127,19,"key"],[135,18,127,22],[135,22,127,26,"keysA"],[135,27,127,31],[135,29,127,33],[136,8,128,12],[136,12,128,16],[136,13,128,17,"deepEqual"],[136,22,128,26],[136,23,128,27,"a"],[136,24,128,28],[136,25,128,29,"key"],[136,28,128,32],[136,29,128,33],[136,31,128,35,"b"],[136,32,128,36],[136,33,128,37,"key"],[136,36,128,40],[136,37,128,41],[136,38,128,42],[136,40,128,44],[137,10,129,16],[137,17,129,23],[137,22,129,28],[138,8,130,12],[139,6,131,8],[140,6,132,8],[140,13,132,15],[140,17,132,19],[141,4,133,4],[142,4,134,4],[142,11,134,11],[142,16,134,16],[143,2,135,0],[144,2,136,0,"exports"],[144,9,136,7],[144,10,136,8,"deepEqual"],[144,19,136,17],[144,22,136,20,"deepEqual"],[144,31,136,29],[145,2,137,0],[145,11,137,9,"walkConfigItems"],[145,26,137,24,"walkConfigItems"],[145,27,137,25,"route"],[145,32,137,30],[145,34,137,32,"focusedRoute"],[145,46,137,44],[145,48,137,46,"configs"],[145,55,137,53],[145,57,137,53,"_ref3"],[145,62,137,53],[145,64,137,83],[146,4,137,83],[146,8,137,57,"preserveDynamicRoutes"],[146,29,137,78],[146,32,137,78,"_ref3"],[146,37,137,78],[146,38,137,57,"preserveDynamicRoutes"],[146,59,137,78],[147,4,138,4],[148,4,139,4],[148,8,139,8],[148,9,139,9,"route"],[148,14,139,14],[148,15,139,15,"state"],[148,20,139,20],[148,24,139,24,"isInvalidParams"],[148,39,139,39],[148,40,139,40,"route"],[148,45,139,45],[148,46,139,46,"params"],[148,52,139,52],[148,53,139,53],[148,55,139,55],[149,6,140,8,"route"],[149,11,140,13],[149,12,140,14,"state"],[149,17,140,19],[149,20,140,22,"createFakeState"],[149,35,140,37],[149,36,140,38,"route"],[149,41,140,43],[149,42,140,44,"params"],[149,48,140,50],[149,49,140,51],[150,4,141,4],[151,4,142,4],[151,8,142,8,"pattern"],[151,15,142,15],[151,18,142,18],[151,22,142,22],[152,4,143,4],[152,8,143,8,"focusedParams"],[152,21,143,21],[153,4,144,4],[153,8,144,8,"hash"],[153,12,144,12],[154,4,145,4],[154,8,145,10,"collectedParams"],[154,23,145,25],[154,26,145,28],[154,27,145,29],[154,28,145,30],[155,4,146,4],[155,11,146,11,"route"],[155,16,146,16],[155,17,146,17,"name"],[155,21,146,21],[155,25,146,25,"configs"],[155,32,146,32],[155,34,146,34],[156,6,147,8],[156,10,147,14,"configItem"],[156,20,147,24],[156,23,147,27,"configs"],[156,30,147,34],[156,31,147,35,"route"],[156,36,147,40],[156,37,147,41,"name"],[156,41,147,45],[156,42,147,46],[157,6,148,8],[157,10,148,14,"inputPattern"],[157,22,148,26],[157,25,148,29,"configItem"],[157,35,148,39],[157,36,148,40,"pattern"],[157,43,148,47],[158,6,149,8],[158,10,149,12,"inputPattern"],[158,22,149,24],[158,26,149,28],[158,30,149,32],[158,32,149,34],[159,8,150,12],[160,8,151,12],[160,14,151,18],[160,18,151,22,"Error"],[160,23,151,27],[160,24,151,28],[160,65,151,69],[160,68,151,72,"route"],[160,73,151,77],[160,74,151,78,"name"],[160,78,151,82],[160,79,151,83],[161,6,152,8],[162,6,153,8,"pattern"],[162,13,153,15],[162,16,153,18,"inputPattern"],[162,28,153,30],[163,6,154,8],[163,10,154,12,"route"],[163,15,154,17],[163,16,154,18,"params"],[163,22,154,24],[163,24,154,26],[164,8,155,12],[164,12,155,16,"route"],[164,17,155,21],[164,18,155,22,"params"],[164,24,155,28],[164,25,155,29],[164,28,155,32],[164,29,155,33],[164,34,155,38,"undefined"],[164,43,155,47],[164,45,155,49],[165,10,156,16,"hash"],[165,14,156,20],[165,17,156,23,"route"],[165,22,156,28],[165,23,156,29,"params"],[165,29,156,35],[165,30,156,36],[165,33,156,39],[165,34,156,40],[166,10,157,16],[166,17,157,23,"route"],[166,22,157,28],[166,23,157,29,"params"],[166,29,157,35],[166,30,157,36],[166,33,157,39],[166,34,157,40],[167,8,158,12],[168,8,159,12],[168,12,159,18,"params"],[168,18,159,24],[168,21,159,27,"processParamsWithUserSettings"],[168,50,159,56],[168,51,159,57,"configItem"],[168,61,159,67],[168,63,159,69,"route"],[168,68,159,74],[168,69,159,75,"params"],[168,75,159,81],[168,76,159,82],[169,8,160,12],[169,12,160,16,"pattern"],[169,19,160,23],[169,24,160,28,"undefined"],[169,33,160,37],[169,37,160,41,"pattern"],[169,44,160,48],[169,49,160,53],[169,53,160,57],[169,55,160,59],[170,10,161,16,"Object"],[170,16,161,22],[170,17,161,23,"assign"],[170,23,161,29],[170,24,161,30,"collectedParams"],[170,39,161,45],[170,41,161,47,"params"],[170,47,161,53],[170,48,161,54],[171,8,162,12],[172,8,163,12],[172,12,163,16,"deepEqual"],[172,21,163,25],[172,22,163,26,"focusedRoute"],[172,34,163,38],[172,36,163,40,"route"],[172,41,163,45],[172,42,163,46],[172,44,163,48],[173,10,164,16],[173,14,164,20,"preserveDynamicRoutes"],[173,35,164,41],[173,37,164,43],[174,12,165,20,"focusedParams"],[174,25,165,33],[174,28,165,36,"params"],[174,34,165,42],[175,10,166,16],[175,11,166,17],[175,17,167,21],[176,12,168,20],[177,12,169,20],[178,12,170,20,"focusedParams"],[178,25,170,33],[178,28,170,36,"getParamsWithConventionsCollapsed"],[178,61,170,69],[178,62,170,70],[179,14,171,24,"params"],[179,20,171,30],[180,14,172,24,"pattern"],[180,21,172,31],[181,14,173,24,"routeName"],[181,23,173,33],[181,25,173,35,"route"],[181,30,173,40],[181,31,173,41,"name"],[182,12,174,20],[182,13,174,21],[182,14,174,22],[183,10,175,16],[184,8,176,12],[185,6,177,8],[186,6,178,8],[186,10,178,12],[186,11,178,13,"route"],[186,16,178,18],[186,17,178,19,"state"],[186,22,178,24],[186,26,178,28,"isInvalidParams"],[186,41,178,43],[186,42,178,44,"route"],[186,47,178,49],[186,48,178,50,"params"],[186,54,178,56],[186,55,178,57],[186,57,178,59],[187,8,179,12,"route"],[187,13,179,17],[187,14,179,18,"state"],[187,19,179,23],[187,22,179,26,"createFakeState"],[187,37,179,41],[187,38,179,42,"route"],[187,43,179,47],[187,44,179,48,"params"],[187,50,179,54],[187,51,179,55],[188,6,180,8],[189,6,181,8],[190,6,182,8],[190,10,182,12],[190,11,182,13,"configItem"],[190,21,182,23],[190,22,182,24,"screens"],[190,29,182,31],[190,33,182,35,"route"],[190,38,182,40],[190,39,182,41,"state"],[190,44,182,46],[190,49,182,51,"undefined"],[190,58,182,60],[190,60,182,62],[191,8,183,12],[191,12,183,16,"configItem"],[191,22,183,26],[191,23,183,27,"initialRouteName"],[191,39,183,43],[191,43,184,16,"configItem"],[191,53,184,26],[191,54,184,27,"screens"],[191,61,184,34],[191,65,185,16,"configItem"],[191,75,185,26],[191,76,185,27,"initialRouteName"],[191,92,185,43],[191,96,185,47,"configItem"],[191,106,185,57],[191,107,185,58,"screens"],[191,114,185,65],[191,118,186,16,"configItem"],[191,128,186,26],[191,129,186,27,"screens"],[191,136,186,34],[191,137,186,35,"configItem"],[191,147,186,45],[191,148,186,46,"initialRouteName"],[191,164,186,62],[191,165,186,63],[191,167,186,65,"pattern"],[191,174,186,72],[191,176,186,74],[192,10,187,16],[192,14,187,22,"initialRouteConfig"],[192,32,187,40],[192,35,187,43,"configItem"],[192,45,187,53],[192,46,187,54,"screens"],[192,53,187,61],[192,54,187,62,"configItem"],[192,64,187,72],[192,65,187,73,"initialRouteName"],[192,81,187,89],[192,82,187,90],[193,10,188,16],[194,10,189,16,"pattern"],[194,17,189,23],[194,20,189,26,"initialRouteConfig"],[194,38,189,44],[194,39,189,45,"pattern"],[194,46,189,52],[195,10,190,16],[195,14,190,20,"focusedParams"],[195,27,190,33],[195,29,190,35],[196,12,191,20],[196,16,191,24],[196,17,191,25,"preserveDynamicRoutes"],[196,38,191,46],[196,40,191,48],[197,14,192,24],[198,14,193,24],[199,14,194,24,"focusedParams"],[199,27,194,37],[199,30,194,40,"getParamsWithConventionsCollapsed"],[199,63,194,73],[199,64,194,74],[200,16,195,28,"params"],[200,22,195,34],[200,24,195,36,"focusedParams"],[200,37,195,49],[201,16,196,28,"pattern"],[201,23,196,35],[202,16,197,28,"routeName"],[202,25,197,37],[202,27,197,39,"route"],[202,32,197,44],[202,33,197,45,"name"],[203,14,198,24],[203,15,198,25],[203,16,198,26],[204,12,199,20],[205,10,200,16],[206,8,201,12],[207,8,202,12],[208,6,203,8],[209,6,204,8],[209,10,204,14,"index"],[209,15,204,19],[209,18,204,22,"route"],[209,23,204,27],[209,24,204,28,"state"],[209,29,204,33],[209,30,204,34,"index"],[209,35,204,39],[209,39,204,43,"route"],[209,44,204,48],[209,45,204,49,"state"],[209,50,204,54],[209,51,204,55,"routes"],[209,57,204,61],[209,58,204,62,"length"],[209,64,204,68],[209,67,204,71],[209,68,204,72],[210,6,205,8],[210,10,205,14,"nextRoute"],[210,19,205,23],[210,22,205,26,"route"],[210,27,205,31],[210,28,205,32,"state"],[210,33,205,37],[210,34,205,38,"routes"],[210,40,205,44],[210,41,205,45,"index"],[210,46,205,50],[210,47,205,51],[211,6,206,8],[211,10,206,14,"nestedScreens"],[211,23,206,27],[211,26,206,30,"configItem"],[211,36,206,40],[211,37,206,41,"screens"],[211,44,206,48],[212,6,207,8],[213,6,208,8],[213,10,208,12,"nestedScreens"],[213,23,208,25],[213,27,208,29,"nextRoute"],[213,36,208,38],[213,37,208,39,"name"],[213,41,208,43],[213,45,208,47,"nestedScreens"],[213,58,208,60],[213,60,208,62],[214,8,209,12,"route"],[214,13,209,17],[214,16,209,20,"nextRoute"],[214,25,209,29],[215,8,210,12,"configs"],[215,15,210,19],[215,18,210,22,"nestedScreens"],[215,31,210,35],[216,6,211,8],[216,7,211,9],[216,13,212,13],[217,8,213,12],[218,8,214,12],[219,6,215,8],[220,4,216,4],[221,4,217,4],[221,8,217,8,"pattern"],[221,15,217,15],[221,19,217,19],[221,23,217,23],[221,25,217,25],[222,6,218,8],[222,12,218,14],[222,16,218,18,"Error"],[222,21,218,23],[222,22,218,24],[222,53,218,55,"route"],[222,58,218,60],[222,59,218,61,"name"],[222,63,218,65],[222,82,218,84,"Object"],[222,88,218,90],[222,89,218,91,"keys"],[222,93,218,95],[222,94,218,96,"configs"],[222,101,218,103],[222,102,218,104],[222,103,218,105,"join"],[222,107,218,109],[222,108,218,110],[222,112,218,114],[222,113,218,115],[222,116,218,118],[222,117,218,119],[223,4,219,4],[224,4,220,4],[224,8,220,8,"pattern"],[224,15,220,15],[224,19,220,19],[224,20,220,20,"focusedParams"],[224,33,220,33],[224,37,220,37,"focusedRoute"],[224,49,220,49],[224,50,220,50,"params"],[224,56,220,56],[224,58,220,58],[225,6,221,8],[225,10,221,12,"preserveDynamicRoutes"],[225,31,221,33],[225,33,221,35],[226,8,222,12,"focusedParams"],[226,21,222,25],[226,24,222,28,"focusedRoute"],[226,36,222,40],[226,37,222,41,"params"],[226,43,222,47],[227,6,223,8],[227,7,223,9],[227,13,224,13],[228,8,225,12],[229,8,226,12],[230,8,227,12,"focusedParams"],[230,21,227,25],[230,24,227,28,"getParamsWithConventionsCollapsed"],[230,57,227,61],[230,58,227,62],[231,10,228,16,"params"],[231,16,228,22],[231,18,228,24,"focusedRoute"],[231,30,228,36],[231,31,228,37,"params"],[231,37,228,43],[232,10,229,16,"pattern"],[232,17,229,23],[233,10,230,16,"routeName"],[233,19,230,25],[233,21,230,27,"route"],[233,26,230,32],[233,27,230,33,"name"],[234,8,231,12],[234,9,231,13],[234,10,231,14],[235,6,232,8],[236,6,233,8,"Object"],[236,12,233,14],[236,13,233,15,"assign"],[236,19,233,21],[236,20,233,22,"focusedParams"],[236,33,233,35],[236,35,233,37,"collectedParams"],[236,50,233,52],[236,51,233,53],[237,4,234,4],[238,4,235,4],[238,11,235,11],[239,6,236,8,"pattern"],[239,13,236,15],[240,6,237,8,"nextRoute"],[240,15,237,17],[240,17,237,19,"route"],[240,22,237,24],[241,6,238,8,"focusedParams"],[241,19,238,21],[242,6,239,8,"hash"],[242,10,239,12],[243,6,240,8,"params"],[243,12,240,14],[243,14,240,16,"collectedParams"],[244,4,241,4],[244,5,241,5],[245,2,242,0],[246,2,243,0],[246,11,243,9,"getPathFromResolvedState"],[246,35,243,33,"getPathFromResolvedState"],[246,36,243,34,"state"],[246,41,243,39],[246,43,243,41,"configs"],[246,50,243,48],[246,52,243,48,"_ref4"],[246,57,243,48],[246,59,243,94],[247,4,243,94],[247,8,243,52,"preserveGroups"],[247,22,243,66],[247,25,243,66,"_ref4"],[247,30,243,66],[247,31,243,52,"preserveGroups"],[247,45,243,66],[248,6,243,68,"preserveDynamicRoutes"],[248,27,243,89],[248,30,243,89,"_ref4"],[248,35,243,89],[248,36,243,68,"preserveDynamicRoutes"],[248,57,243,89],[249,4,244,4],[249,8,244,8,"path"],[249,12,244,12],[249,15,244,15],[249,17,244,17],[250,4,245,4],[250,8,245,8,"current"],[250,15,245,15],[250,18,245,18,"state"],[250,23,245,23],[251,4,246,4],[251,8,246,8,"hash"],[251,12,246,12],[252,4,247,4],[252,8,247,10,"allParams"],[252,17,247,19],[252,20,247,22],[252,21,247,23],[252,22,247,24],[253,4,248,4],[253,11,248,11,"current"],[253,18,248,18],[253,20,248,20],[254,6,249,8,"path"],[254,10,249,12],[254,14,249,16],[254,17,249,19],[255,6,250,8],[256,6,251,8],[256,10,251,14,"route"],[256,15,251,19],[256,18,251,22,"current"],[256,25,251,29],[256,26,251,30,"routes"],[256,32,251,36],[256,33,251,37,"current"],[256,40,251,44],[256,41,251,45,"index"],[256,46,251,50],[256,50,251,54],[256,51,251,55],[256,52,251,56],[257,6,252,8],[258,6,253,8],[259,6,254,8],[259,10,254,12],[259,11,254,13,"route"],[259,16,254,18],[259,17,254,19,"state"],[259,22,254,24],[259,26,254,28,"isInvalidParams"],[259,41,254,43],[259,42,254,44,"route"],[259,47,254,49],[259,48,254,50,"params"],[259,54,254,56],[259,55,254,57],[259,57,254,59],[260,8,255,12,"route"],[260,13,255,17],[260,14,255,18,"state"],[260,19,255,23],[260,22,255,26,"createFakeState"],[260,37,255,41],[260,38,255,42,"route"],[260,43,255,47],[260,44,255,48,"params"],[260,50,255,54],[260,51,255,55],[261,6,256,8],[262,6,257,8],[262,10,257,8,"_walkConfigItems"],[262,26,257,8],[262,29,257,76,"walkConfigItems"],[262,44,257,91],[262,45,257,92,"route"],[262,50,257,97],[262,52,257,99,"getActiveRoute"],[262,66,257,113],[262,67,257,114,"current"],[262,74,257,121],[262,75,257,122],[262,77,257,124],[263,10,257,126],[263,13,257,129,"configs"],[264,8,257,137],[264,9,257,138],[264,11,257,140],[265,10,257,142,"preserveDynamicRoutes"],[266,8,257,164],[266,9,257,165],[266,10,257,166],[267,8,257,16,"pattern"],[267,15,257,23],[267,18,257,23,"_walkConfigItems"],[267,34,257,23],[267,35,257,16,"pattern"],[267,42,257,23],[268,8,257,25,"params"],[268,15,257,31],[268,18,257,31,"_walkConfigItems"],[268,34,257,31],[268,35,257,25,"params"],[268,41,257,31],[269,8,257,33,"nextRoute"],[269,17,257,42],[269,20,257,42,"_walkConfigItems"],[269,36,257,42],[269,37,257,33,"nextRoute"],[269,46,257,42],[270,8,257,44,"focusedParams"],[270,21,257,57],[270,24,257,57,"_walkConfigItems"],[270,40,257,57],[270,41,257,44,"focusedParams"],[270,54,257,57],[271,8,257,65,"$hash"],[271,13,257,70],[271,16,257,70,"_walkConfigItems"],[271,32,257,70],[271,33,257,59,"hash"],[271,37,257,63],[272,6,258,8],[272,10,258,12,"$hash"],[272,15,258,17],[272,17,258,19],[273,8,259,12,"hash"],[273,12,259,16],[273,15,259,19,"$hash"],[273,20,259,24],[274,6,260,8],[275,6,261,8,"Object"],[275,12,261,14],[275,13,261,15,"assign"],[275,19,261,21],[275,20,261,22,"allParams"],[275,29,261,31],[275,31,261,33,"params"],[275,38,261,39],[275,39,261,40],[276,6,262,8,"path"],[276,10,262,12],[276,14,262,16,"getPathWithConventionsCollapsed"],[276,45,262,47],[276,46,262,48],[277,8,263,12,"pattern"],[277,15,263,19],[278,8,264,12,"routePath"],[278,17,264,21],[278,19,264,23,"nextRoute"],[278,28,264,32],[278,29,264,33,"path"],[278,33,264,37],[279,8,265,12,"params"],[279,14,265,18],[279,16,265,20,"allParams"],[279,25,265,29],[280,8,266,12,"initialRouteName"],[280,24,266,28],[280,26,266,30,"configs"],[280,33,266,37],[280,34,266,38,"nextRoute"],[280,43,266,47],[280,44,266,48,"name"],[280,48,266,52],[280,49,266,53],[280,51,266,55,"initialRouteName"],[280,67,266,71],[281,8,267,12,"preserveGroups"],[281,22,267,26],[282,8,268,12,"preserveDynamicRoutes"],[283,6,269,8],[283,7,269,9],[283,8,269,10],[284,6,270,8],[284,10,270,12,"nextRoute"],[284,19,270,21],[284,20,270,22,"state"],[284,25,270,27],[285,6,271,12],[286,6,272,12],[287,6,273,12],[288,6,274,12],[289,6,275,12,"configs"],[289,13,275,19],[289,14,275,20,"nextRoute"],[289,23,275,29],[289,24,275,30,"state"],[289,29,275,35],[289,30,275,36,"routes"],[289,36,275,42],[289,39,275,45,"nextRoute"],[289,48,275,54],[289,49,275,55,"state"],[289,54,275,60],[289,56,275,62,"index"],[289,61,275,67],[289,65,275,71],[289,66,275,72],[289,67,275,73],[289,69,275,75,"name"],[289,73,275,79],[289,74,275,80],[289,76,275,82],[290,8,276,12],[291,8,277,12,"current"],[291,15,277,19],[291,18,277,22,"nextRoute"],[291,27,277,31],[291,28,277,32,"state"],[291,33,277,37],[292,6,278,8],[292,7,278,9],[292,13,279,13],[293,8,280,12],[294,8,281,12],[295,8,282,12],[295,12,282,16,"focusedParams"],[295,25,282,29],[295,27,282,31],[296,10,283,16],[296,15,283,21],[296,19,283,27,"param"],[296,24,283,32],[296,28,283,36,"focusedParams"],[296,41,283,49],[296,43,283,51],[297,12,284,20],[298,12,285,20],[298,16,285,24,"focusedParams"],[298,29,285,37],[298,30,285,38,"param"],[298,35,285,43],[298,36,285,44],[298,41,285,49],[298,52,285,60],[298,54,285,62],[299,14,286,24],[300,14,287,24],[300,21,287,31,"focusedParams"],[300,34,287,44],[300,35,287,45,"param"],[300,40,287,50],[300,41,287,51],[301,12,288,20],[302,10,289,16],[303,10,290,16],[303,14,290,22,"query"],[303,19,290,27],[303,22,290,30],[303,26,290,34,"URLSearchParams"],[303,41,290,49],[303,42,290,50,"focusedParams"],[303,55,290,63],[303,56,290,64],[303,57,290,65,"toString"],[303,65,290,73],[303,66,290,74],[303,67,290,75],[304,10,291,16],[304,14,291,20,"query"],[304,19,291,25],[304,21,291,27],[305,12,292,20,"path"],[305,16,292,24],[305,20,292,28],[305,24,292,32,"query"],[305,29,292,37],[305,31,292,39],[306,10,293,16],[307,8,294,12],[308,8,295,12],[309,6,296,8],[310,4,297,4],[311,4,298,4],[311,8,298,8,"hash"],[311,12,298,12],[311,14,298,14],[312,6,299,8,"allParams"],[312,15,299,17],[312,16,299,18],[312,19,299,21],[312,20,299,22],[312,23,299,25,"hash"],[312,27,299,29],[313,6,300,8,"path"],[313,10,300,12],[313,14,300,16],[313,18,300,20,"hash"],[313,22,300,24],[313,24,300,26],[314,4,301,4],[315,4,302,4],[315,8,302,10,"params"],[315,14,302,16],[315,17,302,19,"decodeParams"],[315,29,302,31],[315,30,302,32,"allParams"],[315,39,302,41],[315,40,302,42],[316,4,303,4],[316,11,303,11],[317,6,303,13,"path"],[317,10,303,17],[317,12,303,19,"appendBaseUrl"],[317,25,303,32],[317,26,303,33,"basicSanitizePath"],[317,43,303,50],[317,44,303,51,"path"],[317,48,303,55],[317,49,303,56],[317,50,303,57],[318,6,303,59,"params"],[319,4,303,66],[319,5,303,67],[320,2,304,0],[321,2,305,0],[321,11,305,9,"decodeParams"],[321,23,305,21,"decodeParams"],[321,24,305,22,"params"],[321,30,305,28],[321,32,305,30],[322,4,306,4],[322,8,306,10,"parsed"],[322,14,306,16],[322,17,306,19],[322,18,306,20],[322,19,306,21],[323,4,307,4],[323,13,307,4,"_ref5"],[323,18,307,4],[323,22,307,31,"Object"],[323,28,307,37],[323,29,307,38,"entries"],[323,36,307,45],[323,37,307,46,"params"],[323,43,307,52],[323,44,307,53],[323,46,307,55],[324,6,307,55],[324,10,307,55,"_ref6"],[324,15,307,55],[324,18,307,55,"_slicedToArray"],[324,32,307,55],[324,33,307,55,"_ref5"],[324,38,307,55],[325,6,307,55],[325,10,307,16,"key"],[325,13,307,19],[325,16,307,19,"_ref6"],[325,21,307,19],[326,6,307,19],[326,10,307,21,"value"],[326,15,307,26],[326,18,307,26,"_ref6"],[326,23,307,26],[327,6,308,8],[327,10,308,12],[328,8,309,12],[328,12,309,16,"Array"],[328,17,309,21],[328,18,309,22,"isArray"],[328,25,309,29],[328,26,309,30,"value"],[328,31,309,35],[328,32,309,36],[328,34,309,38],[329,10,310,16,"parsed"],[329,16,310,22],[329,17,310,23,"key"],[329,20,310,26],[329,21,310,27],[329,24,310,30,"value"],[329,29,310,35],[329,30,310,36,"map"],[329,33,310,39],[329,34,310,41,"v"],[329,35,310,42],[329,39,310,47,"decodeURIComponent"],[329,57,310,65],[329,58,310,66,"v"],[329,59,310,67],[329,60,310,68],[329,61,310,69],[330,8,311,12],[330,9,311,13],[330,15,312,17],[331,10,313,16,"parsed"],[331,16,313,22],[331,17,313,23,"key"],[331,20,313,26],[331,21,313,27],[331,24,313,30,"decodeURIComponent"],[331,42,313,48],[331,43,313,49,"value"],[331,48,313,54],[331,49,313,55],[332,8,314,12],[333,6,315,8],[333,7,315,9],[333,8,316,8],[333,14,316,14],[334,8,317,12,"parsed"],[334,14,317,18],[334,15,317,19,"key"],[334,18,317,22],[334,19,317,23],[334,22,317,26,"value"],[334,27,317,31],[335,6,318,8],[336,4,319,4],[337,4,320,4],[337,11,320,11,"parsed"],[337,17,320,17],[338,2,321,0],[339,2,322,0],[339,11,322,9,"getPathWithConventionsCollapsed"],[339,42,322,40,"getPathWithConventionsCollapsed"],[339,43,322,40,"_ref7"],[339,48,322,40],[339,50,322,131],[340,4,322,131],[340,8,322,43,"pattern"],[340,15,322,50],[340,18,322,50,"_ref7"],[340,23,322,50],[340,24,322,43,"pattern"],[340,31,322,50],[341,6,322,52,"routePath"],[341,15,322,61],[341,18,322,61,"_ref7"],[341,23,322,61],[341,24,322,52,"routePath"],[341,33,322,61],[342,6,322,63,"params"],[342,12,322,69],[342,15,322,69,"_ref7"],[342,20,322,69],[342,21,322,63,"params"],[342,27,322,69],[343,6,322,71,"preserveGroups"],[343,20,322,85],[343,23,322,85,"_ref7"],[343,28,322,85],[343,29,322,71,"preserveGroups"],[343,43,322,85],[344,6,322,87,"preserveDynamicRoutes"],[344,27,322,108],[344,30,322,108,"_ref7"],[344,35,322,108],[344,36,322,87,"preserveDynamicRoutes"],[344,57,322,108],[345,6,322,110,"initialRouteName"],[345,22,322,126],[345,25,322,126,"_ref7"],[345,30,322,126],[345,31,322,110,"initialRouteName"],[345,47,322,126],[346,4,323,4],[346,8,323,10,"segments"],[346,16,323,18],[346,19,323,21,"pattern"],[346,26,323,28],[346,27,323,29,"split"],[346,32,323,34],[346,33,323,35],[346,36,323,38],[346,37,323,39],[347,4,324,4],[347,11,324,11,"segments"],[347,19,324,19],[347,20,325,9,"map"],[347,23,325,12],[347,24,325,13],[347,25,325,14,"p"],[347,26,325,15],[347,28,325,17,"i"],[347,29,325,18],[347,34,325,23],[348,6,326,8],[348,10,326,14,"name"],[348,14,326,18],[348,17,326,21,"getParamName"],[348,29,326,33],[348,30,326,34,"p"],[348,31,326,35],[348,32,326,36],[349,6,327,8],[350,6,328,8],[351,6,329,8],[352,6,330,8],[352,10,330,12,"p"],[352,11,330,13],[352,12,330,14,"startsWith"],[352,22,330,24],[352,23,330,25],[352,26,330,28],[352,27,330,29],[352,29,330,31],[353,8,331,12],[353,12,331,16,"preserveDynamicRoutes"],[353,33,331,37],[353,35,331,39],[354,10,332,16],[354,14,332,20,"name"],[354,18,332,24],[354,23,332,29],[354,34,332,40],[354,36,332,42],[355,12,333,20],[355,19,333,27],[355,31,333,39],[356,10,334,16],[357,10,335,16],[357,17,335,23],[357,24,335,30,"name"],[357,28,335,34],[357,31,335,37],[358,8,336,12],[359,8,337,12],[359,12,337,16,"params"],[359,18,337,22],[359,19,337,23,"name"],[359,23,337,27],[359,24,337,28],[359,26,337,30],[360,10,338,16],[360,14,338,20,"Array"],[360,19,338,25],[360,20,338,26,"isArray"],[360,27,338,33],[360,28,338,34,"params"],[360,34,338,40],[360,35,338,41,"name"],[360,39,338,45],[360,40,338,46],[360,41,338,47],[360,43,338,49],[361,12,339,20],[361,19,339,27,"params"],[361,25,339,33],[361,26,339,34,"name"],[361,30,339,38],[361,31,339,39],[361,32,339,40,"join"],[361,36,339,44],[361,37,339,45],[361,40,339,48],[361,41,339,49],[362,10,340,16],[363,10,341,16],[363,17,341,23,"params"],[363,23,341,29],[363,24,341,30,"name"],[363,28,341,34],[363,29,341,35],[364,8,342,12],[365,8,343,12],[365,12,343,16,"i"],[365,13,343,17],[365,18,343,22],[365,19,343,23],[365,21,343,25],[366,10,344,16],[367,10,345,16],[367,17,345,23,"routePath"],[367,26,345,32],[368,8,346,12],[369,8,347,12],[370,8,348,12],[371,8,349,12],[372,8,350,12],[372,15,350,19,"routePath"],[372,24,350,28],[372,26,351,18,"split"],[372,31,351,23],[372,32,351,24],[372,35,351,27],[372,36,351,28],[372,37,352,17,"slice"],[372,42,352,22],[372,43,352,23,"i"],[372,44,352,24],[372,47,352,27],[372,48,352,28],[372,49,352,29],[372,50,353,17,"join"],[372,54,353,21],[372,55,353,22],[372,58,353,25],[372,59,353,26],[373,6,354,8],[374,6,355,8],[375,6,356,8],[375,10,356,12,"p"],[375,11,356,13],[375,12,356,14,"startsWith"],[375,22,356,24],[375,23,356,25],[375,26,356,28],[375,27,356,29],[375,29,356,31],[376,8,357,12],[376,12,357,16,"preserveDynamicRoutes"],[376,33,357,37],[376,35,357,39],[377,10,358,16],[377,17,358,23],[377,21,358,27,"name"],[377,25,358,31],[377,28,358,34],[378,8,359,12],[379,8,360,12],[380,8,361,12],[380,15,361,19,"params"],[380,21,361,25],[380,22,361,26,"name"],[380,26,361,30],[380,27,361,31],[381,6,362,8],[382,6,363,8],[382,10,363,12],[382,11,363,13,"preserveGroups"],[382,25,363,27],[382,29,363,31],[382,30,363,32],[382,31,363,33],[382,33,363,35,"matchers_1"],[382,43,363,45],[382,44,363,46,"matchGroupName"],[382,58,363,60],[382,60,363,62,"p"],[382,61,363,63],[382,62,363,64],[382,66,363,68],[382,70,363,72],[382,72,363,74],[383,8,364,12],[384,8,365,12],[385,8,366,12],[386,8,367,12],[386,12,367,16,"segments"],[386,20,367,24],[386,21,367,25,"length"],[386,27,367,31],[386,30,367,34],[386,31,367,35],[386,36,367,40,"i"],[386,37,367,41],[386,39,367,43],[387,10,368,16],[387,14,368,20,"initialRouteName"],[387,30,368,36],[387,32,368,38],[388,12,369,20],[389,12,370,20],[389,16,370,24,"segmentMatchesConvention"],[389,40,370,48],[389,41,370,49,"initialRouteName"],[389,57,370,65],[389,58,370,66],[389,60,370,68],[390,14,371,24],[390,21,371,31],[390,23,371,33],[391,12,372,20],[392,12,373,20],[392,19,373,27,"encodeURIComponentPreservingBrackets"],[392,55,373,63],[392,56,373,64,"initialRouteName"],[392,72,373,80],[392,73,373,81],[393,10,374,16],[394,8,375,12],[395,8,376,12],[395,15,376,19],[395,17,376,21],[396,6,377,8],[397,6,378,8],[398,6,379,8],[398,13,379,15,"encodeURIComponentPreservingBrackets"],[398,49,379,51],[398,50,379,52,"p"],[398,51,379,53],[398,52,379,54],[399,4,380,4],[399,5,380,5],[399,6,380,6],[399,7,381,9,"map"],[399,10,381,12],[399,11,381,14,"v"],[399,12,381,15],[399,16,381,20,"v"],[399,17,381,21],[399,21,381,25],[399,23,381,27],[399,24,381,28],[399,25,382,9,"join"],[399,29,382,13],[399,30,382,14],[399,33,382,17],[399,34,382,18],[400,2,383,0],[401,2,384,0],[402,2,385,0],[402,11,385,9,"getParamsWithConventionsCollapsed"],[402,44,385,42,"getParamsWithConventionsCollapsed"],[402,45,385,42,"_ref8"],[402,50,385,42],[402,52,385,76],[403,4,385,76],[403,8,385,45,"pattern"],[403,15,385,52],[403,18,385,52,"_ref8"],[403,23,385,52],[403,24,385,45,"pattern"],[403,31,385,52],[404,6,385,54,"routeName"],[404,15,385,63],[404,18,385,63,"_ref8"],[404,23,385,63],[404,24,385,54,"routeName"],[404,33,385,63],[405,6,385,65,"params"],[405,12,385,71],[405,15,385,71,"_ref8"],[405,20,385,71],[405,21,385,65,"params"],[405,27,385,71],[406,4,386,4],[406,8,386,10,"processedParams"],[406,23,386,25],[406,26,386,28],[407,6,386,30],[407,9,386,33,"params"],[408,4,386,40],[408,5,386,41],[409,4,387,4],[410,4,388,4],[410,8,388,10,"segments"],[410,16,388,18],[410,19,388,21,"pattern"],[410,26,388,28],[410,27,388,29,"split"],[410,32,388,34],[410,33,388,35],[410,36,388,38],[410,37,388,39],[411,4,389,4],[412,4,390,4,"segments"],[412,12,390,12],[412,13,391,9,"filter"],[412,19,391,15],[412,20,391,17,"segment"],[412,27,391,24],[412,31,391,29,"segment"],[412,38,391,36],[412,39,391,37,"startsWith"],[412,49,391,47],[412,50,391,48],[412,53,391,51],[412,54,391,52],[412,55,391,53],[412,56,392,9,"forEach"],[412,63,392,16],[412,64,392,18,"segment"],[412,71,392,25],[412,75,392,30],[413,6,393,8],[413,10,393,14,"name"],[413,14,393,18],[413,17,393,21,"getParamName"],[413,29,393,33],[413,30,393,34,"segment"],[413,37,393,41],[413,38,393,42],[414,6,394,8],[414,13,394,15,"processedParams"],[414,28,394,30],[414,29,394,31,"name"],[414,33,394,35],[414,34,394,36],[415,4,395,4],[415,5,395,5],[415,6,395,6],[416,4,396,4],[417,4,397,4],[417,8,397,8,"segments"],[417,16,397,16],[417,17,397,17,"some"],[417,21,397,21],[417,22,397,23,"segment"],[417,29,397,30],[417,33,397,35,"segment"],[417,40,397,42],[417,41,397,43,"startsWith"],[417,51,397,53],[417,52,397,54],[417,55,397,57],[417,56,397,58],[417,57,397,59],[417,59,397,61],[418,6,398,8],[419,6,399,8],[419,10,399,14,"name"],[419,14,399,18],[419,17,399,21],[419,18,399,22],[419,19,399,23],[419,21,399,25,"matchers_1"],[419,31,399,35],[419,32,399,36,"testNotFound"],[419,44,399,48],[419,46,399,50,"routeName"],[419,55,399,59],[419,56,399,60],[419,59,400,14],[419,70,400,25],[419,73,401,14],[419,74,401,15],[419,75,401,16],[419,77,401,18,"matchers_1"],[419,87,401,28],[419,88,401,29,"matchDeepDynamicRouteName"],[419,113,401,54],[419,115,401,56,"routeName"],[419,124,401,65],[419,125,401,66],[419,129,401,70,"routeName"],[419,138,401,79],[420,6,402,8],[420,13,402,15,"processedParams"],[420,28,402,30],[420,29,402,31,"name"],[420,33,402,35],[420,34,402,36],[421,4,403,4],[422,4,404,4],[422,11,404,11,"processedParams"],[422,26,404,26],[423,2,405,0],[424,2,406,0],[425,2,407,0],[425,11,407,9,"basicSanitizePath"],[425,28,407,26,"basicSanitizePath"],[425,29,407,27,"path"],[425,33,407,31],[425,35,407,33],[426,4,408,4],[427,4,409,4],[427,8,409,10,"simplifiedPath"],[427,22,409,24],[427,25,409,27,"path"],[427,29,409,31],[427,30,409,32,"replace"],[427,37,409,39],[427,38,409,40],[427,44,409,46],[427,46,409,48],[427,49,409,51],[427,50,409,52],[428,4,410,4],[428,8,410,8,"simplifiedPath"],[428,22,410,22],[428,23,410,23,"length"],[428,29,410,29],[428,33,410,33],[428,34,410,34],[428,36,410,36],[429,6,411,8],[429,13,411,15,"simplifiedPath"],[429,27,411,29],[430,4,412,4],[431,4,413,4],[432,4,414,4],[432,11,414,11,"simplifiedPath"],[432,25,414,25],[432,26,414,26,"replace"],[432,33,414,33],[432,34,414,34],[432,39,414,39],[432,41,414,41],[432,43,414,43],[432,44,414,44],[433,2,415,0],[434,2,416,0],[435,2,417,0],[436,2,418,0],[436,11,418,9,"isInvalidParams"],[436,26,418,24,"isInvalidParams"],[436,27,418,25,"params"],[436,33,418,31],[436,35,418,33],[437,4,419,4],[437,8,419,8],[437,9,419,9,"params"],[437,15,419,15],[437,17,419,17],[438,6,420,8],[438,13,420,15],[438,18,420,20],[439,4,421,4],[440,4,422,4],[440,8,422,8],[440,16,422,16],[440,20,422,20,"params"],[440,26,422,26],[440,30,422,30],[440,37,422,37,"params"],[440,43,422,43],[440,44,422,44,"params"],[440,50,422,50],[440,55,422,55],[440,63,422,63],[440,67,422,67],[440,68,422,68],[440,69,422,69,"params"],[440,75,422,75],[440,76,422,76,"params"],[440,82,422,82],[440,84,422,84],[441,6,423,8],[441,13,423,15],[441,17,423,19],[442,4,424,4],[443,4,425,4],[443,11,425,12],[443,20,425,21],[443,24,425,25,"params"],[443,30,425,31],[443,34,426,8],[443,41,426,15,"params"],[443,47,426,21],[443,48,426,22,"initial"],[443,55,426,29],[443,60,426,34],[443,69,426,43],[444,4,427,8],[445,4,428,8],[445,12,428,16],[445,16,428,20,"params"],[445,22,428,26],[446,2,429,0],[447,2,430,0],[447,6,430,6,"getParamName"],[447,18,430,18],[447,21,430,22,"pattern"],[447,28,430,29],[447,32,430,34,"pattern"],[447,39,430,41],[447,40,430,42,"replace"],[447,47,430,49],[447,48,430,50],[447,55,430,57],[447,57,430,59],[447,59,430,61],[447,60,430,62],[447,61,430,63,"replace"],[447,68,430,70],[447,69,430,71],[447,74,430,76],[447,76,430,78],[447,78,430,80],[447,79,430,81],[448,2,431,0],[448,6,431,6,"joinPaths"],[448,15,431,15],[448,18,431,18],[448,27,431,18,"joinPaths"],[448,28,431,18],[449,4,431,18],[449,13,431,18,"_len"],[449,17,431,18],[449,20,431,18,"arguments"],[449,29,431,18],[449,30,431,18,"length"],[449,36,431,18],[449,38,431,22,"paths"],[449,43,431,27],[449,50,431,27,"Array"],[449,55,431,27],[449,56,431,27,"_len"],[449,60,431,27],[449,63,431,27,"_key"],[449,67,431,27],[449,73,431,27,"_key"],[449,77,431,27],[449,80,431,27,"_len"],[449,84,431,27],[449,86,431,27,"_key"],[449,90,431,27],[450,6,431,22,"paths"],[450,11,431,27],[450,12,431,27,"_key"],[450,16,431,27],[450,20,431,27,"arguments"],[450,29,431,27],[450,30,431,27,"_key"],[450,34,431,27],[451,4,431,27],[452,4,431,27],[452,11,431,32],[452,13,431,34],[452,14,432,5,"concat"],[452,20,432,11],[452,21,432,12],[452,24,432,15,"paths"],[452,29,432,20],[452,30,432,21,"map"],[452,33,432,24],[452,34,432,26,"p"],[452,35,432,27],[452,39,432,32,"p"],[452,40,432,33],[452,41,432,34,"split"],[452,46,432,39],[452,47,432,40],[452,50,432,43],[452,51,432,44],[452,52,432,45],[452,53,432,46],[452,54,433,5,"filter"],[452,60,433,11],[452,61,433,12,"Boolean"],[452,68,433,19],[452,69,433,20],[452,70,434,5,"join"],[452,74,434,9],[452,75,434,10],[452,78,434,13],[452,79,434,14],[453,2,434,14],[454,2,435,0],[454,6,435,6,"createConfigItem"],[454,22,435,22],[454,25,435,25,"createConfigItem"],[454,26,435,26,"config"],[454,32,435,32],[454,34,435,34,"parentPattern"],[454,47,435,47],[454,52,435,52],[455,4,436,4],[455,8,436,8],[455,15,436,15,"config"],[455,21,436,21],[455,26,436,26],[455,34,436,34],[455,36,436,36],[456,6,437,8],[457,6,438,8],[457,10,438,14,"pattern"],[457,18,438,21],[457,21,438,24,"parentPattern"],[457,34,438,37],[457,37,438,40,"joinPaths"],[457,46,438,49],[457,47,438,50,"parentPattern"],[457,60,438,63],[457,62,438,65,"config"],[457,68,438,71],[457,69,438,72],[457,72,438,75,"config"],[457,78,438,81],[458,6,439,8],[458,13,439,15],[459,8,439,17,"pattern"],[459,15,439,24],[459,17,439,17,"pattern"],[460,6,439,25],[460,7,439,26],[461,4,440,4],[462,4,441,4],[462,8,441,8,"config"],[462,14,441,14],[462,15,441,15,"exact"],[462,20,441,20],[462,24,441,24,"config"],[462,30,441,30],[462,31,441,31,"path"],[462,35,441,35],[462,40,441,40,"undefined"],[462,49,441,49],[462,51,441,51],[463,6,442,8],[463,12,442,14],[463,16,442,18,"Error"],[463,21,442,23],[463,22,442,24],[463,172,442,174],[463,173,442,175],[464,4,443,4],[465,4,444,4],[466,4,445,4],[467,4,446,4],[467,8,446,10,"pattern"],[467,15,446,17],[467,18,446,20,"config"],[467,24,446,26],[467,25,446,27,"exact"],[467,30,446,32],[467,35,446,37],[467,39,446,41],[467,42,446,44,"joinPaths"],[467,51,446,53],[467,52,446,54,"parentPattern"],[467,65,446,67],[467,69,446,71],[467,71,446,73],[467,73,446,75,"config"],[467,79,446,81],[467,80,446,82,"path"],[467,84,446,86],[467,88,446,90],[467,90,446,92],[467,91,446,93],[467,94,446,96,"config"],[467,100,446,102],[467,101,446,103,"path"],[467,105,446,107],[467,109,446,111],[467,111,446,113],[468,4,447,4],[468,8,447,10,"screens"],[468,15,447,17],[468,18,447,20,"config"],[468,24,447,26],[468,25,447,27,"screens"],[468,32,447,34],[468,35,447,37,"createNormalizedConfigs"],[468,58,447,60],[468,59,447,61,"config"],[468,65,447,67],[468,66,447,68,"screens"],[468,73,447,75],[468,75,447,77,"pattern"],[468,82,447,84],[468,83,447,85],[468,86,447,88,"undefined"],[468,95,447,97],[469,4,448,4],[469,11,448,11],[470,6,449,8],[471,6,450,8,"pattern"],[471,13,450,15],[471,15,450,17,"pattern"],[471,22,450,24],[471,24,450,26,"split"],[471,29,450,31],[471,30,450,32],[471,33,450,35],[471,34,450,36],[471,35,450,37,"filter"],[471,41,450,43],[471,42,450,44,"Boolean"],[471,49,450,51],[471,50,450,52],[471,51,450,53,"join"],[471,55,450,57],[471,56,450,58],[471,59,450,61],[471,60,450,62],[472,6,451,8,"stringify"],[472,15,451,17],[472,17,451,19,"config"],[472,23,451,25],[472,24,451,26,"stringify"],[472,33,451,35],[473,6,452,8,"screens"],[473,13,452,15],[474,6,453,8,"initialRouteName"],[474,22,453,24],[474,24,453,26,"config"],[474,30,453,32],[474,31,453,33,"initialRouteName"],[475,4,454,4],[475,5,454,5],[476,2,455,0],[476,3,455,1],[477,2,456,0],[477,6,456,6,"createNormalizedConfigs"],[477,29,456,29],[477,32,456,32,"createNormalizedConfigs"],[477,33,456,33,"options"],[477,40,456,40],[477,42,456,42,"pattern"],[477,49,456,49],[477,54,456,54,"Object"],[477,60,456,60],[477,61,456,61,"fromEntries"],[477,72,456,72],[477,73,456,73,"Object"],[477,79,456,79],[477,80,456,80,"entries"],[477,87,456,87],[477,88,456,88,"options"],[477,95,456,95],[477,96,456,96],[477,97,456,97,"map"],[477,100,456,100],[477,101,456,101,"_ref9"],[477,106,456,101],[478,4,456,101],[478,8,456,101,"_ref0"],[478,13,456,101],[478,16,456,101,"_slicedToArray"],[478,30,456,101],[478,31,456,101,"_ref9"],[478,36,456,101],[479,6,456,103,"name"],[479,10,456,107],[479,13,456,107,"_ref0"],[479,18,456,107],[480,6,456,109,"c"],[480,7,456,110],[480,10,456,110,"_ref0"],[480,15,456,110],[481,4,456,110],[481,11,456,116],[481,12,456,117,"name"],[481,16,456,121],[481,18,456,123,"createConfigItem"],[481,34,456,139],[481,35,456,140,"c"],[481,36,456,141],[481,38,456,143,"pattern"],[481,45,456,150],[481,46,456,151],[481,47,456,152],[482,2,456,152],[482,4,456,153],[482,5,456,154],[483,2,457,0],[483,11,457,9,"appendBaseUrl"],[483,24,457,22,"appendBaseUrl"],[483,25,457,23,"path"],[483,29,457,27],[483,31,457,66],[484,4,457,66],[484,8,457,29,"baseUrl"],[484,15,457,36],[484,18,457,36,"arguments"],[484,27,457,36],[484,28,457,36,"length"],[484,34,457,36],[484,42,457,36,"arguments"],[484,51,457,36],[484,59,457,36,"undefined"],[484,68,457,36],[484,71,457,36,"arguments"],[484,80,457,36],[485,4,458,4],[485,8,458,8,"process"],[485,15,458,15],[485,16,458,16,"env"],[485,19,458,19],[485,20,458,20,"NODE_ENV"],[485,28,458,28],[485,33,458,33],[485,46,458,46],[485,48,458,48],[486,6,459,8],[486,10,459,12,"baseUrl"],[486,17,459,19],[486,19,459,21],[487,8,460,12],[487,15,460,19],[487,19,460,23,"baseUrl"],[487,26,460,30],[487,27,460,31,"replace"],[487,34,460,38],[487,35,460,39],[487,41,460,45],[487,43,460,47],[487,45,460,49],[487,46,460,50],[487,47,460,51,"replace"],[487,54,460,58],[487,55,460,59],[487,60,460,64],[487,62,460,66],[487,64,460,68],[487,65,460,69],[487,68,460,72,"path"],[487,72,460,76],[487,74,460,78],[488,6,461,8],[489,4,462,4],[490,4,463,4],[490,11,463,11,"path"],[490,15,463,15],[491,2,464,0],[492,2,465,0,"exports"],[492,9,465,7],[492,10,465,8,"appendBaseUrl"],[492,23,465,21],[492,26,465,24,"appendBaseUrl"],[492,39,465,37],[493,0,465,38],[493,3]],"functionMap":{"names":["<global>","getActiveRoute","createFakeState","segmentMatchesConvention","encodeURIComponentPreservingBrackets","getPathFromState","getPathDataFromState","processParamsWithUserSettings","Object.entries.map$argument_0","deepEqual","walkConfigItems","getPathFromResolvedState","decodeParams","value.map$argument_0","getPathWithConventionsCollapsed","segments.map$argument_0","segments.map.map$argument_0","getParamsWithConventionsCollapsed","segments.filter$argument_0","segments.filter.forEach$argument_0","segments.some$argument_0","basicSanitizePath","isInvalidParams","getParamName","joinPaths","paths.map$argument_0","createConfigItem","createNormalizedConfigs","appendBaseUrl"],"mappings":"AAA;uBCM;CDW;AEC;CFgB;AGC;CHK;AIC;CJE;AK8B;CLE;AME;CNa;AOE;yDCE;KDS;CPC;ASC;CT6B;AUE;CVyG;AWC;CX6D;AYC;wCCK,4BD;CZW;AcC;aCG;KDuD;aEC,cF;CdE;AiBE;gBCM,oCD;iBEC;KFG;sBGE,oCH;CjBQ;AqBE;CrBQ;AsBG;CtBW;qBuBC,4DvB;kBwBC;yBCC,mBD;cxBE;yB0BC;C1BoB;gC2BC,qEnB,mDmB,E3B;A4BC;C5BO"},"hasCjsExports":true},"type":"js/module"}]}