{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"./matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":19,"index":202},"end":{"line":4,"column":40,"index":223}}],"key":"89ylKT57ef0l7ma8+p1HhPaMj94=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\").default;\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.generateDynamic = exports.extrapolateGroups = exports.getIgnoreList = exports.getRoutes = void 0;\n  var matchers_1 = require(_dependencyMap[1], \"./matchers\");\n  var validPlatforms = new Set(['android', 'ios', 'native', 'web']);\n  /**\n   * Given a Metro context module, return an array of nested routes.\n   *\n   * This is a two step process:\n   *  1. Convert the RequireContext keys (file paths) into a directory tree.\n   *      - This should extrapolate array syntax into multiple routes\n   *      - Routes are given a specificity score\n   *  2. Flatten the directory tree into routes\n   *      - Routes in directories without _layout files are hoisted to the nearest _layout\n   *      - The name of the route is relative to the nearest _layout\n   *      - If multiple routes have the same name, the most specific route is used\n   */\n  function getRoutes(contextModule, options) {\n    var directoryTree = getDirectoryTree(contextModule, options);\n    // If there are no routes\n    if (!directoryTree) {\n      return null;\n    }\n    var rootNode = flattenDirectoryTreeToRoutes(directoryTree, options);\n    if (!options.ignoreEntryPoints) {\n      crawlAndAppendInitialRoutesAndEntryFiles(rootNode, options);\n    }\n    return rootNode;\n  }\n  exports.getRoutes = getRoutes;\n  /**\n   * Converts the RequireContext keys (file paths) into a directory tree.\n   */\n  function getDirectoryTree(contextModule, options) {\n    var importMode = options.importMode || \"sync\";\n    var ignoreList = [/^\\.\\/\\+(html|native-intent)\\.[tj]sx?$/]; // Ignore the top level ./+html file\n    if (options.ignore) {\n      ignoreList.push(...options.ignore);\n    }\n    if (!options.preserveApiRoutes) {\n      ignoreList.push(/\\+api\\.[tj]sx?$/);\n    }\n    var rootDirectory = {\n      files: new Map(),\n      subdirectories: new Map()\n    };\n    var hasRoutes = false;\n    var isValid = false;\n    var _loop = function (filePath) {\n        if (ignoreList.some(regex => regex.test(filePath))) {\n          return 0; // continue\n        }\n        isValid = true;\n        var meta = getFileMeta(filePath, options);\n        // This is a file that should be ignored. e.g maybe it has an invalid platform?\n        if (meta.specificity < 0) {\n          return 0; // continue\n        }\n        var node = {\n          type: meta.isApi ? 'api' : meta.isLayout ? 'layout' : 'route',\n          loadRoute() {\n            if (options.ignoreRequireErrors) {\n              try {\n                return contextModule(filePath);\n              } catch {\n                return {};\n              }\n            } else {\n              return contextModule(filePath);\n            }\n          },\n          contextKey: filePath,\n          route: '',\n          dynamic: null,\n          children: [] // While we are building the directory tree, we don't know the node's children just yet. This is added during hoisting\n        };\n        if (process.env.NODE_ENV === 'development') {\n          // If the user has set the `EXPO_ROUTER_IMPORT_MODE` to `sync` then we should\n          // filter the missing routes.\n          if (node.type !== 'api' && importMode === 'sync') {\n            if (!node.loadRoute()?.default) {\n              return 0; // continue\n            }\n          }\n        }\n        /**\n         * A single filepath may be extrapolated into multiple routes if it contains array syntax.\n         * Another way to thinking about is that a filepath node is present in multiple leaves of the directory tree.\n         */\n        for (var route of extrapolateGroups(meta.route)) {\n          // Traverse the directory tree to its leaf node, creating any missing directories along the way\n          var subdirectoryParts = route.split('/').slice(0, -1);\n          // Start at the root directory and traverse the path to the leaf directory\n          var directory = rootDirectory;\n          for (var part of subdirectoryParts) {\n            var subDirectory = directory.subdirectories.get(part);\n            // Create any missing subdirectories\n            if (!subDirectory) {\n              subDirectory = {\n                files: new Map(),\n                subdirectories: new Map()\n              };\n              directory.subdirectories.set(part, subDirectory);\n            }\n            directory = subDirectory;\n          }\n          // Clone the node for this route\n          node = {\n            ...node,\n            route\n          };\n          if (meta.isLayout) {\n            directory.layout ??= [];\n            var existing = directory.layout[meta.specificity];\n            if (existing) {\n              // In production, use the first route found\n              if (process.env.NODE_ENV !== 'production') {\n                throw new Error(`The layouts \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`);\n              }\n            } else {\n              node = getLayoutNode(node, options);\n              directory.layout[meta.specificity] = node;\n            }\n          } else if (meta.isApi) {\n            var fileKey = `${route}+api`;\n            var nodes = directory.files.get(fileKey);\n            if (!nodes) {\n              nodes = [];\n              directory.files.set(fileKey, nodes);\n            }\n            // API Routes have no specificity, they are always the first node\n            var _existing = nodes[0];\n            if (_existing) {\n              // In production, use the first route found\n              if (process.env.NODE_ENV !== 'production') {\n                throw new Error(`The API route file \"${filePath}\" and \"${_existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`);\n              }\n            } else {\n              nodes[0] = node;\n            }\n          } else {\n            var _nodes = directory.files.get(route);\n            if (!_nodes) {\n              _nodes = [];\n              directory.files.set(route, _nodes);\n            }\n            /**\n             * If there is an existing node with the same specificity, then we have a conflict.\n             * NOTE(Platform Routes):\n             *    We cannot check for specificity conflicts here, as we haven't processed all the context keys yet!\n             *    This will be checked during hoisting, as well as enforcing that all routes have a non-platform route.\n             */\n            var _existing2 = _nodes[meta.specificity];\n            if (_existing2) {\n              // In production, use the first route found\n              if (process.env.NODE_ENV !== 'production') {\n                throw new Error(`The route files \"${filePath}\" and \"${_existing2.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`);\n              }\n            } else {\n              hasRoutes ||= true;\n              _nodes[meta.specificity] = node;\n            }\n          }\n        }\n      },\n      _ret;\n    for (var filePath of contextModule.keys()) {\n      _ret = _loop(filePath);\n      if (_ret === 0) continue;\n    }\n    // If there are no routes/layouts then we should display the tutorial.\n    if (!isValid) {\n      return null;\n    }\n    /**\n     * If there are no top-level _layout, add a default _layout\n     * While this is a generated route, it will still be generated even if skipGenerated is true.\n     */\n    if (!rootDirectory.layout) {\n      rootDirectory.layout = [options.getSystemRoute({\n        type: 'layout',\n        route: ''\n      })];\n    }\n    // Only include the sitemap if there are routes.\n    if (!options.skipGenerated) {\n      if (hasRoutes) {\n        appendSitemapRoute(rootDirectory, options);\n      }\n      appendNotFoundRoute(rootDirectory, options);\n    }\n    return rootDirectory;\n  }\n  /**\n   * Flatten the directory tree into routes, hoisting routes to the nearest _layout.\n   */\n  function flattenDirectoryTreeToRoutes(directory, options, /* The nearest _layout file in the directory tree */\n  layout) {\n    var pathToRemove = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    /**\n     * This directory has a _layout file so it becomes the new target for hoisting routes.\n     */\n    if (directory.layout) {\n      var previousLayout = layout;\n      layout = getMostSpecific(directory.layout);\n      // Add the new layout as a child of its parent\n      if (previousLayout) {\n        previousLayout.children.push(layout);\n      }\n      if (options.internal_stripLoadRoute) {\n        delete layout.loadRoute;\n      }\n      // `route` is the absolute pathname. We need to make this relative to the last _layout\n      var newRoute = layout.route.replace(pathToRemove, '');\n      pathToRemove = layout.route ? `${layout.route}/` : '';\n      // Now update this layout with the new relative route and dynamic conventions\n      layout.route = newRoute;\n      layout.dynamic = generateDynamic(layout.contextKey.slice(0));\n    }\n    // This should never occur as there will always be a root layout, but it makes the type system happy\n    if (!layout) throw new Error('Expo Router Internal Error: No nearest layout');\n    for (var routes of directory.files.values()) {\n      var routeNode = getMostSpecific(routes);\n      // `route` is the absolute pathname. We need to make this relative to the nearest layout\n      routeNode.route = routeNode.route.replace(pathToRemove, '');\n      routeNode.dynamic = generateDynamic(routeNode.route);\n      if (options.internal_stripLoadRoute) {\n        delete routeNode.loadRoute;\n      }\n      layout.children.push(routeNode);\n    }\n    // Recursively flatten the subdirectories\n    for (var child of directory.subdirectories.values()) {\n      flattenDirectoryTreeToRoutes(child, options, layout, pathToRemove);\n    }\n    return layout;\n  }\n  function getFileMeta(key, options) {\n    // Remove the leading `./`\n    key = key.replace(/^\\.\\//, '');\n    var parts = key.split('/');\n    var route = (0, matchers_1.removeSupportedExtensions)(key);\n    var filename = parts[parts.length - 1];\n    var _split = (0, matchers_1.removeSupportedExtensions)(filename).split('.'),\n      _split2 = _slicedToArray(_split, 2),\n      filenameWithoutExtensions = _split2[0],\n      platformExtension = _split2[1];\n    var isLayout = filenameWithoutExtensions === '_layout';\n    var isApi = filename.match(/\\+api\\.(\\w+\\.)?[jt]sx?$/);\n    if (filenameWithoutExtensions.startsWith('(') && filenameWithoutExtensions.endsWith(')')) {\n      throw new Error(`Invalid route ./${key}. Routes cannot end with '(group)' syntax`);\n    }\n    // Nested routes cannot start with the '+' character, except for the '+not-found' route\n    if (!isApi && filename.startsWith('+') && filenameWithoutExtensions !== '+not-found') {\n      var renamedRoute = [...parts.slice(0, -1), filename.slice(1)].join('/');\n      throw new Error(`Invalid route ./${key}. Route nodes cannot start with the '+' character. \"Please rename to ${renamedRoute}\"`);\n    }\n    var specificity = 0;\n    var hasPlatformExtension = validPlatforms.has(platformExtension);\n    var usePlatformRoutes = options.platformRoutes ?? true;\n    if (hasPlatformExtension) {\n      if (!usePlatformRoutes) {\n        // If the user has disabled platform routes, then we should ignore this file\n        specificity = -1;\n      } else if (!options.platform) {\n        // If we don't have a platform, then we should ignore this file\n        // This used by typed routes, sitemap, etc\n        specificity = -1;\n      } else if (platformExtension === options.platform) {\n        // If the platform extension is the same as the options.platform, then it is the most specific\n        specificity = 2;\n      } else if (platformExtension === 'native' && options.platform !== 'web') {\n        // `native` is allow but isn't as specific as the platform\n        specificity = 1;\n      } else if (platformExtension !== options.platform) {\n        // Somehow we have a platform extension that doesn't match the options.platform and it isn't native\n        // This is an invalid file and we will ignore it\n        specificity = -1;\n      }\n      if (isApi && specificity !== 0) {\n        throw new Error(`Api routes cannot have platform extensions. Please remove '.${platformExtension}' from './${key}'`);\n      }\n      route = route.replace(new RegExp(`.${platformExtension}$`), '');\n    }\n    return {\n      route,\n      specificity,\n      isLayout,\n      isApi\n    };\n  }\n  function getIgnoreList(options) {\n    var ignore = [/^\\.\\/\\+html\\.[tj]sx?$/, ...(options?.ignore ?? [])];\n    if (options?.preserveApiRoutes !== true) {\n      ignore.push(/\\+api\\.[tj]sx?$/);\n    }\n    return ignore;\n  }\n  exports.getIgnoreList = getIgnoreList;\n  /**\n   * Generates a set of strings which have the router array syntax extrapolated.\n   *\n   * /(a,b)/(c,d)/e.tsx => new Set(['a/c/e.tsx', 'a/d/e.tsx', 'b/c/e.tsx', 'b/d/e.tsx'])\n   */\n  function extrapolateGroups(key) {\n    var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    var match = (0, matchers_1.matchArrayGroupName)(key);\n    if (!match) {\n      keys.add(key);\n      return keys;\n    }\n    var groups = match.split(',');\n    var groupsSet = new Set(groups);\n    if (groupsSet.size !== groups.length) {\n      throw new Error(`Array syntax cannot contain duplicate group name \"${groups}\" in \"${key}\".`);\n    }\n    if (groups.length === 1) {\n      keys.add(key);\n      return keys;\n    }\n    for (var group of groups) {\n      extrapolateGroups(key.replace(match, group.trim()), keys);\n    }\n    return keys;\n  }\n  exports.extrapolateGroups = extrapolateGroups;\n  function generateDynamic(path) {\n    var dynamic = path.split('/').map(part => {\n      if (part === '+not-found') {\n        return {\n          name: '+not-found',\n          deep: true,\n          notFound: true\n        };\n      }\n      var deepDynamicName = (0, matchers_1.matchDeepDynamicRouteName)(part);\n      var dynamicName = deepDynamicName ?? (0, matchers_1.matchDynamicName)(part);\n      if (!dynamicName) return null;\n      return {\n        name: dynamicName,\n        deep: !!deepDynamicName\n      };\n    }).filter(part => !!part);\n    return dynamic.length === 0 ? null : dynamic;\n  }\n  exports.generateDynamic = generateDynamic;\n  function appendSitemapRoute(directory, options) {\n    if (!directory.files.has('_sitemap') && options.getSystemRoute) {\n      directory.files.set('_sitemap', [options.getSystemRoute({\n        type: 'route',\n        route: '_sitemap'\n      })]);\n    }\n  }\n  function appendNotFoundRoute(directory, options) {\n    if (!directory.files.has('+not-found') && options.getSystemRoute) {\n      directory.files.set('+not-found', [options.getSystemRoute({\n        type: 'route',\n        route: '+not-found'\n      })]);\n    }\n  }\n  function getLayoutNode(node, options) {\n    /**\n     * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n     * Each of these layouts will have a different initialRouteName based upon the first group name.\n     */\n    // We may strip loadRoute during testing\n    var groupName = (0, matchers_1.matchGroupName)(node.route);\n    var childMatchingGroup = node.children.find(child => {\n      return child.route.replace(/\\/index$/, '') === groupName;\n    });\n    var initialRouteName = childMatchingGroup?.route;\n    var loaded = node.loadRoute();\n    if (loaded?.unstable_settings) {\n      // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n      initialRouteName = loaded.unstable_settings.initialRouteName ?? initialRouteName;\n      if (groupName) {\n        // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n        var groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.initialRouteName;\n        initialRouteName = groupSpecificInitialRouteName ?? initialRouteName;\n      }\n    }\n    return {\n      ...node,\n      route: node.route.replace(/\\/?_layout$/, ''),\n      children: [],\n      initialRouteName\n    };\n  }\n  function crawlAndAppendInitialRoutesAndEntryFiles(node, options) {\n    var entryPoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    if (node.type === 'route') {\n      node.entryPoints = [...new Set([...entryPoints, node.contextKey])];\n    } else if (node.type === 'layout') {\n      if (!node.children) {\n        throw new Error(`Layout \"${node.contextKey}\" does not contain any child routes`);\n      }\n      // Every node below this layout will have it as an entryPoint\n      entryPoints = [...entryPoints, node.contextKey];\n      /**\n       * Calculate the initialRouteNode\n       *\n       * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n       * Each of these layouts will have a different initialRouteName based upon the first group.\n       */\n      var groupName = (0, matchers_1.matchGroupName)(node.route);\n      var childMatchingGroup = node.children.find(child => {\n        return child.route.replace(/\\/index$/, '') === groupName;\n      });\n      var initialRouteName = childMatchingGroup?.route;\n      // We may strip loadRoute during testing\n      if (!options.internal_stripLoadRoute) {\n        var loaded = node.loadRoute();\n        if (loaded?.unstable_settings) {\n          // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n          initialRouteName = loaded.unstable_settings.initialRouteName ?? initialRouteName;\n          if (groupName) {\n            // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n            var groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.initialRouteName;\n            initialRouteName = groupSpecificInitialRouteName ?? initialRouteName;\n          }\n        }\n      }\n      if (initialRouteName) {\n        var initialRoute = node.children.find(child => child.route === initialRouteName);\n        if (!initialRoute) {\n          var validInitialRoutes = node.children.filter(child => !child.generated).map(child => `'${child.route}'`).join(', ');\n          if (groupName) {\n            throw new Error(`Layout ${node.contextKey} has invalid initialRouteName '${initialRouteName}' for group '(${groupName})'. Valid options are: ${validInitialRoutes}`);\n          } else {\n            throw new Error(`Layout ${node.contextKey} has invalid initialRouteName '${initialRouteName}'. Valid options are: ${validInitialRoutes}`);\n          }\n        }\n        // Navigators can add initialsRoutes into the history, so they need to be to be included in the entryPoints\n        node.initialRouteName = initialRouteName;\n        entryPoints.push(initialRoute.contextKey);\n      }\n      for (var child of node.children) {\n        crawlAndAppendInitialRoutesAndEntryFiles(child, options, entryPoints);\n      }\n    }\n  }\n  function getMostSpecific(routes) {\n    var route = routes[routes.length - 1];\n    if (!routes[0]) {\n      throw new Error(`The file ${route.contextKey} does not have a fallback sibling file without a platform extension.`);\n    }\n    // This works even tho routes is holey array (e.g it might have index 0 and 2 but not 1)\n    // `.length` includes the holes in its count\n    return routes[routes.length - 1];\n  }\n});","lineCount":458,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[4,90,1,13,"default"],[4,97,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,3,0,"exports"],[8,9,3,7],[8,10,3,8,"generateDynamic"],[8,25,3,23],[8,28,3,26,"exports"],[8,35,3,33],[8,36,3,34,"extrapolateGroups"],[8,53,3,51],[8,56,3,54,"exports"],[8,63,3,61],[8,64,3,62,"getIgnoreList"],[8,77,3,75],[8,80,3,78,"exports"],[8,87,3,85],[8,88,3,86,"getRoutes"],[8,97,3,95],[8,100,3,98],[8,105,3,103],[8,106,3,104],[9,2,4,0],[9,6,4,6,"matchers_1"],[9,16,4,16],[9,19,4,19,"require"],[9,26,4,26],[9,27,4,26,"_dependencyMap"],[9,41,4,26],[9,58,4,39],[9,59,4,40],[10,2,5,0],[10,6,5,6,"validPlatforms"],[10,20,5,20],[10,23,5,23],[10,27,5,27,"Set"],[10,30,5,30],[10,31,5,31],[10,32,5,32],[10,41,5,41],[10,43,5,43],[10,48,5,48],[10,50,5,50],[10,58,5,58],[10,60,5,60],[10,65,5,65],[10,66,5,66],[10,67,5,67],[11,2,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,2,18,0],[23,11,18,9,"getRoutes"],[23,20,18,18,"getRoutes"],[23,21,18,19,"contextModule"],[23,34,18,32],[23,36,18,34,"options"],[23,43,18,41],[23,45,18,43],[24,4,19,4],[24,8,19,10,"directoryTree"],[24,21,19,23],[24,24,19,26,"getDirectoryTree"],[24,40,19,42],[24,41,19,43,"contextModule"],[24,54,19,56],[24,56,19,58,"options"],[24,63,19,65],[24,64,19,66],[25,4,20,4],[26,4,21,4],[26,8,21,8],[26,9,21,9,"directoryTree"],[26,22,21,22],[26,24,21,24],[27,6,22,8],[27,13,22,15],[27,17,22,19],[28,4,23,4],[29,4,24,4],[29,8,24,10,"rootNode"],[29,16,24,18],[29,19,24,21,"flattenDirectoryTreeToRoutes"],[29,47,24,49],[29,48,24,50,"directoryTree"],[29,61,24,63],[29,63,24,65,"options"],[29,70,24,72],[29,71,24,73],[30,4,25,4],[30,8,25,8],[30,9,25,9,"options"],[30,16,25,16],[30,17,25,17,"ignoreEntryPoints"],[30,34,25,34],[30,36,25,36],[31,6,26,8,"crawlAndAppendInitialRoutesAndEntryFiles"],[31,46,26,48],[31,47,26,49,"rootNode"],[31,55,26,57],[31,57,26,59,"options"],[31,64,26,66],[31,65,26,67],[32,4,27,4],[33,4,28,4],[33,11,28,11,"rootNode"],[33,19,28,19],[34,2,29,0],[35,2,30,0,"exports"],[35,9,30,7],[35,10,30,8,"getRoutes"],[35,19,30,17],[35,22,30,20,"getRoutes"],[35,31,30,29],[36,2,31,0],[37,0,32,0],[38,0,33,0],[39,2,34,0],[39,11,34,9,"getDirectoryTree"],[39,27,34,25,"getDirectoryTree"],[39,28,34,26,"contextModule"],[39,41,34,39],[39,43,34,41,"options"],[39,50,34,48],[39,52,34,50],[40,4,35,4],[40,8,35,10,"importMode"],[40,18,35,20],[40,21,35,23,"options"],[40,28,35,30],[40,29,35,31,"importMode"],[40,39,35,41],[40,49,35,80],[41,4,36,4],[41,8,36,10,"ignoreList"],[41,18,36,20],[41,21,36,23],[41,22,36,24],[41,61,36,63],[41,62,36,64],[41,63,36,65],[41,64,36,66],[42,4,37,4],[42,8,37,8,"options"],[42,15,37,15],[42,16,37,16,"ignore"],[42,22,37,22],[42,24,37,24],[43,6,38,8,"ignoreList"],[43,16,38,18],[43,17,38,19,"push"],[43,21,38,23],[43,22,38,24],[43,25,38,27,"options"],[43,32,38,34],[43,33,38,35,"ignore"],[43,39,38,41],[43,40,38,42],[44,4,39,4],[45,4,40,4],[45,8,40,8],[45,9,40,9,"options"],[45,16,40,16],[45,17,40,17,"preserveApiRoutes"],[45,34,40,34],[45,36,40,36],[46,6,41,8,"ignoreList"],[46,16,41,18],[46,17,41,19,"push"],[46,21,41,23],[46,22,41,24],[46,39,41,41],[46,40,41,42],[47,4,42,4],[48,4,43,4],[48,8,43,10,"rootDirectory"],[48,21,43,23],[48,24,43,26],[49,6,44,8,"files"],[49,11,44,13],[49,13,44,15],[49,17,44,19,"Map"],[49,20,44,22],[49,21,44,23],[49,22,44,24],[50,6,45,8,"subdirectories"],[50,20,45,22],[50,22,45,24],[50,26,45,28,"Map"],[50,29,45,31],[50,30,45,32],[51,4,46,4],[51,5,46,5],[52,4,47,4],[52,8,47,8,"hasRoutes"],[52,17,47,17],[52,20,47,20],[52,25,47,25],[53,4,48,4],[53,8,48,8,"isValid"],[53,15,48,15],[53,18,48,18],[53,23,48,23],[54,4,48,24],[54,8,48,24,"_loop"],[54,13,48,24],[54,25,48,24,"_loop"],[54,26,48,24,"filePath"],[54,34,48,24],[54,36,49,49],[55,8,50,8],[55,12,50,12,"ignoreList"],[55,22,50,22],[55,23,50,23,"some"],[55,27,50,27],[55,28,50,29,"regex"],[55,33,50,34],[55,37,50,39,"regex"],[55,42,50,44],[55,43,50,45,"test"],[55,47,50,49],[55,48,50,50,"filePath"],[55,56,50,58],[55,57,50,59],[55,58,50,60],[55,60,50,62],[56,10,50,62],[57,8,52,8],[58,8,53,8,"isValid"],[58,15,53,15],[58,18,53,18],[58,22,53,22],[59,8,54,8],[59,12,54,14,"meta"],[59,16,54,18],[59,19,54,21,"getFileMeta"],[59,30,54,32],[59,31,54,33,"filePath"],[59,39,54,41],[59,41,54,43,"options"],[59,48,54,50],[59,49,54,51],[60,8,55,8],[61,8,56,8],[61,12,56,12,"meta"],[61,16,56,16],[61,17,56,17,"specificity"],[61,28,56,28],[61,31,56,31],[61,32,56,32],[61,34,56,34],[62,10,56,34],[63,8,58,8],[64,8,59,8],[64,12,59,12,"node"],[64,16,59,16],[64,19,59,19],[65,10,60,12,"type"],[65,14,60,16],[65,16,60,18,"meta"],[65,20,60,22],[65,21,60,23,"isApi"],[65,26,60,28],[65,29,60,31],[65,34,60,36],[65,37,60,39,"meta"],[65,41,60,43],[65,42,60,44,"isLayout"],[65,50,60,52],[65,53,60,55],[65,61,60,63],[65,64,60,66],[65,71,60,73],[66,10,61,12,"loadRoute"],[66,19,61,21,"loadRoute"],[66,20,61,21],[66,22,61,24],[67,12,62,16],[67,16,62,20,"options"],[67,23,62,27],[67,24,62,28,"ignoreRequireErrors"],[67,43,62,47],[67,45,62,49],[68,14,63,20],[68,18,63,24],[69,16,64,24],[69,23,64,31,"contextModule"],[69,36,64,44],[69,37,64,45,"filePath"],[69,45,64,53],[69,46,64,54],[70,14,65,20],[70,15,65,21],[70,16,66,20],[70,22,66,26],[71,16,67,24],[71,23,67,31],[71,24,67,32],[71,25,67,33],[72,14,68,20],[73,12,69,16],[73,13,69,17],[73,19,70,21],[74,14,71,20],[74,21,71,27,"contextModule"],[74,34,71,40],[74,35,71,41,"filePath"],[74,43,71,49],[74,44,71,50],[75,12,72,16],[76,10,73,12],[76,11,73,13],[77,10,74,12,"contextKey"],[77,20,74,22],[77,22,74,24,"filePath"],[77,30,74,32],[78,10,75,12,"route"],[78,15,75,17],[78,17,75,19],[78,19,75,21],[79,10,76,12,"dynamic"],[79,17,76,19],[79,19,76,21],[79,23,76,25],[80,10,77,12,"children"],[80,18,77,20],[80,20,77,22],[80,22,77,24],[80,23,77,26],[81,8,78,8],[81,9,78,9],[82,8,79,8],[82,12,79,12,"process"],[82,19,79,19],[82,20,79,20,"env"],[82,23,79,23],[82,24,79,24,"NODE_ENV"],[82,32,79,32],[82,37,79,37],[82,50,79,50],[82,52,79,52],[83,10,80,12],[84,10,81,12],[85,10,82,12],[85,14,82,16,"node"],[85,18,82,20],[85,19,82,21,"type"],[85,23,82,25],[85,28,82,30],[85,33,82,35],[85,37,82,39,"importMode"],[85,47,82,49],[85,52,82,54],[85,58,82,60],[85,60,82,62],[86,12,83,16],[86,16,83,20],[86,17,83,21,"node"],[86,21,83,25],[86,22,83,26,"loadRoute"],[86,31,83,35],[86,32,83,36],[86,33,83,37],[86,35,83,39,"default"],[86,42,83,46],[86,44,83,48],[87,14,83,48],[88,12,85,16],[89,10,86,12],[90,8,87,8],[91,8,88,8],[92,0,89,0],[93,0,90,0],[94,0,91,0],[95,8,92,8],[95,13,92,13],[95,17,92,19,"route"],[95,22,92,24],[95,26,92,28,"extrapolateGroups"],[95,43,92,45],[95,44,92,46,"meta"],[95,48,92,50],[95,49,92,51,"route"],[95,54,92,56],[95,55,92,57],[95,57,92,59],[96,10,93,12],[97,10,94,12],[97,14,94,18,"subdirectoryParts"],[97,31,94,35],[97,34,94,38,"route"],[97,39,94,43],[97,40,94,44,"split"],[97,45,94,49],[97,46,94,50],[97,49,94,53],[97,50,94,54],[97,51,94,55,"slice"],[97,56,94,60],[97,57,94,61],[97,58,94,62],[97,60,94,64],[97,61,94,65],[97,62,94,66],[97,63,94,67],[98,10,95,12],[99,10,96,12],[99,14,96,16,"directory"],[99,23,96,25],[99,26,96,28,"rootDirectory"],[99,39,96,41],[100,10,97,12],[100,15,97,17],[100,19,97,23,"part"],[100,23,97,27],[100,27,97,31,"subdirectoryParts"],[100,44,97,48],[100,46,97,50],[101,12,98,16],[101,16,98,20,"subDirectory"],[101,28,98,32],[101,31,98,35,"directory"],[101,40,98,44],[101,41,98,45,"subdirectories"],[101,55,98,59],[101,56,98,60,"get"],[101,59,98,63],[101,60,98,64,"part"],[101,64,98,68],[101,65,98,69],[102,12,99,16],[103,12,100,16],[103,16,100,20],[103,17,100,21,"subDirectory"],[103,29,100,33],[103,31,100,35],[104,14,101,20,"subDirectory"],[104,26,101,32],[104,29,101,35],[105,16,102,24,"files"],[105,21,102,29],[105,23,102,31],[105,27,102,35,"Map"],[105,30,102,38],[105,31,102,39],[105,32,102,40],[106,16,103,24,"subdirectories"],[106,30,103,38],[106,32,103,40],[106,36,103,44,"Map"],[106,39,103,47],[106,40,103,48],[107,14,104,20],[107,15,104,21],[108,14,105,20,"directory"],[108,23,105,29],[108,24,105,30,"subdirectories"],[108,38,105,44],[108,39,105,45,"set"],[108,42,105,48],[108,43,105,49,"part"],[108,47,105,53],[108,49,105,55,"subDirectory"],[108,61,105,67],[108,62,105,68],[109,12,106,16],[110,12,107,16,"directory"],[110,21,107,25],[110,24,107,28,"subDirectory"],[110,36,107,40],[111,10,108,12],[112,10,109,12],[113,10,110,12,"node"],[113,14,110,16],[113,17,110,19],[114,12,110,21],[114,15,110,24,"node"],[114,19,110,28],[115,12,110,30,"route"],[116,10,110,36],[116,11,110,37],[117,10,111,12],[117,14,111,16,"meta"],[117,18,111,20],[117,19,111,21,"isLayout"],[117,27,111,29],[117,29,111,31],[118,12,112,16,"directory"],[118,21,112,25],[118,22,112,26,"layout"],[118,28,112,32],[118,33,112,37],[118,35,112,39],[119,12,113,16],[119,16,113,22,"existing"],[119,24,113,30],[119,27,113,33,"directory"],[119,36,113,42],[119,37,113,43,"layout"],[119,43,113,49],[119,44,113,50,"meta"],[119,48,113,54],[119,49,113,55,"specificity"],[119,60,113,66],[119,61,113,67],[120,12,114,16],[120,16,114,20,"existing"],[120,24,114,28],[120,26,114,30],[121,14,115,20],[122,14,116,20],[122,18,116,24,"process"],[122,25,116,31],[122,26,116,32,"env"],[122,29,116,35],[122,30,116,36,"NODE_ENV"],[122,38,116,44],[122,43,116,49],[122,55,116,61],[122,57,116,63],[123,16,117,24],[123,22,117,30],[123,26,117,34,"Error"],[123,31,117,39],[123,32,117,40],[123,48,117,56,"filePath"],[123,56,117,64],[123,66,117,74,"existing"],[123,74,117,82],[123,75,117,83,"contextKey"],[123,85,117,93],[123,114,117,122,"route"],[123,119,117,127],[123,167,117,175],[123,168,117,176],[124,14,118,20],[125,12,119,16],[125,13,119,17],[125,19,120,21],[126,14,121,20,"node"],[126,18,121,24],[126,21,121,27,"getLayoutNode"],[126,34,121,40],[126,35,121,41,"node"],[126,39,121,45],[126,41,121,47,"options"],[126,48,121,54],[126,49,121,55],[127,14,122,20,"directory"],[127,23,122,29],[127,24,122,30,"layout"],[127,30,122,36],[127,31,122,37,"meta"],[127,35,122,41],[127,36,122,42,"specificity"],[127,47,122,53],[127,48,122,54],[127,51,122,57,"node"],[127,55,122,61],[128,12,123,16],[129,10,124,12],[129,11,124,13],[129,17,125,17],[129,21,125,21,"meta"],[129,25,125,25],[129,26,125,26,"isApi"],[129,31,125,31],[129,33,125,33],[130,12,126,16],[130,16,126,22,"fileKey"],[130,23,126,29],[130,26,126,32],[130,29,126,35,"route"],[130,34,126,40],[130,40,126,46],[131,12,127,16],[131,16,127,20,"nodes"],[131,21,127,25],[131,24,127,28,"directory"],[131,33,127,37],[131,34,127,38,"files"],[131,39,127,43],[131,40,127,44,"get"],[131,43,127,47],[131,44,127,48,"fileKey"],[131,51,127,55],[131,52,127,56],[132,12,128,16],[132,16,128,20],[132,17,128,21,"nodes"],[132,22,128,26],[132,24,128,28],[133,14,129,20,"nodes"],[133,19,129,25],[133,22,129,28],[133,24,129,30],[134,14,130,20,"directory"],[134,23,130,29],[134,24,130,30,"files"],[134,29,130,35],[134,30,130,36,"set"],[134,33,130,39],[134,34,130,40,"fileKey"],[134,41,130,47],[134,43,130,49,"nodes"],[134,48,130,54],[134,49,130,55],[135,12,131,16],[136,12,132,16],[137,12,133,16],[137,16,133,22,"existing"],[137,25,133,30],[137,28,133,33,"nodes"],[137,33,133,38],[137,34,133,39],[137,35,133,40],[137,36,133,41],[138,12,134,16],[138,16,134,20,"existing"],[138,25,134,28],[138,27,134,30],[139,14,135,20],[140,14,136,20],[140,18,136,24,"process"],[140,25,136,31],[140,26,136,32,"env"],[140,29,136,35],[140,30,136,36,"NODE_ENV"],[140,38,136,44],[140,43,136,49],[140,55,136,61],[140,57,136,63],[141,16,137,24],[141,22,137,30],[141,26,137,34,"Error"],[141,31,137,39],[141,32,137,40],[141,55,137,63,"filePath"],[141,63,137,71],[141,73,137,81,"existing"],[141,82,137,89],[141,83,137,90,"contextKey"],[141,93,137,100],[141,122,137,129,"route"],[141,127,137,134],[141,175,137,182],[141,176,137,183],[142,14,138,20],[143,12,139,16],[143,13,139,17],[143,19,140,21],[144,14,141,20,"nodes"],[144,19,141,25],[144,20,141,26],[144,21,141,27],[144,22,141,28],[144,25,141,31,"node"],[144,29,141,35],[145,12,142,16],[146,10,143,12],[146,11,143,13],[146,17,144,17],[147,12,145,16],[147,16,145,20,"nodes"],[147,22,145,25],[147,25,145,28,"directory"],[147,34,145,37],[147,35,145,38,"files"],[147,40,145,43],[147,41,145,44,"get"],[147,44,145,47],[147,45,145,48,"route"],[147,50,145,53],[147,51,145,54],[148,12,146,16],[148,16,146,20],[148,17,146,21,"nodes"],[148,23,146,26],[148,25,146,28],[149,14,147,20,"nodes"],[149,20,147,25],[149,23,147,28],[149,25,147,30],[150,14,148,20,"directory"],[150,23,148,29],[150,24,148,30,"files"],[150,29,148,35],[150,30,148,36,"set"],[150,33,148,39],[150,34,148,40,"route"],[150,39,148,45],[150,41,148,47,"nodes"],[150,47,148,52],[150,48,148,53],[151,12,149,16],[152,12,150,16],[153,0,151,0],[154,0,152,0],[155,0,153,0],[156,0,154,0],[157,0,155,0],[158,12,156,16],[158,16,156,22,"existing"],[158,26,156,30],[158,29,156,33,"nodes"],[158,35,156,38],[158,36,156,39,"meta"],[158,40,156,43],[158,41,156,44,"specificity"],[158,52,156,55],[158,53,156,56],[159,12,157,16],[159,16,157,20,"existing"],[159,26,157,28],[159,28,157,30],[160,14,158,20],[161,14,159,20],[161,18,159,24,"process"],[161,25,159,31],[161,26,159,32,"env"],[161,29,159,35],[161,30,159,36,"NODE_ENV"],[161,38,159,44],[161,43,159,49],[161,55,159,61],[161,57,159,63],[162,16,160,24],[162,22,160,30],[162,26,160,34,"Error"],[162,31,160,39],[162,32,160,40],[162,52,160,60,"filePath"],[162,60,160,68],[162,70,160,78,"existing"],[162,80,160,86],[162,81,160,87,"contextKey"],[162,91,160,97],[162,120,160,126,"route"],[162,125,160,131],[162,173,160,179],[162,174,160,180],[163,14,161,20],[164,12,162,16],[164,13,162,17],[164,19,163,21],[165,14,164,20,"hasRoutes"],[165,23,164,29],[165,28,164,34],[165,32,164,38],[166,14,165,20,"nodes"],[166,20,165,25],[166,21,165,26,"meta"],[166,25,165,30],[166,26,165,31,"specificity"],[166,37,165,42],[166,38,165,43],[166,41,165,46,"node"],[166,45,165,50],[167,12,166,16],[168,10,167,12],[169,8,168,8],[170,6,169,4],[170,7,169,5],[171,6,169,5,"_ret"],[171,10,169,5],[172,4,49,4],[172,9,49,9],[172,13,49,15,"filePath"],[172,21,49,23],[172,25,49,27,"contextModule"],[172,38,49,40],[172,39,49,41,"keys"],[172,43,49,45],[172,44,49,46],[172,45,49,47],[173,6,49,47,"_ret"],[173,10,49,47],[173,13,49,47,"_loop"],[173,18,49,47],[173,19,49,47,"filePath"],[173,27,49,47],[174,6,49,47],[174,10,49,47,"_ret"],[174,14,49,47],[174,22,51,12],[175,4,51,21],[176,4,170,4],[177,4,171,4],[177,8,171,8],[177,9,171,9,"isValid"],[177,16,171,16],[177,18,171,18],[178,6,172,8],[178,13,172,15],[178,17,172,19],[179,4,173,4],[180,4,174,4],[181,0,175,0],[182,0,176,0],[183,0,177,0],[184,4,178,4],[184,8,178,8],[184,9,178,9,"rootDirectory"],[184,22,178,22],[184,23,178,23,"layout"],[184,29,178,29],[184,31,178,31],[185,6,179,8,"rootDirectory"],[185,19,179,21],[185,20,179,22,"layout"],[185,26,179,28],[185,29,179,31],[185,30,180,12,"options"],[185,37,180,19],[185,38,180,20,"getSystemRoute"],[185,52,180,34],[185,53,180,35],[186,8,181,16,"type"],[186,12,181,20],[186,14,181,22],[186,22,181,30],[187,8,182,16,"route"],[187,13,182,21],[187,15,182,23],[188,6,183,12],[188,7,183,13],[188,8,183,14],[188,9,184,9],[189,4,185,4],[190,4,186,4],[191,4,187,4],[191,8,187,8],[191,9,187,9,"options"],[191,16,187,16],[191,17,187,17,"skipGenerated"],[191,30,187,30],[191,32,187,32],[192,6,188,8],[192,10,188,12,"hasRoutes"],[192,19,188,21],[192,21,188,23],[193,8,189,12,"appendSitemapRoute"],[193,26,189,30],[193,27,189,31,"rootDirectory"],[193,40,189,44],[193,42,189,46,"options"],[193,49,189,53],[193,50,189,54],[194,6,190,8],[195,6,191,8,"appendNotFoundRoute"],[195,25,191,27],[195,26,191,28,"rootDirectory"],[195,39,191,41],[195,41,191,43,"options"],[195,48,191,50],[195,49,191,51],[196,4,192,4],[197,4,193,4],[197,11,193,11,"rootDirectory"],[197,24,193,24],[198,2,194,0],[199,2,195,0],[200,0,196,0],[201,0,197,0],[202,2,198,0],[202,11,198,9,"flattenDirectoryTreeToRoutes"],[202,39,198,37,"flattenDirectoryTreeToRoutes"],[202,40,198,38,"directory"],[202,49,198,47],[202,51,198,49,"options"],[202,58,198,56],[202,60,199,0],[203,2,200,0,"layout"],[203,8,200,6],[203,10,202,19],[204,4,202,19],[204,8,202,0,"pathToRemove"],[204,20,202,12],[204,23,202,12,"arguments"],[204,32,202,12],[204,33,202,12,"length"],[204,39,202,12],[204,47,202,12,"arguments"],[204,56,202,12],[204,64,202,12,"undefined"],[204,73,202,12],[204,76,202,12,"arguments"],[204,85,202,12],[204,91,202,15],[204,93,202,17],[205,4,203,4],[206,0,204,0],[207,0,205,0],[208,4,206,4],[208,8,206,8,"directory"],[208,17,206,17],[208,18,206,18,"layout"],[208,24,206,24],[208,26,206,26],[209,6,207,8],[209,10,207,14,"previousLayout"],[209,24,207,28],[209,27,207,31,"layout"],[209,33,207,37],[210,6,208,8,"layout"],[210,12,208,14],[210,15,208,17,"getMostSpecific"],[210,30,208,32],[210,31,208,33,"directory"],[210,40,208,42],[210,41,208,43,"layout"],[210,47,208,49],[210,48,208,50],[211,6,209,8],[212,6,210,8],[212,10,210,12,"previousLayout"],[212,24,210,26],[212,26,210,28],[213,8,211,12,"previousLayout"],[213,22,211,26],[213,23,211,27,"children"],[213,31,211,35],[213,32,211,36,"push"],[213,36,211,40],[213,37,211,41,"layout"],[213,43,211,47],[213,44,211,48],[214,6,212,8],[215,6,213,8],[215,10,213,12,"options"],[215,17,213,19],[215,18,213,20,"internal_stripLoadRoute"],[215,41,213,43],[215,43,213,45],[216,8,214,12],[216,15,214,19,"layout"],[216,21,214,25],[216,22,214,26,"loadRoute"],[216,31,214,35],[217,6,215,8],[218,6,216,8],[219,6,217,8],[219,10,217,14,"newRoute"],[219,18,217,22],[219,21,217,25,"layout"],[219,27,217,31],[219,28,217,32,"route"],[219,33,217,37],[219,34,217,38,"replace"],[219,41,217,45],[219,42,217,46,"pathToRemove"],[219,54,217,58],[219,56,217,60],[219,58,217,62],[219,59,217,63],[220,6,218,8,"pathToRemove"],[220,18,218,20],[220,21,218,23,"layout"],[220,27,218,29],[220,28,218,30,"route"],[220,33,218,35],[220,36,218,38],[220,39,218,41,"layout"],[220,45,218,47],[220,46,218,48,"route"],[220,51,218,53],[220,54,218,56],[220,57,218,59],[220,59,218,61],[221,6,219,8],[222,6,220,8,"layout"],[222,12,220,14],[222,13,220,15,"route"],[222,18,220,20],[222,21,220,23,"newRoute"],[222,29,220,31],[223,6,221,8,"layout"],[223,12,221,14],[223,13,221,15,"dynamic"],[223,20,221,22],[223,23,221,25,"generateDynamic"],[223,38,221,40],[223,39,221,41,"layout"],[223,45,221,47],[223,46,221,48,"contextKey"],[223,56,221,58],[223,57,221,59,"slice"],[223,62,221,64],[223,63,221,65],[223,64,221,66],[223,65,221,67],[223,66,221,68],[224,4,222,4],[225,4,223,4],[226,4,224,4],[226,8,224,8],[226,9,224,9,"layout"],[226,15,224,15],[226,17,225,8],[226,23,225,14],[226,27,225,18,"Error"],[226,32,225,23],[226,33,225,24],[226,80,225,71],[226,81,225,72],[227,4,226,4],[227,9,226,9],[227,13,226,15,"routes"],[227,19,226,21],[227,23,226,25,"directory"],[227,32,226,34],[227,33,226,35,"files"],[227,38,226,40],[227,39,226,41,"values"],[227,45,226,47],[227,46,226,48],[227,47,226,49],[227,49,226,51],[228,6,227,8],[228,10,227,14,"routeNode"],[228,19,227,23],[228,22,227,26,"getMostSpecific"],[228,37,227,41],[228,38,227,42,"routes"],[228,44,227,48],[228,45,227,49],[229,6,228,8],[230,6,229,8,"routeNode"],[230,15,229,17],[230,16,229,18,"route"],[230,21,229,23],[230,24,229,26,"routeNode"],[230,33,229,35],[230,34,229,36,"route"],[230,39,229,41],[230,40,229,42,"replace"],[230,47,229,49],[230,48,229,50,"pathToRemove"],[230,60,229,62],[230,62,229,64],[230,64,229,66],[230,65,229,67],[231,6,230,8,"routeNode"],[231,15,230,17],[231,16,230,18,"dynamic"],[231,23,230,25],[231,26,230,28,"generateDynamic"],[231,41,230,43],[231,42,230,44,"routeNode"],[231,51,230,53],[231,52,230,54,"route"],[231,57,230,59],[231,58,230,60],[232,6,231,8],[232,10,231,12,"options"],[232,17,231,19],[232,18,231,20,"internal_stripLoadRoute"],[232,41,231,43],[232,43,231,45],[233,8,232,12],[233,15,232,19,"routeNode"],[233,24,232,28],[233,25,232,29,"loadRoute"],[233,34,232,38],[234,6,233,8],[235,6,234,8,"layout"],[235,12,234,14],[235,13,234,15,"children"],[235,21,234,23],[235,22,234,24,"push"],[235,26,234,28],[235,27,234,29,"routeNode"],[235,36,234,38],[235,37,234,39],[236,4,235,4],[237,4,236,4],[238,4,237,4],[238,9,237,9],[238,13,237,15,"child"],[238,18,237,20],[238,22,237,24,"directory"],[238,31,237,33],[238,32,237,34,"subdirectories"],[238,46,237,48],[238,47,237,49,"values"],[238,53,237,55],[238,54,237,56],[238,55,237,57],[238,57,237,59],[239,6,238,8,"flattenDirectoryTreeToRoutes"],[239,34,238,36],[239,35,238,37,"child"],[239,40,238,42],[239,42,238,44,"options"],[239,49,238,51],[239,51,238,53,"layout"],[239,57,238,59],[239,59,238,61,"pathToRemove"],[239,71,238,73],[239,72,238,74],[240,4,239,4],[241,4,240,4],[241,11,240,11,"layout"],[241,17,240,17],[242,2,241,0],[243,2,242,0],[243,11,242,9,"getFileMeta"],[243,22,242,20,"getFileMeta"],[243,23,242,21,"key"],[243,26,242,24],[243,28,242,26,"options"],[243,35,242,33],[243,37,242,35],[244,4,243,4],[245,4,244,4,"key"],[245,7,244,7],[245,10,244,10,"key"],[245,13,244,13],[245,14,244,14,"replace"],[245,21,244,21],[245,22,244,22],[245,29,244,29],[245,31,244,31],[245,33,244,33],[245,34,244,34],[246,4,245,4],[246,8,245,10,"parts"],[246,13,245,15],[246,16,245,18,"key"],[246,19,245,21],[246,20,245,22,"split"],[246,25,245,27],[246,26,245,28],[246,29,245,31],[246,30,245,32],[247,4,246,4],[247,8,246,8,"route"],[247,13,246,13],[247,16,246,16],[247,17,246,17],[247,18,246,18],[247,20,246,20,"matchers_1"],[247,30,246,30],[247,31,246,31,"removeSupportedExtensions"],[247,56,246,56],[247,58,246,58,"key"],[247,61,246,61],[247,62,246,62],[248,4,247,4],[248,8,247,10,"filename"],[248,16,247,18],[248,19,247,21,"parts"],[248,24,247,26],[248,25,247,27,"parts"],[248,30,247,32],[248,31,247,33,"length"],[248,37,247,39],[248,40,247,42],[248,41,247,43],[248,42,247,44],[249,4,248,4],[249,8,248,4,"_split"],[249,14,248,4],[249,17,248,59],[249,18,248,60],[249,19,248,61],[249,21,248,63,"matchers_1"],[249,31,248,73],[249,32,248,74,"removeSupportedExtensions"],[249,57,248,99],[249,59,248,101,"filename"],[249,67,248,109],[249,68,248,110],[249,69,248,111,"split"],[249,74,248,116],[249,75,248,117],[249,78,248,120],[249,79,248,121],[250,6,248,121,"_split2"],[250,13,248,121],[250,16,248,121,"_slicedToArray"],[250,30,248,121],[250,31,248,121,"_split"],[250,37,248,121],[251,6,248,11,"filenameWithoutExtensions"],[251,31,248,36],[251,34,248,36,"_split2"],[251,41,248,36],[252,6,248,38,"platformExtension"],[252,23,248,55],[252,26,248,55,"_split2"],[252,33,248,55],[253,4,249,4],[253,8,249,10,"isLayout"],[253,16,249,18],[253,19,249,21,"filenameWithoutExtensions"],[253,44,249,46],[253,49,249,51],[253,58,249,60],[254,4,250,4],[254,8,250,10,"isApi"],[254,13,250,15],[254,16,250,18,"filename"],[254,24,250,26],[254,25,250,27,"match"],[254,30,250,32],[254,31,250,33],[254,56,250,58],[254,57,250,59],[255,4,251,4],[255,8,251,8,"filenameWithoutExtensions"],[255,33,251,33],[255,34,251,34,"startsWith"],[255,44,251,44],[255,45,251,45],[255,48,251,48],[255,49,251,49],[255,53,251,53,"filenameWithoutExtensions"],[255,78,251,78],[255,79,251,79,"endsWith"],[255,87,251,87],[255,88,251,88],[255,91,251,91],[255,92,251,92],[255,94,251,94],[256,6,252,8],[256,12,252,14],[256,16,252,18,"Error"],[256,21,252,23],[256,22,252,24],[256,41,252,43,"key"],[256,44,252,46],[256,87,252,89],[256,88,252,90],[257,4,253,4],[258,4,254,4],[259,4,255,4],[259,8,255,8],[259,9,255,9,"isApi"],[259,14,255,14],[259,18,255,18,"filename"],[259,26,255,26],[259,27,255,27,"startsWith"],[259,37,255,37],[259,38,255,38],[259,41,255,41],[259,42,255,42],[259,46,255,46,"filenameWithoutExtensions"],[259,71,255,71],[259,76,255,76],[259,88,255,88],[259,90,255,90],[260,6,256,8],[260,10,256,14,"renamedRoute"],[260,22,256,26],[260,25,256,29],[260,26,256,30],[260,29,256,33,"parts"],[260,34,256,38],[260,35,256,39,"slice"],[260,40,256,44],[260,41,256,45],[260,42,256,46],[260,44,256,48],[260,45,256,49],[260,46,256,50],[260,47,256,51],[260,49,256,53,"filename"],[260,57,256,61],[260,58,256,62,"slice"],[260,63,256,67],[260,64,256,68],[260,65,256,69],[260,66,256,70],[260,67,256,71],[260,68,256,72,"join"],[260,72,256,76],[260,73,256,77],[260,76,256,80],[260,77,256,81],[261,6,257,8],[261,12,257,14],[261,16,257,18,"Error"],[261,21,257,23],[261,22,257,24],[261,41,257,43,"key"],[261,44,257,46],[261,116,257,118,"renamedRoute"],[261,128,257,130],[261,131,257,133],[261,132,257,134],[262,4,258,4],[263,4,259,4],[263,8,259,8,"specificity"],[263,19,259,19],[263,22,259,22],[263,23,259,23],[264,4,260,4],[264,8,260,10,"hasPlatformExtension"],[264,28,260,30],[264,31,260,33,"validPlatforms"],[264,45,260,47],[264,46,260,48,"has"],[264,49,260,51],[264,50,260,52,"platformExtension"],[264,67,260,69],[264,68,260,70],[265,4,261,4],[265,8,261,10,"usePlatformRoutes"],[265,25,261,27],[265,28,261,30,"options"],[265,35,261,37],[265,36,261,38,"platformRoutes"],[265,50,261,52],[265,54,261,56],[265,58,261,60],[266,4,262,4],[266,8,262,8,"hasPlatformExtension"],[266,28,262,28],[266,30,262,30],[267,6,263,8],[267,10,263,12],[267,11,263,13,"usePlatformRoutes"],[267,28,263,30],[267,30,263,32],[268,8,264,12],[269,8,265,12,"specificity"],[269,19,265,23],[269,22,265,26],[269,23,265,27],[269,24,265,28],[270,6,266,8],[270,7,266,9],[270,13,267,13],[270,17,267,17],[270,18,267,18,"options"],[270,25,267,25],[270,26,267,26,"platform"],[270,34,267,34],[270,36,267,36],[271,8,268,12],[272,8,269,12],[273,8,270,12,"specificity"],[273,19,270,23],[273,22,270,26],[273,23,270,27],[273,24,270,28],[274,6,271,8],[274,7,271,9],[274,13,272,13],[274,17,272,17,"platformExtension"],[274,34,272,34],[274,39,272,39,"options"],[274,46,272,46],[274,47,272,47,"platform"],[274,55,272,55],[274,57,272,57],[275,8,273,12],[276,8,274,12,"specificity"],[276,19,274,23],[276,22,274,26],[276,23,274,27],[277,6,275,8],[277,7,275,9],[277,13,276,13],[277,17,276,17,"platformExtension"],[277,34,276,34],[277,39,276,39],[277,47,276,47],[277,51,276,51,"options"],[277,58,276,58],[277,59,276,59,"platform"],[277,67,276,67],[277,72,276,72],[277,77,276,77],[277,79,276,79],[278,8,277,12],[279,8,278,12,"specificity"],[279,19,278,23],[279,22,278,26],[279,23,278,27],[280,6,279,8],[280,7,279,9],[280,13,280,13],[280,17,280,17,"platformExtension"],[280,34,280,34],[280,39,280,39,"options"],[280,46,280,46],[280,47,280,47,"platform"],[280,55,280,55],[280,57,280,57],[281,8,281,12],[282,8,282,12],[283,8,283,12,"specificity"],[283,19,283,23],[283,22,283,26],[283,23,283,27],[283,24,283,28],[284,6,284,8],[285,6,285,8],[285,10,285,12,"isApi"],[285,15,285,17],[285,19,285,21,"specificity"],[285,30,285,32],[285,35,285,37],[285,36,285,38],[285,38,285,40],[286,8,286,12],[286,14,286,18],[286,18,286,22,"Error"],[286,23,286,27],[286,24,286,28],[286,87,286,91,"platformExtension"],[286,104,286,108],[286,117,286,121,"key"],[286,120,286,124],[286,123,286,127],[286,124,286,128],[287,6,287,8],[288,6,288,8,"route"],[288,11,288,13],[288,14,288,16,"route"],[288,19,288,21],[288,20,288,22,"replace"],[288,27,288,29],[288,28,288,30],[288,32,288,34,"RegExp"],[288,38,288,40],[288,39,288,41],[288,43,288,45,"platformExtension"],[288,60,288,62],[288,63,288,65],[288,64,288,66],[288,66,288,68],[288,68,288,70],[288,69,288,71],[289,4,289,4],[290,4,290,4],[290,11,290,11],[291,6,291,8,"route"],[291,11,291,13],[292,6,292,8,"specificity"],[292,17,292,19],[293,6,293,8,"isLayout"],[293,14,293,16],[294,6,294,8,"isApi"],[295,4,295,4],[295,5,295,5],[296,2,296,0],[297,2,297,0],[297,11,297,9,"getIgnoreList"],[297,24,297,22,"getIgnoreList"],[297,25,297,23,"options"],[297,32,297,30],[297,34,297,32],[298,4,298,4],[298,8,298,10,"ignore"],[298,14,298,16],[298,17,298,19],[298,18,298,20],[298,41,298,43],[298,43,298,45],[298,47,298,49,"options"],[298,54,298,56],[298,56,298,58,"ignore"],[298,62,298,64],[298,66,298,68],[298,68,298,70],[298,69,298,71],[298,70,298,72],[299,4,299,4],[299,8,299,8,"options"],[299,15,299,15],[299,17,299,17,"preserveApiRoutes"],[299,34,299,34],[299,39,299,39],[299,43,299,43],[299,45,299,45],[300,6,300,8,"ignore"],[300,12,300,14],[300,13,300,15,"push"],[300,17,300,19],[300,18,300,20],[300,35,300,37],[300,36,300,38],[301,4,301,4],[302,4,302,4],[302,11,302,11,"ignore"],[302,17,302,17],[303,2,303,0],[304,2,304,0,"exports"],[304,9,304,7],[304,10,304,8,"getIgnoreList"],[304,23,304,21],[304,26,304,24,"getIgnoreList"],[304,39,304,37],[305,2,305,0],[306,0,306,0],[307,0,307,0],[308,0,308,0],[309,0,309,0],[310,2,310,0],[310,11,310,9,"extrapolateGroups"],[310,28,310,26,"extrapolateGroups"],[310,29,310,27,"key"],[310,32,310,30],[310,34,310,50],[311,4,310,50],[311,8,310,32,"keys"],[311,12,310,36],[311,15,310,36,"arguments"],[311,24,310,36],[311,25,310,36,"length"],[311,31,310,36],[311,39,310,36,"arguments"],[311,48,310,36],[311,56,310,36,"undefined"],[311,65,310,36],[311,68,310,36,"arguments"],[311,77,310,36],[311,83,310,39],[311,87,310,43,"Set"],[311,90,310,46],[311,91,310,47],[311,92,310,48],[312,4,311,4],[312,8,311,10,"match"],[312,13,311,15],[312,16,311,18],[312,17,311,19],[312,18,311,20],[312,20,311,22,"matchers_1"],[312,30,311,32],[312,31,311,33,"matchArrayGroupName"],[312,50,311,52],[312,52,311,54,"key"],[312,55,311,57],[312,56,311,58],[313,4,312,4],[313,8,312,8],[313,9,312,9,"match"],[313,14,312,14],[313,16,312,16],[314,6,313,8,"keys"],[314,10,313,12],[314,11,313,13,"add"],[314,14,313,16],[314,15,313,17,"key"],[314,18,313,20],[314,19,313,21],[315,6,314,8],[315,13,314,15,"keys"],[315,17,314,19],[316,4,315,4],[317,4,316,4],[317,8,316,10,"groups"],[317,14,316,16],[317,17,316,19,"match"],[317,22,316,24],[317,23,316,25,"split"],[317,28,316,30],[317,29,316,31],[317,32,316,34],[317,33,316,35],[318,4,317,4],[318,8,317,10,"groupsSet"],[318,17,317,19],[318,20,317,22],[318,24,317,26,"Set"],[318,27,317,29],[318,28,317,30,"groups"],[318,34,317,36],[318,35,317,37],[319,4,318,4],[319,8,318,8,"groupsSet"],[319,17,318,17],[319,18,318,18,"size"],[319,22,318,22],[319,27,318,27,"groups"],[319,33,318,33],[319,34,318,34,"length"],[319,40,318,40],[319,42,318,42],[320,6,319,8],[320,12,319,14],[320,16,319,18,"Error"],[320,21,319,23],[320,22,319,24],[320,75,319,77,"groups"],[320,81,319,83],[320,90,319,92,"key"],[320,93,319,95],[320,97,319,99],[320,98,319,100],[321,4,320,4],[322,4,321,4],[322,8,321,8,"groups"],[322,14,321,14],[322,15,321,15,"length"],[322,21,321,21],[322,26,321,26],[322,27,321,27],[322,29,321,29],[323,6,322,8,"keys"],[323,10,322,12],[323,11,322,13,"add"],[323,14,322,16],[323,15,322,17,"key"],[323,18,322,20],[323,19,322,21],[324,6,323,8],[324,13,323,15,"keys"],[324,17,323,19],[325,4,324,4],[326,4,325,4],[326,9,325,9],[326,13,325,15,"group"],[326,18,325,20],[326,22,325,24,"groups"],[326,28,325,30],[326,30,325,32],[327,6,326,8,"extrapolateGroups"],[327,23,326,25],[327,24,326,26,"key"],[327,27,326,29],[327,28,326,30,"replace"],[327,35,326,37],[327,36,326,38,"match"],[327,41,326,43],[327,43,326,45,"group"],[327,48,326,50],[327,49,326,51,"trim"],[327,53,326,55],[327,54,326,56],[327,55,326,57],[327,56,326,58],[327,58,326,60,"keys"],[327,62,326,64],[327,63,326,65],[328,4,327,4],[329,4,328,4],[329,11,328,11,"keys"],[329,15,328,15],[330,2,329,0],[331,2,330,0,"exports"],[331,9,330,7],[331,10,330,8,"extrapolateGroups"],[331,27,330,25],[331,30,330,28,"extrapolateGroups"],[331,47,330,45],[332,2,331,0],[332,11,331,9,"generateDynamic"],[332,26,331,24,"generateDynamic"],[332,27,331,25,"path"],[332,31,331,29],[332,33,331,31],[333,4,332,4],[333,8,332,10,"dynamic"],[333,15,332,17],[333,18,332,20,"path"],[333,22,332,24],[333,23,333,9,"split"],[333,28,333,14],[333,29,333,15],[333,32,333,18],[333,33,333,19],[333,34,334,9,"map"],[333,37,334,12],[333,38,334,14,"part"],[333,42,334,18],[333,46,334,23],[334,6,335,8],[334,10,335,12,"part"],[334,14,335,16],[334,19,335,21],[334,31,335,33],[334,33,335,35],[335,8,336,12],[335,15,336,19],[336,10,337,16,"name"],[336,14,337,20],[336,16,337,22],[336,28,337,34],[337,10,338,16,"deep"],[337,14,338,20],[337,16,338,22],[337,20,338,26],[338,10,339,16,"notFound"],[338,18,339,24],[338,20,339,26],[339,8,340,12],[339,9,340,13],[340,6,341,8],[341,6,342,8],[341,10,342,14,"deepDynamicName"],[341,25,342,29],[341,28,342,32],[341,29,342,33],[341,30,342,34],[341,32,342,36,"matchers_1"],[341,42,342,46],[341,43,342,47,"matchDeepDynamicRouteName"],[341,68,342,72],[341,70,342,74,"part"],[341,74,342,78],[341,75,342,79],[342,6,343,8],[342,10,343,14,"dynamicName"],[342,21,343,25],[342,24,343,28,"deepDynamicName"],[342,39,343,43],[342,43,343,47],[342,44,343,48],[342,45,343,49],[342,47,343,51,"matchers_1"],[342,57,343,61],[342,58,343,62,"matchDynamicName"],[342,74,343,78],[342,76,343,80,"part"],[342,80,343,84],[342,81,343,85],[343,6,344,8],[343,10,344,12],[343,11,344,13,"dynamicName"],[343,22,344,24],[343,24,345,12],[343,31,345,19],[343,35,345,23],[344,6,346,8],[344,13,346,15],[345,8,346,17,"name"],[345,12,346,21],[345,14,346,23,"dynamicName"],[345,25,346,34],[346,8,346,36,"deep"],[346,12,346,40],[346,14,346,42],[346,15,346,43],[346,16,346,44,"deepDynamicName"],[347,6,346,60],[347,7,346,61],[348,4,347,4],[348,5,347,5],[348,6,347,6],[348,7,348,9,"filter"],[348,13,348,15],[348,14,348,17,"part"],[348,18,348,21],[348,22,348,26],[348,23,348,27],[348,24,348,28,"part"],[348,28,348,32],[348,29,348,33],[349,4,349,4],[349,11,349,11,"dynamic"],[349,18,349,18],[349,19,349,19,"length"],[349,25,349,25],[349,30,349,30],[349,31,349,31],[349,34,349,34],[349,38,349,38],[349,41,349,41,"dynamic"],[349,48,349,48],[350,2,350,0],[351,2,351,0,"exports"],[351,9,351,7],[351,10,351,8,"generateDynamic"],[351,25,351,23],[351,28,351,26,"generateDynamic"],[351,43,351,41],[352,2,352,0],[352,11,352,9,"appendSitemapRoute"],[352,29,352,27,"appendSitemapRoute"],[352,30,352,28,"directory"],[352,39,352,37],[352,41,352,39,"options"],[352,48,352,46],[352,50,352,48],[353,4,353,4],[353,8,353,8],[353,9,353,9,"directory"],[353,18,353,18],[353,19,353,19,"files"],[353,24,353,24],[353,25,353,25,"has"],[353,28,353,28],[353,29,353,29],[353,39,353,39],[353,40,353,40],[353,44,353,44,"options"],[353,51,353,51],[353,52,353,52,"getSystemRoute"],[353,66,353,66],[353,68,353,68],[354,6,354,8,"directory"],[354,15,354,17],[354,16,354,18,"files"],[354,21,354,23],[354,22,354,24,"set"],[354,25,354,27],[354,26,354,28],[354,36,354,38],[354,38,354,40],[354,39,355,12,"options"],[354,46,355,19],[354,47,355,20,"getSystemRoute"],[354,61,355,34],[354,62,355,35],[355,8,356,16,"type"],[355,12,356,20],[355,14,356,22],[355,21,356,29],[356,8,357,16,"route"],[356,13,357,21],[356,15,357,23],[357,6,358,12],[357,7,358,13],[357,8,358,14],[357,9,359,9],[357,10,359,10],[358,4,360,4],[359,2,361,0],[360,2,362,0],[360,11,362,9,"appendNotFoundRoute"],[360,30,362,28,"appendNotFoundRoute"],[360,31,362,29,"directory"],[360,40,362,38],[360,42,362,40,"options"],[360,49,362,47],[360,51,362,49],[361,4,363,4],[361,8,363,8],[361,9,363,9,"directory"],[361,18,363,18],[361,19,363,19,"files"],[361,24,363,24],[361,25,363,25,"has"],[361,28,363,28],[361,29,363,29],[361,41,363,41],[361,42,363,42],[361,46,363,46,"options"],[361,53,363,53],[361,54,363,54,"getSystemRoute"],[361,68,363,68],[361,70,363,70],[362,6,364,8,"directory"],[362,15,364,17],[362,16,364,18,"files"],[362,21,364,23],[362,22,364,24,"set"],[362,25,364,27],[362,26,364,28],[362,38,364,40],[362,40,364,42],[362,41,365,12,"options"],[362,48,365,19],[362,49,365,20,"getSystemRoute"],[362,63,365,34],[362,64,365,35],[363,8,366,16,"type"],[363,12,366,20],[363,14,366,22],[363,21,366,29],[364,8,367,16,"route"],[364,13,367,21],[364,15,367,23],[365,6,368,12],[365,7,368,13],[365,8,368,14],[365,9,369,9],[365,10,369,10],[366,4,370,4],[367,2,371,0],[368,2,372,0],[368,11,372,9,"getLayoutNode"],[368,24,372,22,"getLayoutNode"],[368,25,372,23,"node"],[368,29,372,27],[368,31,372,29,"options"],[368,38,372,36],[368,40,372,38],[369,4,373,4],[370,0,374,0],[371,0,375,0],[372,0,376,0],[373,4,377,4],[374,4,378,4],[374,8,378,10,"groupName"],[374,17,378,19],[374,20,378,22],[374,21,378,23],[374,22,378,24],[374,24,378,26,"matchers_1"],[374,34,378,36],[374,35,378,37,"matchGroupName"],[374,49,378,51],[374,51,378,53,"node"],[374,55,378,57],[374,56,378,58,"route"],[374,61,378,63],[374,62,378,64],[375,4,379,4],[375,8,379,10,"childMatchingGroup"],[375,26,379,28],[375,29,379,31,"node"],[375,33,379,35],[375,34,379,36,"children"],[375,42,379,44],[375,43,379,45,"find"],[375,47,379,49],[375,48,379,51,"child"],[375,53,379,56],[375,57,379,61],[376,6,380,8],[376,13,380,15,"child"],[376,18,380,20],[376,19,380,21,"route"],[376,24,380,26],[376,25,380,27,"replace"],[376,32,380,34],[376,33,380,35],[376,43,380,45],[376,45,380,47],[376,47,380,49],[376,48,380,50],[376,53,380,55,"groupName"],[376,62,380,64],[377,4,381,4],[377,5,381,5],[377,6,381,6],[378,4,382,4],[378,8,382,8,"initialRouteName"],[378,24,382,24],[378,27,382,27,"childMatchingGroup"],[378,45,382,45],[378,47,382,47,"route"],[378,52,382,52],[379,4,383,4],[379,8,383,10,"loaded"],[379,14,383,16],[379,17,383,19,"node"],[379,21,383,23],[379,22,383,24,"loadRoute"],[379,31,383,33],[379,32,383,34],[379,33,383,35],[380,4,384,4],[380,8,384,8,"loaded"],[380,14,384,14],[380,16,384,16,"unstable_settings"],[380,33,384,33],[380,35,384,35],[381,6,385,8],[382,6,386,8,"initialRouteName"],[382,22,386,24],[382,25,386,27,"loaded"],[382,31,386,33],[382,32,386,34,"unstable_settings"],[382,49,386,51],[382,50,386,52,"initialRouteName"],[382,66,386,68],[382,70,386,72,"initialRouteName"],[382,86,386,88],[383,6,387,8],[383,10,387,12,"groupName"],[383,19,387,21],[383,21,387,23],[384,8,388,12],[385,8,389,12],[385,12,389,18,"groupSpecificInitialRouteName"],[385,41,389,47],[385,44,389,50,"loaded"],[385,50,389,56],[385,51,389,57,"unstable_settings"],[385,68,389,74],[385,71,389,77,"groupName"],[385,80,389,86],[385,81,389,87],[385,83,389,89,"initialRouteName"],[385,99,389,105],[386,8,390,12,"initialRouteName"],[386,24,390,28],[386,27,390,31,"groupSpecificInitialRouteName"],[386,56,390,60],[386,60,390,64,"initialRouteName"],[386,76,390,80],[387,6,391,8],[388,4,392,4],[389,4,393,4],[389,11,393,11],[390,6,394,8],[390,9,394,11,"node"],[390,13,394,15],[391,6,395,8,"route"],[391,11,395,13],[391,13,395,15,"node"],[391,17,395,19],[391,18,395,20,"route"],[391,23,395,25],[391,24,395,26,"replace"],[391,31,395,33],[391,32,395,34],[391,45,395,47],[391,47,395,49],[391,49,395,51],[391,50,395,52],[392,6,396,8,"children"],[392,14,396,16],[392,16,396,18],[392,18,396,20],[393,6,397,8,"initialRouteName"],[394,4,398,4],[394,5,398,5],[395,2,399,0],[396,2,400,0],[396,11,400,9,"crawlAndAppendInitialRoutesAndEntryFiles"],[396,51,400,49,"crawlAndAppendInitialRoutesAndEntryFiles"],[396,52,400,50,"node"],[396,56,400,54],[396,58,400,56,"options"],[396,65,400,63],[396,67,400,83],[397,4,400,83],[397,8,400,65,"entryPoints"],[397,19,400,76],[397,22,400,76,"arguments"],[397,31,400,76],[397,32,400,76,"length"],[397,38,400,76],[397,46,400,76,"arguments"],[397,55,400,76],[397,63,400,76,"undefined"],[397,72,400,76],[397,75,400,76,"arguments"],[397,84,400,76],[397,90,400,79],[397,92,400,81],[398,4,401,4],[398,8,401,8,"node"],[398,12,401,12],[398,13,401,13,"type"],[398,17,401,17],[398,22,401,22],[398,29,401,29],[398,31,401,31],[399,6,402,8,"node"],[399,10,402,12],[399,11,402,13,"entryPoints"],[399,22,402,24],[399,25,402,27],[399,26,402,28],[399,29,402,31],[399,33,402,35,"Set"],[399,36,402,38],[399,37,402,39],[399,38,402,40],[399,41,402,43,"entryPoints"],[399,52,402,54],[399,54,402,56,"node"],[399,58,402,60],[399,59,402,61,"contextKey"],[399,69,402,71],[399,70,402,72],[399,71,402,73],[399,72,402,74],[400,4,403,4],[400,5,403,5],[400,11,404,9],[400,15,404,13,"node"],[400,19,404,17],[400,20,404,18,"type"],[400,24,404,22],[400,29,404,27],[400,37,404,35],[400,39,404,37],[401,6,405,8],[401,10,405,12],[401,11,405,13,"node"],[401,15,405,17],[401,16,405,18,"children"],[401,24,405,26],[401,26,405,28],[402,8,406,12],[402,14,406,18],[402,18,406,22,"Error"],[402,23,406,27],[402,24,406,28],[402,35,406,39,"node"],[402,39,406,43],[402,40,406,44,"contextKey"],[402,50,406,54],[402,87,406,91],[402,88,406,92],[403,6,407,8],[404,6,408,8],[405,6,409,8,"entryPoints"],[405,17,409,19],[405,20,409,22],[405,21,409,23],[405,24,409,26,"entryPoints"],[405,35,409,37],[405,37,409,39,"node"],[405,41,409,43],[405,42,409,44,"contextKey"],[405,52,409,54],[405,53,409,55],[406,6,410,8],[407,0,411,0],[408,0,412,0],[409,0,413,0],[410,0,414,0],[411,0,415,0],[412,6,416,8],[412,10,416,14,"groupName"],[412,19,416,23],[412,22,416,26],[412,23,416,27],[412,24,416,28],[412,26,416,30,"matchers_1"],[412,36,416,40],[412,37,416,41,"matchGroupName"],[412,51,416,55],[412,53,416,57,"node"],[412,57,416,61],[412,58,416,62,"route"],[412,63,416,67],[412,64,416,68],[413,6,417,8],[413,10,417,14,"childMatchingGroup"],[413,28,417,32],[413,31,417,35,"node"],[413,35,417,39],[413,36,417,40,"children"],[413,44,417,48],[413,45,417,49,"find"],[413,49,417,53],[413,50,417,55,"child"],[413,55,417,60],[413,59,417,65],[414,8,418,12],[414,15,418,19,"child"],[414,20,418,24],[414,21,418,25,"route"],[414,26,418,30],[414,27,418,31,"replace"],[414,34,418,38],[414,35,418,39],[414,45,418,49],[414,47,418,51],[414,49,418,53],[414,50,418,54],[414,55,418,59,"groupName"],[414,64,418,68],[415,6,419,8],[415,7,419,9],[415,8,419,10],[416,6,420,8],[416,10,420,12,"initialRouteName"],[416,26,420,28],[416,29,420,31,"childMatchingGroup"],[416,47,420,49],[416,49,420,51,"route"],[416,54,420,56],[417,6,421,8],[418,6,422,8],[418,10,422,12],[418,11,422,13,"options"],[418,18,422,20],[418,19,422,21,"internal_stripLoadRoute"],[418,42,422,44],[418,44,422,46],[419,8,423,12],[419,12,423,18,"loaded"],[419,18,423,24],[419,21,423,27,"node"],[419,25,423,31],[419,26,423,32,"loadRoute"],[419,35,423,41],[419,36,423,42],[419,37,423,43],[420,8,424,12],[420,12,424,16,"loaded"],[420,18,424,22],[420,20,424,24,"unstable_settings"],[420,37,424,41],[420,39,424,43],[421,10,425,16],[422,10,426,16,"initialRouteName"],[422,26,426,32],[422,29,426,35,"loaded"],[422,35,426,41],[422,36,426,42,"unstable_settings"],[422,53,426,59],[422,54,426,60,"initialRouteName"],[422,70,426,76],[422,74,426,80,"initialRouteName"],[422,90,426,96],[423,10,427,16],[423,14,427,20,"groupName"],[423,23,427,29],[423,25,427,31],[424,12,428,20],[425,12,429,20],[425,16,429,26,"groupSpecificInitialRouteName"],[425,45,429,55],[425,48,429,58,"loaded"],[425,54,429,64],[425,55,429,65,"unstable_settings"],[425,72,429,82],[425,75,429,85,"groupName"],[425,84,429,94],[425,85,429,95],[425,87,429,97,"initialRouteName"],[425,103,429,113],[426,12,430,20,"initialRouteName"],[426,28,430,36],[426,31,430,39,"groupSpecificInitialRouteName"],[426,60,430,68],[426,64,430,72,"initialRouteName"],[426,80,430,88],[427,10,431,16],[428,8,432,12],[429,6,433,8],[430,6,434,8],[430,10,434,12,"initialRouteName"],[430,26,434,28],[430,28,434,30],[431,8,435,12],[431,12,435,18,"initialRoute"],[431,24,435,30],[431,27,435,33,"node"],[431,31,435,37],[431,32,435,38,"children"],[431,40,435,46],[431,41,435,47,"find"],[431,45,435,51],[431,46,435,53,"child"],[431,51,435,58],[431,55,435,63,"child"],[431,60,435,68],[431,61,435,69,"route"],[431,66,435,74],[431,71,435,79,"initialRouteName"],[431,87,435,95],[431,88,435,96],[432,8,436,12],[432,12,436,16],[432,13,436,17,"initialRoute"],[432,25,436,29],[432,27,436,31],[433,10,437,16],[433,14,437,22,"validInitialRoutes"],[433,32,437,40],[433,35,437,43,"node"],[433,39,437,47],[433,40,437,48,"children"],[433,48,437,56],[433,49,438,21,"filter"],[433,55,438,27],[433,56,438,29,"child"],[433,61,438,34],[433,65,438,39],[433,66,438,40,"child"],[433,71,438,45],[433,72,438,46,"generated"],[433,81,438,55],[433,82,438,56],[433,83,439,21,"map"],[433,86,439,24],[433,87,439,26,"child"],[433,92,439,31],[433,96,439,36],[433,100,439,40,"child"],[433,105,439,45],[433,106,439,46,"route"],[433,111,439,51],[433,114,439,54],[433,115,439,55],[433,116,440,21,"join"],[433,120,440,25],[433,121,440,26],[433,125,440,30],[433,126,440,31],[434,10,441,16],[434,14,441,20,"groupName"],[434,23,441,29],[434,25,441,31],[435,12,442,20],[435,18,442,26],[435,22,442,30,"Error"],[435,27,442,35],[435,28,442,36],[435,38,442,46,"node"],[435,42,442,50],[435,43,442,51,"contextKey"],[435,53,442,61],[435,87,442,95,"initialRouteName"],[435,103,442,111],[435,120,442,128,"groupName"],[435,129,442,137],[435,155,442,163,"validInitialRoutes"],[435,173,442,181],[435,175,442,183],[435,176,442,184],[436,10,443,16],[436,11,443,17],[436,17,444,21],[437,12,445,20],[437,18,445,26],[437,22,445,30,"Error"],[437,27,445,35],[437,28,445,36],[437,38,445,46,"node"],[437,42,445,50],[437,43,445,51,"contextKey"],[437,53,445,61],[437,87,445,95,"initialRouteName"],[437,103,445,111],[437,128,445,136,"validInitialRoutes"],[437,146,445,154],[437,148,445,156],[437,149,445,157],[438,10,446,16],[439,8,447,12],[440,8,448,12],[441,8,449,12,"node"],[441,12,449,16],[441,13,449,17,"initialRouteName"],[441,29,449,33],[441,32,449,36,"initialRouteName"],[441,48,449,52],[442,8,450,12,"entryPoints"],[442,19,450,23],[442,20,450,24,"push"],[442,24,450,28],[442,25,450,29,"initialRoute"],[442,37,450,41],[442,38,450,42,"contextKey"],[442,48,450,52],[442,49,450,53],[443,6,451,8],[444,6,452,8],[444,11,452,13],[444,15,452,19,"child"],[444,20,452,24],[444,24,452,28,"node"],[444,28,452,32],[444,29,452,33,"children"],[444,37,452,41],[444,39,452,43],[445,8,453,12,"crawlAndAppendInitialRoutesAndEntryFiles"],[445,48,453,52],[445,49,453,53,"child"],[445,54,453,58],[445,56,453,60,"options"],[445,63,453,67],[445,65,453,69,"entryPoints"],[445,76,453,80],[445,77,453,81],[446,6,454,8],[447,4,455,4],[448,2,456,0],[449,2,457,0],[449,11,457,9,"getMostSpecific"],[449,26,457,24,"getMostSpecific"],[449,27,457,25,"routes"],[449,33,457,31],[449,35,457,33],[450,4,458,4],[450,8,458,10,"route"],[450,13,458,15],[450,16,458,18,"routes"],[450,22,458,24],[450,23,458,25,"routes"],[450,29,458,31],[450,30,458,32,"length"],[450,36,458,38],[450,39,458,41],[450,40,458,42],[450,41,458,43],[451,4,459,4],[451,8,459,8],[451,9,459,9,"routes"],[451,15,459,15],[451,16,459,16],[451,17,459,17],[451,18,459,18],[451,20,459,20],[452,6,460,8],[452,12,460,14],[452,16,460,18,"Error"],[452,21,460,23],[452,22,460,24],[452,34,460,36,"route"],[452,39,460,41],[452,40,460,42,"contextKey"],[452,50,460,52],[452,120,460,122],[452,121,460,123],[453,4,461,4],[454,4,462,4],[455,4,463,4],[456,4,464,4],[456,11,464,11,"routes"],[456,17,464,17],[456,18,464,18,"routes"],[456,24,464,24],[456,25,464,25,"length"],[456,31,464,31],[456,34,464,34],[456,35,464,35],[456,36,464,36],[457,2,465,0],[458,0,465,1],[458,3]],"functionMap":{"names":["<global>","getRoutes","getDirectoryTree","ignoreList.some$argument_0","node.loadRoute","flattenDirectoryTreeToRoutes","getFileMeta","getIgnoreList","extrapolateGroups","generateDynamic","path.split.map$argument_0","path.split.map.filter$argument_0","appendSitemapRoute","appendNotFoundRoute","getLayoutNode","node.children.find$argument_0","crawlAndAppendInitialRoutesAndEntryFiles","node.children.filter$argument_0","node.children.filter.map$argument_0","getMostSpecific"],"mappings":"AAA;ACiB;CDW;AEK;4BCgB,+BD;YEW;aFY;CFyH;AKI;CL2C;AMC;CNsD;AOC;CPM;AQO;CRmB;ASE;aCG;KDa;gBEC,gBF;CTE;AYE;CZS;AaC;CbS;AcC;kDCO;KDE;CdkB;AgBC;sDDiB;SCE;oDDgB,2CC;4BCG,2BD;yBEC,6BF;ChBiB;AmBC;CnBQ"},"hasCjsExports":true},"type":"js/module"}]}