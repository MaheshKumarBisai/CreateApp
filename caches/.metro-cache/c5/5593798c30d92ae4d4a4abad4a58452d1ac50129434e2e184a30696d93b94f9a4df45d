{"dependencies":[{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":101},"end":{"line":6,"column":42,"index":143}}],"key":"Opxn8Ttfh7QNGeF0y+BQ6rRbDGo=","exportNames":["*"],"imports":1}},{"name":"query-string","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":144},"end":{"line":7,"column":44,"index":188}}],"key":"Tk6zkk+/XfK89igjx1MNWAcG1Q8=","exportNames":["*"],"imports":1}},{"name":"./findFocusedRoute","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":190},"end":{"line":9,"column":50,"index":240}}],"key":"GR9ptsM4REoG7PUqUgvbv67dTUE=","exportNames":["*"],"imports":1}},{"name":"./validatePathConfig","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":287},"end":{"line":11,"column":54,"index":341}}],"key":"lNCZoFG+bPfLLls7jfDHI8FLnUk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return getStateFromPath;\n    }\n  });\n  var _escapeStringRegexp = require(_dependencyMap[0], \"escape-string-regexp\");\n  var escape = _interopDefault(_escapeStringRegexp);\n  var _queryString = require(_dependencyMap[1], \"query-string\");\n  var queryString = _interopNamespace(_queryString);\n  var _findFocusedRoute = require(_dependencyMap[2], \"./findFocusedRoute\");\n  var findFocusedRoute = _interopDefault(_findFocusedRoute);\n  var _validatePathConfig = require(_dependencyMap[3], \"./validatePathConfig\");\n  var validatePathConfig = _interopDefault(_validatePathConfig);\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    if (options) {\n      (0, validatePathConfig.default)(options);\n    }\n    var initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    var screens = options?.screens;\n    var remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(segment => {\n        var name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(path, _routes, initialRoutes);\n      }\n      return undefined;\n    }\n\n    // Create a normalized configs array which will be easier to use\n    var configs = [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n      var aParts = a.pattern.split('/');\n      var bParts = b.pattern.split('/');\n      for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        var aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        var bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      if (acc[config.pattern]) {\n        var a = acc[config.pattern].routeNames;\n        var b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [config.pattern]: config\n      });\n    }, {});\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      var match = configs.find(config => config.path === '' && config.routeNames.every(\n      // Make sure that none of the parent configs have a non-empty path defined\n      name => !configs.find(c => c.screen === name)?.path));\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(c => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      }))),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  var matchAgainstConfigs = (remaining, configs) => {\n    var routes;\n    var remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function (config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          var matchResult = config.pattern?.split('/').reduce((acc, p, index) => {\n            if (!p.startsWith(':')) {\n              return acc;\n            }\n\n            // Path parameter so increment position for the segment\n            acc.pos += 1;\n            var decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match[(acc.pos + 1) * 2]\n            // Remove trailing slash\n            .replace(/\\/$/, ''));\n            Object.assign(acc.matchedParams, {\n              [p]: Object.assign(acc.matchedParams[p] || {}, {\n                [index]: decodedParamSegment\n              })\n            });\n            return acc;\n          }, {\n            pos: -1,\n            matchedParams: {}\n          });\n          var matchedParams = matchResult.matchedParams || {};\n          routes = config.routeNames.map(name => {\n            var routeConfig = configs.find(c => {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === name && config.pattern.startsWith(c.pattern);\n            });\n\n            // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n            var normalizedPath = routeConfig?.path.split('/').filter(Boolean).join('/');\n\n            // Get the number of segments in the initial pattern\n            var numInitialSegments = routeConfig?.pattern\n            // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n            .replace(new RegExp(`${(0, escape.default)(normalizedPath)}$`), '')?.split('/').length;\n            var params = normalizedPath?.split('/').reduce((acc, p, index) => {\n              if (!p.startsWith(':')) {\n                return acc;\n              }\n\n              // Get the real index of the path parameter in the matched path\n              // by offsetting by the number of segments in the initial pattern\n              var offset = numInitialSegments ? numInitialSegments - 1 : 0;\n              var value = matchedParams[p]?.[index + offset];\n              if (value) {\n                var key = p.replace(/^:/, '').replace(/\\?$/, '');\n                acc[key] = routeConfig?.parse?.[key] ? routeConfig.parse[key](value) : value;\n              }\n              return acc;\n            }, {});\n            if (params && Object.keys(params).length) {\n              return {\n                name,\n                params\n              };\n            }\n            return {\n              name\n            };\n          });\n          remainingPath = remainingPath.replace(match[1], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  var createNormalizedConfigs = function (screen, routeConfig) {\n    var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var initials = arguments.length > 3 ? arguments[3] : undefined;\n    var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n    var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n\n    // @ts-expect-error: we can't strongly typecheck this for now\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      var _pattern;\n\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse));\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], _pattern ?? parentPattern);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = (screen, routeNames, pattern, path, parse) => {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    var regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n      if (it.startsWith(':')) {\n        return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n      }\n      return `${it === '*' ? '.*' : (0, escape.default)(it)}\\\\/`;\n    }).join('')})`) : undefined;\n    return {\n      screen,\n      regex,\n      pattern,\n      path,\n      // The routeNames array is mutated, so copy it to keep the current state\n      routeNames: [...routeNames],\n      parse\n    };\n  };\n  var findParseConfigForRoute = (routeName, flatConfig) => {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n    var state;\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, findFocusedRoute.default)(state);\n    route.path = path;\n    var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    return state;\n  };\n  var parseQueryParams = (path, parseConfig) => {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(name => {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":466,"map":[[27,2,65,15,"Object"],[27,8,65,15],[27,9,65,15,"defineProperty"],[27,23,65,15],[27,24,65,15,"exports"],[27,31,65,15],[28,4,65,15,"enumerable"],[28,14,65,15],[29,4,65,15,"get"],[29,7,65,15],[29,18,65,15,"get"],[29,19,65,15],[30,6,65,15],[30,13,65,15,"getStateFromPath"],[30,29,65,15],[31,4,65,15],[32,2,65,15],[33,2,6,0],[33,6,6,0,"_escapeStringRegexp"],[33,25,6,0],[33,28,6,0,"require"],[33,35,6,0],[33,36,6,0,"_dependencyMap"],[33,50,6,0],[34,2,6,0],[34,6,6,0,"escape"],[34,12,6,0],[34,15,6,0,"_interopDefault"],[34,30,6,0],[34,31,6,0,"_escapeStringRegexp"],[34,50,6,0],[35,2,7,0],[35,6,7,0,"_queryString"],[35,18,7,0],[35,21,7,0,"require"],[35,28,7,0],[35,29,7,0,"_dependencyMap"],[35,43,7,0],[36,2,7,0],[36,6,7,0,"queryString"],[36,17,7,0],[36,20,7,0,"_interopNamespace"],[36,37,7,0],[36,38,7,0,"_queryString"],[36,50,7,0],[37,2,9,0],[37,6,9,0,"_findFocusedRoute"],[37,23,9,0],[37,26,9,0,"require"],[37,33,9,0],[37,34,9,0,"_dependencyMap"],[37,48,9,0],[38,2,9,0],[38,6,9,0,"findFocusedRoute"],[38,22,9,0],[38,25,9,0,"_interopDefault"],[38,40,9,0],[38,41,9,0,"_findFocusedRoute"],[38,58,9,0],[39,2,11,0],[39,6,11,0,"_validatePathConfig"],[39,25,11,0],[39,28,11,0,"require"],[39,35,11,0],[39,36,11,0,"_dependencyMap"],[39,50,11,0],[40,2,11,0],[40,6,11,0,"validatePathConfig"],[40,24,11,0],[40,27,11,0,"_interopDefault"],[40,42,11,0],[40,43,11,0,"_validatePathConfig"],[40,62,11,0],[41,2,44,0],[42,0,45,0],[43,0,46,0],[44,0,47,0],[45,0,48,0],[46,0,49,0],[47,0,50,0],[48,0,51,0],[49,0,52,0],[50,0,53,0],[51,0,54,0],[52,0,55,0],[53,0,56,0],[54,0,57,0],[55,0,58,0],[56,0,59,0],[57,0,60,0],[58,0,61,0],[59,0,62,0],[60,0,63,0],[61,0,64,0],[62,2,65,15],[62,11,65,24,"getStateFromPath"],[62,27,65,40,"getStateFromPath"],[62,28,66,2,"path"],[62,32,66,14],[62,34,67,2,"options"],[62,41,67,30],[62,43,68,27],[63,4,69,2],[63,8,69,6,"options"],[63,15,69,13],[63,17,69,15],[64,6,70,4],[64,10,70,4,"validatePathConfig"],[64,28,70,22],[64,29,70,22,"default"],[64,36,70,22],[64,38,70,23,"options"],[64,45,70,30],[64,46,70,31],[65,4,71,2],[66,4,73,2],[66,8,73,6,"initialRoutes"],[66,21,73,41],[66,24,73,44],[66,26,73,46],[67,4,75,2],[67,8,75,6,"options"],[67,15,75,13],[67,17,75,15,"initialRouteName"],[67,33,75,31],[67,35,75,33],[68,6,76,4,"initialRoutes"],[68,19,76,17],[68,20,76,18,"push"],[68,24,76,22],[68,25,76,23],[69,8,77,6,"initialRouteName"],[69,24,77,22],[69,26,77,24,"options"],[69,33,77,31],[69,34,77,32,"initialRouteName"],[69,50,77,48],[70,8,78,6,"parentScreens"],[70,21,78,19],[70,23,78,21],[71,6,79,4],[71,7,79,5],[71,8,79,6],[72,4,80,2],[73,4,82,2],[73,8,82,8,"screens"],[73,15,82,15],[73,18,82,18,"options"],[73,25,82,25],[73,27,82,27,"screens"],[73,34,82,34],[74,4,84,2],[74,8,84,6,"remaining"],[74,17,84,15],[74,20,84,18,"path"],[74,24,84,22],[74,25,85,5,"replace"],[74,32,85,12],[74,33,85,13],[74,39,85,19],[74,41,85,21],[74,44,85,24],[74,45,85,25],[74,46,85,26],[75,4,85,26],[75,5,86,5,"replace"],[75,12,86,12],[75,13,86,13],[75,18,86,18],[75,20,86,20],[75,22,86,22],[75,23,86,23],[75,24,86,24],[76,4,86,24],[76,5,87,5,"replace"],[76,12,87,12],[76,13,87,13],[76,20,87,20],[76,22,87,22],[76,24,87,24],[76,25,87,25],[76,26,87,26],[76,27,87,27],[78,4,89,2],[79,4,90,2,"remaining"],[79,13,90,11],[79,16,90,14,"remaining"],[79,25,90,23],[79,26,90,24,"endsWith"],[79,34,90,32],[79,35,90,33],[79,38,90,36],[79,39,90,37],[79,42,90,40,"remaining"],[79,51,90,49],[79,54,90,52],[79,57,90,55,"remaining"],[79,66,90,64],[79,69,90,67],[80,4,92,2],[80,8,92,6,"screens"],[80,15,92,13],[80,20,92,18,"undefined"],[80,29,92,27],[80,31,92,29],[81,6,93,4],[82,6,94,4],[82,10,94,10,"routes"],[82,17,94,16],[82,20,94,19,"remaining"],[82,29,94,28],[82,30,95,7,"split"],[82,35,95,12],[82,36,95,13],[82,39,95,16],[82,40,95,17],[82,41,96,7,"filter"],[82,47,96,13],[82,48,96,14,"Boolean"],[82,55,96,21],[82,56,96,22],[82,57,97,7,"map"],[82,60,97,10],[82,61,97,12,"segment"],[82,68,97,19],[82,72,97,24],[83,8,98,8],[83,12,98,14,"name"],[83,16,98,18],[83,19,98,21,"decodeURIComponent"],[83,37,98,39],[83,38,98,40,"segment"],[83,45,98,47],[83,46,98,48],[84,8,99,8],[84,15,99,15],[85,10,99,17,"name"],[86,8,99,22],[86,9,99,23],[87,6,100,6],[87,7,100,7],[87,8,100,8],[88,6,102,4],[88,10,102,8,"routes"],[88,17,102,14],[88,18,102,15,"length"],[88,24,102,21],[88,26,102,23],[89,8,103,6],[89,15,103,13,"createNestedStateObject"],[89,38,103,36],[89,39,103,37,"path"],[89,43,103,41],[89,45,103,43,"routes"],[89,52,103,49],[89,54,103,51,"initialRoutes"],[89,67,103,64],[89,68,103,65],[90,6,104,4],[91,6,106,4],[91,13,106,11,"undefined"],[91,22,106,20],[92,4,107,2],[94,4,109,2],[95,4,110,2],[95,8,110,8,"configs"],[95,15,110,15],[95,18,110,19],[95,20,110,21],[95,21,111,5,"concat"],[95,27,111,11],[95,28,112,6],[95,31,112,9,"Object"],[95,37,112,15],[95,38,112,16,"keys"],[95,42,112,20],[95,43,112,21,"screens"],[95,50,112,28],[95,51,112,29],[95,52,112,30,"map"],[95,55,112,33],[95,56,112,35,"key"],[95,59,112,38],[95,63,113,8,"createNormalizedConfigs"],[95,86,113,31],[95,87,114,10,"key"],[95,90,114,13],[95,92,115,10,"screens"],[95,99,115,17],[95,101,116,10],[95,103,116,12],[95,105,117,10,"initialRoutes"],[95,118,117,23],[95,120,118,10],[95,122,119,8],[95,123,120,6],[95,124,121,4],[95,125,121,5],[95,126,122,5,"sort"],[95,130,122,9],[95,131,122,10],[95,132,122,11,"a"],[95,133,122,12],[95,135,122,14,"b"],[95,136,122,15],[95,141,122,20],[96,6,123,6],[97,6,124,6],[98,6,125,6],[100,6,127,6],[101,6,128,6],[102,6,129,6],[102,10,129,10,"a"],[102,11,129,11],[102,12,129,12,"pattern"],[102,19,129,19],[102,24,129,24,"b"],[102,25,129,25],[102,26,129,26,"pattern"],[102,33,129,33],[102,35,129,35],[103,8,130,8],[103,15,130,15,"b"],[103,16,130,16],[103,17,130,17,"routeNames"],[103,27,130,27],[103,28,130,28,"join"],[103,32,130,32],[103,33,130,33],[103,36,130,36],[103,37,130,37],[103,38,130,38,"localeCompare"],[103,51,130,51],[103,52,130,52,"a"],[103,53,130,53],[103,54,130,54,"routeNames"],[103,64,130,64],[103,65,130,65,"join"],[103,69,130,69],[103,70,130,70],[103,73,130,73],[103,74,130,74],[103,75,130,75],[104,6,131,6],[106,6,133,6],[107,6,134,6],[108,6,135,6],[108,10,135,10,"a"],[108,11,135,11],[108,12,135,12,"pattern"],[108,19,135,19],[108,20,135,20,"startsWith"],[108,30,135,30],[108,31,135,31,"b"],[108,32,135,32],[108,33,135,33,"pattern"],[108,40,135,40],[108,41,135,41],[108,43,135,43],[109,8,136,8],[109,15,136,15],[109,16,136,16],[109,17,136,17],[110,6,137,6],[111,6,139,6],[111,10,139,10,"b"],[111,11,139,11],[111,12,139,12,"pattern"],[111,19,139,19],[111,20,139,20,"startsWith"],[111,30,139,30],[111,31,139,31,"a"],[111,32,139,32],[111,33,139,33,"pattern"],[111,40,139,40],[111,41,139,41],[111,43,139,43],[112,8,140,8],[112,15,140,15],[112,16,140,16],[113,6,141,6],[114,6,143,6],[114,10,143,12,"aParts"],[114,16,143,18],[114,19,143,21,"a"],[114,20,143,22],[114,21,143,23,"pattern"],[114,28,143,30],[114,29,143,31,"split"],[114,34,143,36],[114,35,143,37],[114,38,143,40],[114,39,143,41],[115,6,144,6],[115,10,144,12,"bParts"],[115,16,144,18],[115,19,144,21,"b"],[115,20,144,22],[115,21,144,23,"pattern"],[115,28,144,30],[115,29,144,31,"split"],[115,34,144,36],[115,35,144,37],[115,38,144,40],[115,39,144,41],[116,6,146,6],[116,11,146,11],[116,15,146,15,"i"],[116,16,146,16],[116,19,146,19],[116,20,146,20],[116,22,146,22,"i"],[116,23,146,23],[116,26,146,26,"Math"],[116,30,146,30],[116,31,146,31,"max"],[116,34,146,34],[116,35,146,35,"aParts"],[116,41,146,41],[116,42,146,42,"length"],[116,48,146,48],[116,50,146,50,"bParts"],[116,56,146,56],[116,57,146,57,"length"],[116,63,146,63],[116,64,146,64],[116,66,146,66,"i"],[116,67,146,67],[116,69,146,69],[116,71,146,71],[117,8,147,8],[118,8,148,8],[118,12,148,12,"aParts"],[118,18,148,18],[118,19,148,19,"i"],[118,20,148,20],[118,21,148,21],[118,25,148,25],[118,29,148,29],[118,31,148,31],[119,10,149,10],[119,17,149,17],[119,18,149,18],[120,8,150,8],[121,8,151,8],[122,8,152,8],[122,12,152,12,"bParts"],[122,18,152,18],[122,19,152,19,"i"],[122,20,152,20],[122,21,152,21],[122,25,152,25],[122,29,152,29],[122,31,152,31],[123,10,153,10],[123,17,153,17],[123,18,153,18],[123,19,153,19],[124,8,154,8],[125,8,155,8],[125,12,155,14,"aWildCard"],[125,21,155,23],[125,24,155,26,"aParts"],[125,30,155,32],[125,31,155,33,"i"],[125,32,155,34],[125,33,155,35],[125,38,155,40],[125,41,155,43],[125,45,155,47,"aParts"],[125,51,155,53],[125,52,155,54,"i"],[125,53,155,55],[125,54,155,56],[125,55,155,57,"startsWith"],[125,65,155,67],[125,66,155,68],[125,69,155,71],[125,70,155,72],[126,8,156,8],[126,12,156,14,"bWildCard"],[126,21,156,23],[126,24,156,26,"bParts"],[126,30,156,32],[126,31,156,33,"i"],[126,32,156,34],[126,33,156,35],[126,38,156,40],[126,41,156,43],[126,45,156,47,"bParts"],[126,51,156,53],[126,52,156,54,"i"],[126,53,156,55],[126,54,156,56],[126,55,156,57,"startsWith"],[126,65,156,67],[126,66,156,68],[126,69,156,71],[126,70,156,72],[127,8,157,8],[128,8,158,8],[128,12,158,12,"aWildCard"],[128,21,158,21],[128,25,158,25,"bWildCard"],[128,34,158,34],[128,36,158,36],[129,10,159,10],[130,8,160,8],[131,8,161,8],[132,8,162,8],[132,12,162,12,"aWildCard"],[132,21,162,21],[132,23,162,23],[133,10,163,10],[133,17,163,17],[133,18,163,18],[134,8,164,8],[135,8,165,8],[136,8,166,8],[136,12,166,12,"bWildCard"],[136,21,166,21],[136,23,166,23],[137,10,167,10],[137,17,167,17],[137,18,167,18],[137,19,167,19],[138,8,168,8],[139,6,169,6],[140,6,170,6],[140,13,170,13,"bParts"],[140,19,170,19],[140,20,170,20,"length"],[140,26,170,26],[140,29,170,29,"aParts"],[140,35,170,35],[140,36,170,36,"length"],[140,42,170,42],[141,4,171,4],[141,5,171,5],[141,6,171,6],[143,4,173,2],[144,4,174,2,"configs"],[144,11,174,9],[144,12,174,10,"reduce"],[144,18,174,16],[144,19,174,46],[144,20,174,47,"acc"],[144,23,174,50],[144,25,174,52,"config"],[144,31,174,58],[144,36,174,63],[145,6,175,4],[145,10,175,8,"acc"],[145,13,175,11],[145,14,175,12,"config"],[145,20,175,18],[145,21,175,19,"pattern"],[145,28,175,26],[145,29,175,27],[145,31,175,29],[146,8,176,6],[146,12,176,12,"a"],[146,13,176,13],[146,16,176,16,"acc"],[146,19,176,19],[146,20,176,20,"config"],[146,26,176,26],[146,27,176,27,"pattern"],[146,34,176,34],[146,35,176,35],[146,36,176,36,"routeNames"],[146,46,176,46],[147,8,177,6],[147,12,177,12,"b"],[147,13,177,13],[147,16,177,16,"config"],[147,22,177,22],[147,23,177,23,"routeNames"],[147,33,177,33],[149,8,179,6],[150,8,180,6],[151,8,181,6],[151,12,181,12,"intersects"],[151,22,181,22],[151,25,182,8,"a"],[151,26,182,9],[151,27,182,10,"length"],[151,33,182,16],[151,36,182,19,"b"],[151,37,182,20],[151,38,182,21,"length"],[151,44,182,27],[151,47,183,12,"b"],[151,48,183,13],[151,49,183,14,"every"],[151,54,183,19],[151,55,183,20],[151,56,183,21,"it"],[151,58,183,23],[151,60,183,25,"i"],[151,61,183,26],[151,66,183,31,"a"],[151,67,183,32],[151,68,183,33,"i"],[151,69,183,34],[151,70,183,35],[151,75,183,40,"it"],[151,77,183,42],[151,78,183,43],[151,81,184,12,"a"],[151,82,184,13],[151,83,184,14,"every"],[151,88,184,19],[151,89,184,20],[151,90,184,21,"it"],[151,92,184,23],[151,94,184,25,"i"],[151,95,184,26],[151,100,184,31,"b"],[151,101,184,32],[151,102,184,33,"i"],[151,103,184,34],[151,104,184,35],[151,109,184,40,"it"],[151,111,184,42],[151,112,184,43],[152,8,186,6],[152,12,186,10],[152,13,186,11,"intersects"],[152,23,186,21],[152,25,186,23],[153,10,187,8],[153,16,187,14],[153,20,187,18,"Error"],[153,25,187,23],[153,26,188,10],[153,91,189,12,"config"],[153,97,189,18],[153,98,189,19,"pattern"],[153,105,189,26],[153,128,190,33,"a"],[153,129,190,34],[153,130,190,35,"join"],[153,134,190,39],[153,135,190,40],[153,140,190,45],[153,141,190,46],[153,151,190,56,"b"],[153,152,190,57],[153,153,190,58,"join"],[153,157,190,62],[153,158,191,12],[153,163,192,10],[153,164,192,11],[153,236,193,8],[153,237,193,9],[154,8,194,6],[155,6,195,4],[156,6,197,4],[156,13,197,11,"Object"],[156,19,197,17],[156,20,197,18,"assign"],[156,26,197,24],[156,27,197,25,"acc"],[156,30,197,28],[156,32,197,30],[157,8,198,6],[157,9,198,7,"config"],[157,15,198,13],[157,16,198,14,"pattern"],[157,23,198,21],[157,26,198,24,"config"],[158,6,199,4],[158,7,199,5],[158,8,199,6],[159,4,200,2],[159,5,200,3],[159,7,200,5],[159,8,200,6],[159,9,200,7],[159,10,200,8],[160,4,202,2],[160,8,202,6,"remaining"],[160,17,202,15],[160,22,202,20],[160,25,202,23],[160,27,202,25],[161,6,203,4],[162,6,204,4],[163,6,205,4],[163,10,205,10,"match"],[163,15,205,15],[163,18,205,18,"configs"],[163,25,205,25],[163,26,205,26,"find"],[163,30,205,30],[163,31,206,7,"config"],[163,37,206,13],[163,41,207,8,"config"],[163,47,207,14],[163,48,207,15,"path"],[163,52,207,19],[163,57,207,24],[163,59,207,26],[163,63,208,8,"config"],[163,69,208,14],[163,70,208,15,"routeNames"],[163,80,208,25],[163,81,208,26,"every"],[163,86,208,31],[164,6,209,10],[165,6,210,11,"name"],[165,10,210,15],[165,14,210,20],[165,15,210,21,"configs"],[165,22,210,28],[165,23,210,29,"find"],[165,27,210,33],[165,28,210,35,"c"],[165,29,210,36],[165,33,210,41,"c"],[165,34,210,42],[165,35,210,43,"screen"],[165,41,210,49],[165,46,210,54,"name"],[165,50,210,58],[165,51,210,59],[165,53,210,61,"path"],[165,57,211,8],[165,58,212,4],[165,59,212,5],[166,6,214,4],[166,10,214,8,"match"],[166,15,214,13],[166,17,214,15],[167,8,215,6],[167,15,215,13,"createNestedStateObject"],[167,38,215,36],[167,39,216,8,"path"],[167,43,216,12],[167,45,217,8,"match"],[167,50,217,13],[167,51,217,14,"routeNames"],[167,61,217,24],[167,62,217,25,"map"],[167,65,217,28],[167,66,217,30,"name"],[167,70,217,34],[167,75,217,40],[168,10,217,42,"name"],[169,8,217,47],[169,9,217,48],[169,10,217,49],[169,11,217,50],[169,13,218,8,"initialRoutes"],[169,26,218,21],[169,28,219,8,"configs"],[169,35,220,6],[169,36,220,7],[170,6,221,4],[171,6,223,4],[171,13,223,11,"undefined"],[171,22,223,20],[172,4,224,2],[173,4,226,2],[173,8,226,6,"result"],[173,14,226,55],[174,4,227,2],[174,8,227,6,"current"],[174,15,227,56],[176,4,229,2],[177,4,230,2],[178,4,231,2],[178,8,231,2,"_matchAgainstConfigs"],[178,28,231,2],[178,31,231,36,"matchAgainstConfigs"],[178,50,231,55],[178,51,232,4,"remaining"],[178,60,232,13],[178,62,233,4,"configs"],[178,69,233,11],[178,70,233,12,"map"],[178,73,233,15],[178,74,233,17,"c"],[178,75,233,18],[178,80,233,24],[179,8,234,6],[179,11,234,9,"c"],[179,12,234,10],[180,8,235,6],[181,8,236,6,"regex"],[181,13,236,11],[181,15,236,13,"c"],[181,16,236,14],[181,17,236,15,"regex"],[181,22,236,20],[181,25,236,23],[181,29,236,27,"RegExp"],[181,35,236,33],[181,36,236,34,"c"],[181,37,236,35],[181,38,236,36,"regex"],[181,43,236,41],[181,44,236,42,"source"],[181,50,236,48],[181,53,236,51],[181,56,236,54],[181,57,236,55],[181,60,236,58,"undefined"],[182,6,237,4],[182,7,237,5],[182,8,237,6],[182,9,238,2],[182,10,238,3],[183,6,231,10,"routes"],[183,12,231,16],[183,15,231,16,"_matchAgainstConfigs"],[183,35,231,16],[183,36,231,10,"routes"],[183,42,231,16],[184,6,231,18,"remainingPath"],[184,19,231,31],[184,22,231,31,"_matchAgainstConfigs"],[184,42,231,31],[184,43,231,18,"remainingPath"],[184,56,231,31],[185,4,240,2],[185,8,240,6,"routes"],[185,14,240,12],[185,19,240,17,"undefined"],[185,28,240,26],[185,30,240,28],[186,6,241,4],[187,6,242,4,"current"],[187,13,242,11],[187,16,242,14,"createNestedStateObject"],[187,39,242,37],[187,40,242,38,"path"],[187,44,242,42],[187,46,242,44,"routes"],[187,52,242,50],[187,54,242,52,"initialRoutes"],[187,67,242,65],[187,69,242,67,"configs"],[187,76,242,74],[187,77,242,75],[188,6,243,4,"remaining"],[188,15,243,13],[188,18,243,16,"remainingPath"],[188,31,243,29],[189,6,244,4,"result"],[189,12,244,10],[189,15,244,13,"current"],[189,22,244,20],[190,4,245,2],[191,4,247,2],[191,8,247,6,"current"],[191,15,247,13],[191,19,247,17],[191,23,247,21],[191,27,247,25,"result"],[191,33,247,31],[191,37,247,35],[191,41,247,39],[191,43,247,41],[192,6,248,4],[192,13,248,11,"undefined"],[192,22,248,20],[193,4,249,2],[194,4,251,2],[194,11,251,9,"result"],[194,17,251,15],[195,2,252,0],[196,2,254,0],[196,6,254,6,"joinPaths"],[196,15,254,15],[196,18,254,18],[196,27,254,18,"joinPaths"],[196,28,254,18],[197,4,254,18],[197,13,254,18,"_len"],[197,17,254,18],[197,20,254,18,"arguments"],[197,29,254,18],[197,30,254,18,"length"],[197,36,254,18],[197,38,254,22,"paths"],[197,43,254,27],[197,50,254,27,"Array"],[197,55,254,27],[197,56,254,27,"_len"],[197,60,254,27],[197,63,254,27,"_key"],[197,67,254,27],[197,73,254,27,"_key"],[197,77,254,27],[197,80,254,27,"_len"],[197,84,254,27],[197,86,254,27,"_key"],[197,90,254,27],[198,6,254,22,"paths"],[198,11,254,27],[198,12,254,27,"_key"],[198,16,254,27],[198,20,254,27,"arguments"],[198,29,254,27],[198,30,254,27,"_key"],[198,34,254,27],[199,4,254,27],[200,4,254,27],[200,11,255,3],[200,13,255,5],[200,14,256,5,"concat"],[200,20,256,11],[200,21,256,12],[200,24,256,15,"paths"],[200,29,256,20],[200,30,256,21,"map"],[200,33,256,24],[200,34,256,26,"p"],[200,35,256,27],[200,39,256,32,"p"],[200,40,256,33],[200,41,256,34,"split"],[200,46,256,39],[200,47,256,40],[200,50,256,43],[200,51,256,44],[200,52,256,45],[200,53,256,46],[200,54,257,5,"filter"],[200,60,257,11],[200,61,257,12,"Boolean"],[200,68,257,19],[200,69,257,20],[200,70,258,5,"join"],[200,74,258,9],[200,75,258,10],[200,78,258,13],[200,79,258,14],[201,2,258,14],[202,2,260,0],[202,6,260,6,"matchAgainstConfigs"],[202,25,260,25],[202,28,260,28,"matchAgainstConfigs"],[202,29,260,29,"remaining"],[202,38,260,46],[202,40,260,48,"configs"],[202,47,260,70],[202,52,260,75],[203,4,261,2],[203,8,261,6,"routes"],[203,14,261,39],[204,4,262,2],[204,8,262,6,"remainingPath"],[204,21,262,19],[204,24,262,22,"remaining"],[204,33,262,31],[206,4,264,2],[207,4,264,2],[207,8,264,2,"_loop"],[207,13,264,2],[207,25,264,2,"_loop"],[207,26,264,2,"config"],[207,32,264,2],[207,34,265,32],[208,8,266,4],[208,12,266,8],[208,13,266,9,"config"],[208,19,266,15],[208,20,266,16,"regex"],[208,25,266,21],[208,27,266,23],[209,10,266,23],[210,8,268,4],[211,8,270,4],[211,12,270,10,"match"],[211,17,270,15],[211,20,270,18,"remainingPath"],[211,33,270,31],[211,34,270,32,"match"],[211,39,270,37],[211,40,270,38,"config"],[211,46,270,44],[211,47,270,45,"regex"],[211,52,270,50],[211,53,270,51],[213,8,272,4],[214,8,273,4],[214,12,273,8,"match"],[214,17,273,13],[214,19,273,15],[215,10,274,6],[215,14,274,12,"matchResult"],[215,25,274,23],[215,28,274,26,"config"],[215,34,274,32],[215,35,274,33,"pattern"],[215,42,274,40],[215,44,274,42,"split"],[215,49,274,47],[215,50,274,48],[215,53,274,51],[215,54,274,52],[215,55,274,53,"reduce"],[215,61,274,59],[215,62,278,8],[215,63,278,9,"acc"],[215,66,278,12],[215,68,278,14,"p"],[215,69,278,15],[215,71,278,17,"index"],[215,76,278,22],[215,81,278,27],[216,12,279,10],[216,16,279,14],[216,17,279,15,"p"],[216,18,279,16],[216,19,279,17,"startsWith"],[216,29,279,27],[216,30,279,28],[216,33,279,31],[216,34,279,32],[216,36,279,34],[217,14,280,12],[217,21,280,19,"acc"],[217,24,280,22],[218,12,281,10],[220,12,283,10],[221,12,284,10,"acc"],[221,15,284,13],[221,16,284,14,"pos"],[221,19,284,17],[221,23,284,21],[221,24,284,22],[222,12,286,10],[222,16,286,16,"decodedParamSegment"],[222,35,286,35],[222,38,286,38,"decodeURIComponent"],[222,56,286,56],[223,12,287,12],[224,12,288,12,"match"],[224,17,288,17],[224,18,288,19],[224,19,288,20,"acc"],[224,22,288,23],[224,23,288,24,"pos"],[224,26,288,27],[224,29,288,30],[224,30,288,31],[224,34,288,35],[224,35,288,36],[225,12,289,14],[226,12,289,14],[226,13,290,15,"replace"],[226,20,290,22],[226,21,290,23],[226,26,290,28],[226,28,290,30],[226,30,290,32],[226,31,291,10],[226,32,291,11],[227,12,293,10,"Object"],[227,18,293,16],[227,19,293,17,"assign"],[227,25,293,23],[227,26,293,24,"acc"],[227,29,293,27],[227,30,293,28,"matchedParams"],[227,43,293,41],[227,45,293,43],[228,14,294,12],[228,15,294,13,"p"],[228,16,294,14],[228,19,294,17,"Object"],[228,25,294,23],[228,26,294,24,"assign"],[228,32,294,30],[228,33,294,31,"acc"],[228,36,294,34],[228,37,294,35,"matchedParams"],[228,50,294,48],[228,51,294,49,"p"],[228,52,294,50],[228,53,294,51],[228,57,294,55],[228,58,294,56],[228,59,294,57],[228,61,294,59],[229,16,295,14],[229,17,295,15,"index"],[229,22,295,20],[229,25,295,23,"decodedParamSegment"],[230,14,296,12],[230,15,296,13],[231,12,297,10],[231,13,297,11],[231,14,297,12],[232,12,299,10],[232,19,299,17,"acc"],[232,22,299,20],[233,10,300,8],[233,11,300,9],[233,13,301,8],[234,12,301,10,"pos"],[234,15,301,13],[234,17,301,15],[234,18,301,16],[234,19,301,17],[235,12,301,19,"matchedParams"],[235,25,301,32],[235,27,301,34],[235,28,301,35],[236,10,301,37],[236,11,302,6],[236,12,302,7],[237,10,304,6],[237,14,304,12,"matchedParams"],[237,27,304,25],[237,30,304,28,"matchResult"],[237,41,304,39],[237,42,304,40,"matchedParams"],[237,55,304,53],[237,59,304,57],[237,60,304,58],[237,61,304,59],[238,10,306,6,"routes"],[238,16,306,12],[238,19,306,15,"config"],[238,25,306,21],[238,26,306,22,"routeNames"],[238,36,306,32],[238,37,306,33,"map"],[238,40,306,36],[238,41,306,38,"name"],[238,45,306,42],[238,49,306,47],[239,12,307,8],[239,16,307,14,"routeConfig"],[239,27,307,25],[239,30,307,28,"configs"],[239,37,307,35],[239,38,307,36,"find"],[239,42,307,40],[239,43,307,42,"c"],[239,44,307,43],[239,48,307,48],[240,14,308,10],[241,14,309,10],[241,21,309,17,"c"],[241,22,309,18],[241,23,309,19,"screen"],[241,29,309,25],[241,34,309,30,"name"],[241,38,309,34],[241,42,309,38,"config"],[241,48,309,44],[241,49,309,45,"pattern"],[241,56,309,52],[241,57,309,53,"startsWith"],[241,67,309,63],[241,68,309,64,"c"],[241,69,309,65],[241,70,309,66,"pattern"],[241,77,309,73],[241,78,309,74],[242,12,310,8],[242,13,310,9],[242,14,310,10],[244,12,312,8],[245,12,313,8],[245,16,313,14,"normalizedPath"],[245,30,313,28],[245,33,313,31,"routeConfig"],[245,44,313,42],[245,46,313,44,"path"],[245,50,313,48],[245,51,314,11,"split"],[245,56,314,16],[245,57,314,17],[245,60,314,20],[245,61,314,21],[245,62,315,11,"filter"],[245,68,315,17],[245,69,315,18,"Boolean"],[245,76,315,25],[245,77,315,26],[245,78,316,11,"join"],[245,82,316,15],[245,83,316,16],[245,86,316,19],[245,87,316,20],[247,12,318,8],[248,12,319,8],[248,16,319,14,"numInitialSegments"],[248,34,319,32],[248,37,319,35,"routeConfig"],[248,48,319,46],[248,50,319,48,"pattern"],[249,12,320,10],[250,12,320,10],[250,13,321,11,"replace"],[250,20,321,18],[250,21,321,19],[250,25,321,23,"RegExp"],[250,31,321,29],[250,32,321,30],[250,35,321,33],[250,39,321,33,"escape"],[250,45,321,39],[250,46,321,39,"default"],[250,53,321,39],[250,55,321,40,"normalizedPath"],[250,69,321,55],[250,70,321,56],[250,73,321,59],[250,74,321,60],[250,76,321,62],[250,78,321,64],[250,79,321,65],[250,81,322,12,"split"],[250,86,322,17],[250,87,322,18],[250,90,322,21],[250,91,322,22],[250,92,322,23,"length"],[250,98,322,29],[251,12,324,8],[251,16,324,14,"params"],[251,22,324,20],[251,25,324,23,"normalizedPath"],[251,39,324,37],[251,41,325,12,"split"],[251,46,325,17],[251,47,325,18],[251,50,325,21],[251,51,325,22],[251,52,326,11,"reduce"],[251,58,326,17],[251,59,326,43],[251,60,326,44,"acc"],[251,63,326,47],[251,65,326,49,"p"],[251,66,326,50],[251,68,326,52,"index"],[251,73,326,57],[251,78,326,62],[252,14,327,12],[252,18,327,16],[252,19,327,17,"p"],[252,20,327,18],[252,21,327,19,"startsWith"],[252,31,327,29],[252,32,327,30],[252,35,327,33],[252,36,327,34],[252,38,327,36],[253,16,328,14],[253,23,328,21,"acc"],[253,26,328,24],[254,14,329,12],[256,14,331,12],[257,14,332,12],[258,14,333,12],[258,18,333,18,"offset"],[258,24,333,24],[258,27,333,27,"numInitialSegments"],[258,45,333,45],[258,48,333,48,"numInitialSegments"],[258,66,333,66],[258,69,333,69],[258,70,333,70],[258,73,333,73],[258,74,333,74],[259,14,334,12],[259,18,334,18,"value"],[259,23,334,23],[259,26,334,26,"matchedParams"],[259,39,334,39],[259,40,334,40,"p"],[259,41,334,41],[259,42,334,42],[259,45,334,45,"index"],[259,50,334,50],[259,53,334,53,"offset"],[259,59,334,59],[259,60,334,60],[260,14,336,12],[260,18,336,16,"value"],[260,23,336,21],[260,25,336,23],[261,16,337,14],[261,20,337,20,"key"],[261,23,337,23],[261,26,337,26,"p"],[261,27,337,27],[261,28,337,28,"replace"],[261,35,337,35],[261,36,337,36],[261,40,337,40],[261,42,337,42],[261,44,337,44],[261,45,337,45],[261,46,337,46,"replace"],[261,53,337,53],[261,54,337,54],[261,59,337,59],[261,61,337,61],[261,63,337,63],[261,64,337,64],[262,16,338,14,"acc"],[262,19,338,17],[262,20,338,18,"key"],[262,23,338,21],[262,24,338,22],[262,27,338,25,"routeConfig"],[262,38,338,36],[262,40,338,38,"parse"],[262,45,338,43],[262,48,338,46,"key"],[262,51,338,49],[262,52,338,50],[262,55,339,18,"routeConfig"],[262,66,339,29],[262,67,339,30,"parse"],[262,72,339,35],[262,73,339,36,"key"],[262,76,339,39],[262,77,339,40],[262,78,339,41,"value"],[262,83,339,46],[262,84,339,47],[262,87,340,18,"value"],[262,92,340,23],[263,14,341,12],[264,14,343,12],[264,21,343,19,"acc"],[264,24,343,22],[265,12,344,10],[265,13,344,11],[265,15,344,13],[265,16,344,14],[265,17,344,15],[265,18,344,16],[266,12,346,8],[266,16,346,12,"params"],[266,22,346,18],[266,26,346,22,"Object"],[266,32,346,28],[266,33,346,29,"keys"],[266,37,346,33],[266,38,346,34,"params"],[266,44,346,40],[266,45,346,41],[266,46,346,42,"length"],[266,52,346,48],[266,54,346,50],[267,14,347,10],[267,21,347,17],[268,16,347,19,"name"],[268,20,347,23],[269,16,347,25,"params"],[270,14,347,32],[270,15,347,33],[271,12,348,8],[272,12,350,8],[272,19,350,15],[273,14,350,17,"name"],[274,12,350,22],[274,13,350,23],[275,10,351,6],[275,11,351,7],[275,12,351,8],[276,10,353,6,"remainingPath"],[276,23,353,19],[276,26,353,22,"remainingPath"],[276,39,353,35],[276,40,353,36,"replace"],[276,47,353,43],[276,48,353,44,"match"],[276,53,353,49],[276,54,353,50],[276,55,353,51],[276,56,353,52],[276,58,353,54],[276,60,353,56],[276,61,353,57],[277,10,353,58],[278,8,356,4],[279,6,357,2],[279,7,357,3],[280,6,357,3,"_ret"],[280,10,357,3],[281,4,265,2],[281,9,265,7],[281,13,265,13,"config"],[281,19,265,19],[281,23,265,23,"configs"],[281,30,265,30],[282,6,265,30,"_ret"],[282,10,265,30],[282,13,265,30,"_loop"],[282,18,265,30],[282,19,265,30,"config"],[282,25,265,30],[283,6,265,30],[283,10,265,30,"_ret"],[283,14,265,30],[283,22,267,6],[284,6,267,15],[284,10,267,15,"_ret"],[284,14,267,15],[284,22,355,6],[285,4,355,12],[286,4,359,2],[286,11,359,9],[287,6,359,11,"routes"],[287,12,359,17],[288,6,359,19,"remainingPath"],[289,4,359,33],[289,5,359,34],[290,2,360,0],[290,3,360,1],[291,2,362,0],[291,6,362,6,"createNormalizedConfigs"],[291,29,362,29],[291,32,362,32],[291,41,362,32,"createNormalizedConfigs"],[291,42,363,2,"screen"],[291,48,363,16],[291,50,364,2,"routeConfig"],[291,61,364,36],[291,63,369,20],[292,4,369,20],[292,8,365,2,"routeNames"],[292,18,365,22],[292,21,365,22,"arguments"],[292,30,365,22],[292,31,365,22,"length"],[292,37,365,22],[292,45,365,22,"arguments"],[292,54,365,22],[292,62,365,22,"undefined"],[292,71,365,22],[292,74,365,22,"arguments"],[292,83,365,22],[292,89,365,25],[292,91,365,27],[293,4,365,27],[293,8,366,2,"initials"],[293,16,366,32],[293,19,366,32,"arguments"],[293,28,366,32],[293,29,366,32,"length"],[293,35,366,32],[293,42,366,32,"arguments"],[293,51,366,32],[293,57,366,32,"undefined"],[293,66,366,32],[294,4,366,32],[294,8,367,2,"parentScreens"],[294,21,367,25],[294,24,367,25,"arguments"],[294,33,367,25],[294,34,367,25,"length"],[294,40,367,25],[294,47,367,25,"arguments"],[294,56,367,25],[294,62,367,25,"undefined"],[294,71,367,25],[295,4,367,25],[295,8,368,2,"parentPattern"],[295,21,368,24],[295,24,368,24,"arguments"],[295,33,368,24],[295,34,368,24,"length"],[295,40,368,24],[295,47,368,24,"arguments"],[295,56,368,24],[295,62,368,24,"undefined"],[295,71,368,24],[296,4,370,2],[296,8,370,8,"configs"],[296,15,370,30],[296,18,370,33],[296,20,370,35],[297,4,372,2,"routeNames"],[297,14,372,12],[297,15,372,13,"push"],[297,19,372,17],[297,20,372,18,"screen"],[297,26,372,24],[297,27,372,25],[298,4,374,2,"parentScreens"],[298,17,374,15],[298,18,374,16,"push"],[298,22,374,20],[298,23,374,21,"screen"],[298,29,374,27],[298,30,374,28],[300,4,376,2],[301,4,377,2],[301,8,377,8,"config"],[301,14,377,14],[301,17,377,17,"routeConfig"],[301,28,377,28],[301,29,377,29,"screen"],[301,35,377,35],[301,36,377,36],[302,4,379,2],[302,8,379,6],[302,15,379,13,"config"],[302,21,379,19],[302,26,379,24],[302,34,379,32],[302,36,379,34],[303,6,380,4],[304,6,381,4],[304,10,381,10,"pattern"],[304,17,381,17],[304,20,381,20,"parentPattern"],[304,33,381,33],[304,36,381,36,"joinPaths"],[304,45,381,45],[304,46,381,46,"parentPattern"],[304,59,381,59],[304,61,381,61,"config"],[304,67,381,67],[304,68,381,68],[304,71,381,71,"config"],[304,77,381,77],[305,6,383,4,"configs"],[305,13,383,11],[305,14,383,12,"push"],[305,18,383,16],[305,19,383,17,"createConfigItem"],[305,35,383,33],[305,36,383,34,"screen"],[305,42,383,40],[305,44,383,42,"routeNames"],[305,54,383,52],[305,56,383,54,"pattern"],[305,63,383,61],[305,65,383,63,"config"],[305,71,383,69],[305,72,383,70],[305,73,383,71],[306,4,384,2],[306,5,384,3],[306,11,384,9],[306,15,384,13],[306,22,384,20,"config"],[306,28,384,26],[306,33,384,31],[306,41,384,39],[306,43,384,41],[307,6,385,4],[307,10,385,8,"pattern"],[307,18,385,35],[309,6,387,4],[310,6,388,4],[311,6,389,4],[312,6,390,4],[312,10,390,8],[312,17,390,15,"config"],[312,23,390,21],[312,24,390,22,"path"],[312,28,390,26],[312,33,390,31],[312,41,390,39],[312,43,390,41],[313,8,391,6],[313,12,391,10,"config"],[313,18,391,16],[313,19,391,17,"exact"],[313,24,391,22],[313,28,391,26,"config"],[313,34,391,32],[313,35,391,33,"path"],[313,39,391,37],[313,44,391,42,"undefined"],[313,53,391,51],[313,55,391,53],[314,10,392,8],[314,16,392,14],[314,20,392,18,"Error"],[314,25,392,23],[314,26,393,10],[314,176,394,8],[314,177,394,9],[315,8,395,6],[316,8,397,6,"pattern"],[316,16,397,13],[316,19,398,8,"config"],[316,25,398,14],[316,26,398,15,"exact"],[316,31,398,20],[316,36,398,25],[316,40,398,29],[316,43,399,12,"joinPaths"],[316,52,399,21],[316,53,399,22,"parentPattern"],[316,66,399,35],[316,70,399,39],[316,72,399,41],[316,74,399,43,"config"],[316,80,399,49],[316,81,399,50,"path"],[316,85,399,54],[316,89,399,58],[316,91,399,60],[316,92,399,61],[316,95,400,12,"config"],[316,101,400,18],[316,102,400,19,"path"],[316,106,400,23],[316,110,400,27],[316,112,400,29],[317,8,402,6,"configs"],[317,15,402,13],[317,16,402,14,"push"],[317,20,402,18],[317,21,403,8,"createConfigItem"],[317,37,403,24],[317,38,404,10,"screen"],[317,44,404,16],[317,46,405,10,"routeNames"],[317,56,405,20],[317,58,406,10,"pattern"],[317,66,406,17],[317,68,407,10,"config"],[317,74,407,16],[317,75,407,17,"path"],[317,79,407,21],[317,81,408,10,"config"],[317,87,408,16],[317,88,408,17,"parse"],[317,93,409,8],[317,94,410,6],[317,95,410,7],[318,6,411,4],[319,6,413,4],[319,10,413,8,"config"],[319,16,413,14],[319,17,413,15,"screens"],[319,24,413,22],[319,26,413,24],[320,8,414,6],[321,8,415,6],[321,12,415,10,"config"],[321,18,415,16],[321,19,415,17,"initialRouteName"],[321,35,415,33],[321,37,415,35],[322,10,416,8,"initials"],[322,18,416,16],[322,19,416,17,"push"],[322,23,416,21],[322,24,416,22],[323,12,417,10,"initialRouteName"],[323,28,417,26],[323,30,417,28,"config"],[323,36,417,34],[323,37,417,35,"initialRouteName"],[323,53,417,51],[324,12,418,10,"parentScreens"],[325,10,419,8],[325,11,419,9],[325,12,419,10],[326,8,420,6],[327,8,422,6,"Object"],[327,14,422,12],[327,15,422,13,"keys"],[327,19,422,17],[327,20,422,18,"config"],[327,26,422,24],[327,27,422,25,"screens"],[327,34,422,32],[327,35,422,33],[327,36,422,34,"forEach"],[327,43,422,41],[327,44,422,43,"nestedConfig"],[327,56,422,55],[327,60,422,60],[328,10,423,8],[328,14,423,14,"result"],[328,20,423,20],[328,23,423,23,"createNormalizedConfigs"],[328,46,423,46],[328,47,424,10,"nestedConfig"],[328,59,424,22],[328,61,425,10,"config"],[328,67,425,16],[328,68,425,17,"screens"],[328,75,425,24],[328,77,426,10,"routeNames"],[328,87,426,20],[328,89,427,10,"initials"],[328,97,427,18],[328,99,428,10],[328,100,428,11],[328,103,428,14,"parentScreens"],[328,116,428,27],[328,117,428,28],[328,119,429,10,"pattern"],[328,127,429,17],[328,131,429,21,"parentPattern"],[328,144,430,8],[328,145,430,9],[329,10,432,8,"configs"],[329,17,432,15],[329,18,432,16,"push"],[329,22,432,20],[329,23,432,21],[329,26,432,24,"result"],[329,32,432,30],[329,33,432,31],[330,8,433,6],[330,9,433,7],[330,10,433,8],[331,6,434,4],[332,4,435,2],[333,4,437,2,"routeNames"],[333,14,437,12],[333,15,437,13,"pop"],[333,18,437,16],[333,19,437,17],[333,20,437,18],[334,4,439,2],[334,11,439,9,"configs"],[334,18,439,16],[335,2,440,0],[335,3,440,1],[336,2,442,0],[336,6,442,6,"createConfigItem"],[336,22,442,22],[336,25,442,25,"createConfigItem"],[336,26,443,2,"screen"],[336,32,443,16],[336,34,444,2,"routeNames"],[336,44,444,22],[336,46,445,2,"pattern"],[336,53,445,17],[336,55,446,2,"path"],[336,59,446,14],[336,61,447,2,"parse"],[336,66,447,21],[336,71,448,18],[337,4,449,2],[338,4,450,2,"pattern"],[338,11,450,9],[338,14,450,12,"pattern"],[338,21,450,19],[338,22,450,20,"split"],[338,27,450,25],[338,28,450,26],[338,31,450,29],[338,32,450,30],[338,33,450,31,"filter"],[338,39,450,37],[338,40,450,38,"Boolean"],[338,47,450,45],[338,48,450,46],[338,49,450,47,"join"],[338,53,450,51],[338,54,450,52],[338,57,450,55],[338,58,450,56],[339,4,452,2],[339,8,452,8,"regex"],[339,13,452,13],[339,16,452,16,"pattern"],[339,23,452,23],[339,26,453,6],[339,30,453,10,"RegExp"],[339,36,453,16],[339,37,454,8],[339,42,454,13,"pattern"],[339,49,454,20],[339,50,455,11,"split"],[339,55,455,16],[339,56,455,17],[339,59,455,20],[339,60,455,21],[339,61,456,11,"map"],[339,64,456,14],[339,65,456,16,"it"],[339,67,456,18],[339,71,456,23],[340,6,457,12],[340,10,457,16,"it"],[340,12,457,18],[340,13,457,19,"startsWith"],[340,23,457,29],[340,24,457,30],[340,27,457,33],[340,28,457,34],[340,30,457,36],[341,8,458,14],[341,15,458,21],[341,29,458,35,"it"],[341,31,458,37],[341,32,458,38,"endsWith"],[341,40,458,46],[341,41,458,47],[341,44,458,50],[341,45,458,51],[341,48,458,54],[341,51,458,57],[341,54,458,60],[341,56,458,62],[341,59,458,65],[342,6,459,12],[343,6,461,12],[343,13,461,19],[343,16,461,22,"it"],[343,18,461,24],[343,23,461,29],[343,26,461,32],[343,29,461,35],[343,33,461,39],[343,36,461,42],[343,40,461,42,"escape"],[343,46,461,48],[343,47,461,48,"default"],[343,54,461,48],[343,56,461,49,"it"],[343,58,461,51],[343,59,461,52],[343,64,461,57],[344,4,462,10],[344,5,462,11],[344,6,462,12],[344,7,463,11,"join"],[344,11,463,15],[344,12,463,16],[344,14,463,18],[344,15,463,19],[344,18,464,6],[344,19,464,7],[344,22,465,6,"undefined"],[344,31,465,15],[345,4,467,2],[345,11,467,9],[346,6,468,4,"screen"],[346,12,468,10],[347,6,469,4,"regex"],[347,11,469,9],[348,6,470,4,"pattern"],[348,13,470,11],[349,6,471,4,"path"],[349,10,471,8],[350,6,472,4],[351,6,473,4,"routeNames"],[351,16,473,14],[351,18,473,16],[351,19,473,17],[351,22,473,20,"routeNames"],[351,32,473,30],[351,33,473,31],[352,6,474,4,"parse"],[353,4,475,2],[353,5,475,3],[354,2,476,0],[354,3,476,1],[355,2,478,0],[355,6,478,6,"findParseConfigForRoute"],[355,29,478,29],[355,32,478,32,"findParseConfigForRoute"],[355,33,479,2,"routeName"],[355,42,479,19],[355,44,480,2,"flatConfig"],[355,54,480,27],[355,59,481,30],[356,4,482,2],[356,9,482,7],[356,13,482,13,"config"],[356,19,482,19],[356,23,482,23,"flatConfig"],[356,33,482,33],[356,35,482,35],[357,6,483,4],[357,10,483,8,"routeName"],[357,19,483,17],[357,24,483,22,"config"],[357,30,483,28],[357,31,483,29,"routeNames"],[357,41,483,39],[357,42,483,40,"config"],[357,48,483,46],[357,49,483,47,"routeNames"],[357,59,483,57],[357,60,483,58,"length"],[357,66,483,64],[357,69,483,67],[357,70,483,68],[357,71,483,69],[357,73,483,71],[358,8,484,6],[358,15,484,13,"config"],[358,21,484,19],[358,22,484,20,"parse"],[358,27,484,25],[359,6,485,4],[360,4,486,2],[361,4,488,2],[361,11,488,9,"undefined"],[361,20,488,18],[362,2,489,0],[362,3,489,1],[364,2,491,0],[365,2,492,0],[365,6,492,6,"findInitialRoute"],[365,22,492,22],[365,25,492,25,"findInitialRoute"],[365,26,493,2,"routeName"],[365,35,493,19],[365,37,494,2,"parentScreens"],[365,50,494,25],[365,52,495,2,"initialRoutes"],[365,65,495,37],[365,70,496,25],[366,4,497,2],[366,9,497,7],[366,13,497,13,"config"],[366,19,497,19],[366,23,497,23,"initialRoutes"],[366,36,497,36],[366,38,497,38],[367,6,498,4],[367,10,498,8,"parentScreens"],[367,23,498,21],[367,24,498,22,"length"],[367,30,498,28],[367,35,498,33,"config"],[367,41,498,39],[367,42,498,40,"parentScreens"],[367,55,498,53],[367,56,498,54,"length"],[367,62,498,60],[367,64,498,62],[368,8,499,6],[368,12,499,10,"sameParents"],[368,23,499,21],[368,26,499,24],[368,30,499,28],[369,8,500,6],[369,13,500,11],[369,17,500,15,"i"],[369,18,500,16],[369,21,500,19],[369,22,500,20],[369,24,500,22,"i"],[369,25,500,23],[369,28,500,26,"parentScreens"],[369,41,500,39],[369,42,500,40,"length"],[369,48,500,46],[369,50,500,48,"i"],[369,51,500,49],[369,53,500,51],[369,55,500,53],[370,10,501,8],[370,14,501,12,"parentScreens"],[370,27,501,25],[370,28,501,26,"i"],[370,29,501,27],[370,30,501,28],[370,31,501,29,"localeCompare"],[370,44,501,42],[370,45,501,43,"config"],[370,51,501,49],[370,52,501,50,"parentScreens"],[370,65,501,63],[370,66,501,64,"i"],[370,67,501,65],[370,68,501,66],[370,69,501,67],[370,74,501,72],[370,75,501,73],[370,77,501,75],[371,12,502,10,"sameParents"],[371,23,502,21],[371,26,502,24],[371,31,502,29],[372,12,503,10],[373,10,504,8],[374,8,505,6],[375,8,506,6],[375,12,506,10,"sameParents"],[375,23,506,21],[375,25,506,23],[376,10,507,8],[376,17,507,15,"routeName"],[376,26,507,24],[376,31,507,29,"config"],[376,37,507,35],[376,38,507,36,"initialRouteName"],[376,54,507,52],[376,57,508,12,"config"],[376,63,508,18],[376,64,508,19,"initialRouteName"],[376,80,508,35],[376,83,509,12,"undefined"],[376,92,509,21],[377,8,510,6],[378,6,511,4],[379,4,512,2],[380,4,513,2],[380,11,513,9,"undefined"],[380,20,513,18],[381,2,514,0],[381,3,514,1],[383,2,516,0],[384,2,517,0],[385,2,518,0],[385,6,518,6,"createStateObject"],[385,23,518,23],[385,26,518,26,"createStateObject"],[385,27,519,2,"initialRoute"],[385,39,519,34],[385,41,520,2,"route"],[385,46,520,20],[385,48,521,2,"isEmpty"],[385,55,521,18],[385,60,522,19],[386,4,523,2],[386,8,523,6,"isEmpty"],[386,15,523,13],[386,17,523,15],[387,6,524,4],[387,10,524,8,"initialRoute"],[387,22,524,20],[387,24,524,22],[388,8,525,6],[388,15,525,13],[389,10,526,8,"index"],[389,15,526,13],[389,17,526,15],[389,18,526,16],[390,10,527,8,"routes"],[390,16,527,14],[390,18,527,16],[390,19,527,17],[391,12,527,19,"name"],[391,16,527,23],[391,18,527,25,"initialRoute"],[392,10,527,38],[392,11,527,39],[392,13,527,41,"route"],[392,18,527,46],[393,8,528,6],[393,9,528,7],[394,6,529,4],[394,7,529,5],[394,13,529,11],[395,8,530,6],[395,15,530,13],[396,10,531,8,"routes"],[396,16,531,14],[396,18,531,16],[396,19,531,17,"route"],[396,24,531,22],[397,8,532,6],[397,9,532,7],[398,6,533,4],[399,4,534,2],[399,5,534,3],[399,11,534,9],[400,6,535,4],[400,10,535,8,"initialRoute"],[400,22,535,20],[400,24,535,22],[401,8,536,6],[401,15,536,13],[402,10,537,8,"index"],[402,15,537,13],[402,17,537,15],[402,18,537,16],[403,10,538,8,"routes"],[403,16,538,14],[403,18,538,16],[403,19,538,17],[404,12,538,19,"name"],[404,16,538,23],[404,18,538,25,"initialRoute"],[405,10,538,38],[405,11,538,39],[405,13,538,41],[406,12,538,43],[406,15,538,46,"route"],[406,20,538,51],[407,12,538,53,"state"],[407,17,538,58],[407,19,538,60],[408,14,538,62,"routes"],[408,20,538,68],[408,22,538,70],[409,12,538,73],[410,10,538,75],[410,11,538,76],[411,8,539,6],[411,9,539,7],[412,6,540,4],[412,7,540,5],[412,13,540,11],[413,8,541,6],[413,15,541,13],[414,10,542,8,"routes"],[414,16,542,14],[414,18,542,16],[414,19,542,17],[415,12,542,19],[415,15,542,22,"route"],[415,20,542,27],[416,12,542,29,"state"],[416,17,542,34],[416,19,542,36],[417,14,542,38,"routes"],[417,20,542,44],[417,22,542,46],[418,12,542,49],[419,10,542,51],[419,11,542,52],[420,8,543,6],[420,9,543,7],[421,6,544,4],[422,4,545,2],[423,2,546,0],[423,3,546,1],[424,2,548,0],[424,6,548,6,"createNestedStateObject"],[424,29,548,29],[424,32,548,32,"createNestedStateObject"],[424,33,549,2,"path"],[424,37,549,14],[424,39,550,2,"routes"],[424,45,550,23],[424,47,551,2,"initialRoutes"],[424,60,551,37],[424,62,552,2,"flatConfig"],[424,72,552,28],[424,77,553,5],[425,4,554,2],[425,8,554,6,"state"],[425,13,554,25],[426,4,555,2],[426,8,555,6,"route"],[426,13,555,11],[426,16,555,14,"routes"],[426,22,555,20],[426,23,555,21,"shift"],[426,28,555,26],[426,29,555,27],[426,30,555,43],[427,4,556,2],[427,8,556,8,"parentScreens"],[427,21,556,31],[427,24,556,34],[427,26,556,36],[428,4,558,2],[428,8,558,6,"initialRoute"],[428,20,558,18],[428,23,558,21,"findInitialRoute"],[428,39,558,37],[428,40,558,38,"route"],[428,45,558,43],[428,46,558,44,"name"],[428,50,558,48],[428,52,558,50,"parentScreens"],[428,65,558,63],[428,67,558,65,"initialRoutes"],[428,80,558,78],[428,81,558,79],[429,4,560,2,"parentScreens"],[429,17,560,15],[429,18,560,16,"push"],[429,22,560,20],[429,23,560,21,"route"],[429,28,560,26],[429,29,560,27,"name"],[429,33,560,31],[429,34,560,32],[430,4,562,2,"state"],[430,9,562,7],[430,12,562,10,"createStateObject"],[430,29,562,27],[430,30,562,28,"initialRoute"],[430,42,562,40],[430,44,562,42,"route"],[430,49,562,47],[430,51,562,49,"routes"],[430,57,562,55],[430,58,562,56,"length"],[430,64,562,62],[430,69,562,67],[430,70,562,68],[430,71,562,69],[431,4,564,2],[431,8,564,6,"routes"],[431,14,564,12],[431,15,564,13,"length"],[431,21,564,19],[431,24,564,22],[431,25,564,23],[431,27,564,25],[432,6,565,4],[432,10,565,8,"nestedState"],[432,21,565,19],[432,24,565,22,"state"],[432,29,565,27],[433,6,567,4],[433,13,567,12,"route"],[433,18,567,17],[433,21,567,20,"routes"],[433,27,567,26],[433,28,567,27,"shift"],[433,33,567,32],[433,34,567,33],[433,35,567,49],[433,37,567,52],[434,8,568,6,"initialRoute"],[434,20,568,18],[434,23,568,21,"findInitialRoute"],[434,39,568,37],[434,40,568,38,"route"],[434,45,568,43],[434,46,568,44,"name"],[434,50,568,48],[434,52,568,50,"parentScreens"],[434,65,568,63],[434,67,568,65,"initialRoutes"],[434,80,568,78],[434,81,568,79],[435,8,570,6],[435,12,570,12,"nestedStateIndex"],[435,28,570,28],[435,31,571,8,"nestedState"],[435,42,571,19],[435,43,571,20,"index"],[435,48,571,25],[435,52,571,29,"nestedState"],[435,63,571,40],[435,64,571,41,"routes"],[435,70,571,47],[435,71,571,48,"length"],[435,77,571,54],[435,80,571,57],[435,81,571,58],[436,8,573,6,"nestedState"],[436,19,573,17],[436,20,573,18,"routes"],[436,26,573,24],[436,27,573,25,"nestedStateIndex"],[436,43,573,41],[436,44,573,42],[436,45,573,43,"state"],[436,50,573,48],[436,53,573,51,"createStateObject"],[436,70,573,68],[436,71,574,8,"initialRoute"],[436,83,574,20],[436,85,575,8,"route"],[436,90,575,13],[436,92,576,8,"routes"],[436,98,576,14],[436,99,576,15,"length"],[436,105,576,21],[436,110,576,26],[436,111,577,6],[436,112,577,7],[437,8,579,6],[437,12,579,10,"routes"],[437,18,579,16],[437,19,579,17,"length"],[437,25,579,23],[437,28,579,26],[437,29,579,27],[437,31,579,29],[438,10,580,8,"nestedState"],[438,21,580,19],[438,24,580,22,"nestedState"],[438,35,580,33],[438,36,580,34,"routes"],[438,42,580,40],[438,43,580,41,"nestedStateIndex"],[438,59,580,57],[438,60,580,58],[438,61,581,11,"state"],[438,66,581,32],[439,8,582,6],[440,8,584,6,"parentScreens"],[440,21,584,19],[440,22,584,20,"push"],[440,26,584,24],[440,27,584,25,"route"],[440,32,584,30],[440,33,584,31,"name"],[440,37,584,35],[440,38,584,36],[441,6,585,4],[442,4,586,2],[443,4,588,2,"route"],[443,9,588,7],[443,12,588,10],[443,16,588,10,"findFocusedRoute"],[443,32,588,26],[443,33,588,26,"default"],[443,40,588,26],[443,42,588,27,"state"],[443,47,588,32],[443,48,588,48],[444,4,589,2,"route"],[444,9,589,7],[444,10,589,8,"path"],[444,14,589,12],[444,17,589,15,"path"],[444,21,589,19],[445,4,591,2],[445,8,591,8,"params"],[445,14,591,14],[445,17,591,17,"parseQueryParams"],[445,33,591,33],[445,34,592,4,"path"],[445,38,592,8],[445,40,593,4,"flatConfig"],[445,50,593,14],[445,53,593,17,"findParseConfigForRoute"],[445,76,593,40],[445,77,593,41,"route"],[445,82,593,46],[445,83,593,47,"name"],[445,87,593,51],[445,89,593,53,"flatConfig"],[445,99,593,63],[445,100,593,64],[445,103,593,67,"undefined"],[445,112,594,2],[445,113,594,3],[446,4,596,2],[446,8,596,6,"params"],[446,14,596,12],[446,16,596,14],[447,6,597,4,"route"],[447,11,597,9],[447,12,597,10,"params"],[447,18,597,16],[447,21,597,19],[448,8,597,21],[448,11,597,24,"route"],[448,16,597,29],[448,17,597,30,"params"],[448,23,597,36],[449,8,597,38],[449,11,597,41,"params"],[450,6,597,48],[450,7,597,49],[451,4,598,2],[452,4,600,2],[452,11,600,9,"state"],[452,16,600,14],[453,2,601,0],[453,3,601,1],[454,2,603,0],[454,6,603,6,"parseQueryParams"],[454,22,603,22],[454,25,603,25,"parseQueryParams"],[454,26,604,2,"path"],[454,30,604,14],[454,32,605,2,"parseConfig"],[454,43,605,54],[454,48,606,5],[455,4,607,2],[455,8,607,8,"query"],[455,13,607,13],[455,16,607,16,"path"],[455,20,607,20],[455,21,607,21,"split"],[455,26,607,26],[455,27,607,27],[455,30,607,30],[455,31,607,31],[455,32,607,32],[455,33,607,33],[455,34,607,34],[456,4,608,2],[456,8,608,8,"params"],[456,14,608,14],[456,17,608,17,"queryString"],[456,28,608,28],[456,29,608,29,"parse"],[456,34,608,34],[456,35,608,35,"query"],[456,40,608,40],[456,41,608,41],[457,4,610,2],[457,8,610,6,"parseConfig"],[457,19,610,17],[457,21,610,19],[458,6,611,4,"Object"],[458,12,611,10],[458,13,611,11,"keys"],[458,17,611,15],[458,18,611,16,"params"],[458,24,611,22],[458,25,611,23],[458,26,611,24,"forEach"],[458,33,611,31],[458,34,611,33,"name"],[458,38,611,37],[458,42,611,42],[459,8,612,6],[459,12,613,8,"Object"],[459,18,613,14],[459,19,613,15,"hasOwnProperty"],[459,33,613,29],[459,34,613,30,"call"],[459,38,613,34],[459,39,613,35,"parseConfig"],[459,50,613,46],[459,52,613,48,"name"],[459,56,613,52],[459,57,613,53],[459,61,614,8],[459,68,614,15,"params"],[459,74,614,21],[459,75,614,22,"name"],[459,79,614,26],[459,80,614,27],[459,85,614,32],[459,93,614,40],[459,95,615,8],[460,10,616,8,"params"],[460,16,616,14],[460,17,616,15,"name"],[460,21,616,19],[460,22,616,20],[460,25,616,23,"parseConfig"],[460,36,616,34],[460,37,616,35,"name"],[460,41,616,39],[460,42,616,40],[460,43,616,41,"params"],[460,49,616,47],[460,50,616,48,"name"],[460,54,616,52],[460,55,616,63],[460,56,616,64],[461,8,617,6],[462,6,618,4],[462,7,618,5],[462,8,618,6],[463,4,619,2],[464,4,621,2],[464,11,621,9,"Object"],[464,17,621,15],[464,18,621,16,"keys"],[464,22,621,20],[464,23,621,21,"params"],[464,29,621,27],[464,30,621,28],[464,31,621,29,"length"],[464,37,621,35],[464,40,621,38,"params"],[464,46,621,44],[464,49,621,47,"undefined"],[464,58,621,56],[465,2,622,0],[465,3,622,1],[466,0,622,2],[466,3]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","Object.keys.map$argument_0","concat.sort$argument_0","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","configs.find$argument_0","config.routeNames.every$argument_0","match.routeNames.map$argument_0","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.reduce$argument_0","config.routeNames.map$argument_0","normalizedPath.split.reduce$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","pattern.split.map$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;eCgE;WCgC;ODG;kCEY;SFO;UGG;KHiD;8CIG;oBCS,sBD;oBEC,sBF;GJgB;MOM;UCI,wBD,wBC,OD;SPC;6BSM,oBT;gBUgB;MVI;CDe;kBYE;yBCE,mBD;cZE;4BcE;QCkB;SDsB;qCEM;yCRC;SQG;2CCgB;WDkB;OFO;CdS;gCkBE;0CC4D;ODW;ClBO;yBoBE;eCc;WDM;CpBc;gCsBE;CtBW;yBuBG;CvBsB;0BwBI;CxB4B;gCyBE;CzBqD;yB0BE;gCPQ;KOO;C1BI"},"hasCjsExports":false},"type":"js/module"}]}